// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/Hosi121/SpeakUp/ent/event_records"
	"github.com/Hosi121/SpeakUp/ent/events"
	"github.com/Hosi121/SpeakUp/ent/users"
)

// EVENT_RECORDS is the model entity for the EVENT_RECORDS schema.
type EVENT_RECORDS struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// UserID holds the value of the "user_id" field.
	UserID int `json:"user_id,omitempty"`
	// EventID holds the value of the "event_id" field.
	EventID int `json:"event_id,omitempty"`
	// ParticipatesBit holds the value of the "participates_bit" field.
	ParticipatesBit int `json:"participates_bit,omitempty"`
	// Records holds the value of the "records" field.
	Records string `json:"records,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the EVENT_RECORDSQuery when eager-loading is set.
	Edges               EVENT_RECORDSEdges `json:"edges"`
	events_participated *int
	users_makes         *int
	selectValues        sql.SelectValues
}

// EVENT_RECORDSEdges holds the relations/edges for other nodes in the graph.
type EVENT_RECORDSEdges struct {
	// Made holds the value of the made edge.
	Made *USERS `json:"made,omitempty"`
	// Participates holds the value of the participates edge.
	Participates *EVENTS `json:"participates,omitempty"`
	// Has holds the value of the has edge.
	Has []*SESSIONS `json:"has,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// MadeOrErr returns the Made value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e EVENT_RECORDSEdges) MadeOrErr() (*USERS, error) {
	if e.Made != nil {
		return e.Made, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: users.Label}
	}
	return nil, &NotLoadedError{edge: "made"}
}

// ParticipatesOrErr returns the Participates value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e EVENT_RECORDSEdges) ParticipatesOrErr() (*EVENTS, error) {
	if e.Participates != nil {
		return e.Participates, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: events.Label}
	}
	return nil, &NotLoadedError{edge: "participates"}
}

// HasOrErr returns the Has value or an error if the edge
// was not loaded in eager-loading.
func (e EVENT_RECORDSEdges) HasOrErr() ([]*SESSIONS, error) {
	if e.loadedTypes[2] {
		return e.Has, nil
	}
	return nil, &NotLoadedError{edge: "has"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*EVENT_RECORDS) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case event_records.FieldID, event_records.FieldUserID, event_records.FieldEventID, event_records.FieldParticipatesBit:
			values[i] = new(sql.NullInt64)
		case event_records.FieldRecords:
			values[i] = new(sql.NullString)
		case event_records.ForeignKeys[0]: // events_participated
			values[i] = new(sql.NullInt64)
		case event_records.ForeignKeys[1]: // users_makes
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the EVENT_RECORDS fields.
func (er *EVENT_RECORDS) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case event_records.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			er.ID = int(value.Int64)
		case event_records.FieldUserID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				er.UserID = int(value.Int64)
			}
		case event_records.FieldEventID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field event_id", values[i])
			} else if value.Valid {
				er.EventID = int(value.Int64)
			}
		case event_records.FieldParticipatesBit:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field participates_bit", values[i])
			} else if value.Valid {
				er.ParticipatesBit = int(value.Int64)
			}
		case event_records.FieldRecords:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field records", values[i])
			} else if value.Valid {
				er.Records = value.String
			}
		case event_records.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field events_participated", value)
			} else if value.Valid {
				er.events_participated = new(int)
				*er.events_participated = int(value.Int64)
			}
		case event_records.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field users_makes", value)
			} else if value.Valid {
				er.users_makes = new(int)
				*er.users_makes = int(value.Int64)
			}
		default:
			er.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the EVENT_RECORDS.
// This includes values selected through modifiers, order, etc.
func (er *EVENT_RECORDS) Value(name string) (ent.Value, error) {
	return er.selectValues.Get(name)
}

// QueryMade queries the "made" edge of the EVENT_RECORDS entity.
func (er *EVENT_RECORDS) QueryMade() *USERSQuery {
	return NewEVENTRECORDSClient(er.config).QueryMade(er)
}

// QueryParticipates queries the "participates" edge of the EVENT_RECORDS entity.
func (er *EVENT_RECORDS) QueryParticipates() *EVENTSQuery {
	return NewEVENTRECORDSClient(er.config).QueryParticipates(er)
}

// QueryHas queries the "has" edge of the EVENT_RECORDS entity.
func (er *EVENT_RECORDS) QueryHas() *SESSIONSQuery {
	return NewEVENTRECORDSClient(er.config).QueryHas(er)
}

// Update returns a builder for updating this EVENT_RECORDS.
// Note that you need to call EVENT_RECORDS.Unwrap() before calling this method if this EVENT_RECORDS
// was returned from a transaction, and the transaction was committed or rolled back.
func (er *EVENT_RECORDS) Update() *EVENTRECORDSUpdateOne {
	return NewEVENTRECORDSClient(er.config).UpdateOne(er)
}

// Unwrap unwraps the EVENT_RECORDS entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (er *EVENT_RECORDS) Unwrap() *EVENT_RECORDS {
	_tx, ok := er.config.driver.(*txDriver)
	if !ok {
		panic("ent: EVENT_RECORDS is not a transactional entity")
	}
	er.config.driver = _tx.drv
	return er
}

// String implements the fmt.Stringer.
func (er *EVENT_RECORDS) String() string {
	var builder strings.Builder
	builder.WriteString("EVENT_RECORDS(")
	builder.WriteString(fmt.Sprintf("id=%v, ", er.ID))
	builder.WriteString("user_id=")
	builder.WriteString(fmt.Sprintf("%v", er.UserID))
	builder.WriteString(", ")
	builder.WriteString("event_id=")
	builder.WriteString(fmt.Sprintf("%v", er.EventID))
	builder.WriteString(", ")
	builder.WriteString("participates_bit=")
	builder.WriteString(fmt.Sprintf("%v", er.ParticipatesBit))
	builder.WriteString(", ")
	builder.WriteString("records=")
	builder.WriteString(er.Records)
	builder.WriteByte(')')
	return builder.String()
}

// EVENT_RECORDSs is a parsable slice of EVENT_RECORDS.
type EVENT_RECORDSs []*EVENT_RECORDS
