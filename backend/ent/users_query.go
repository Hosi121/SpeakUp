// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Hosi121/SpeakUp/ent/friends"
	"github.com/Hosi121/SpeakUp/ent/matchings"
	"github.com/Hosi121/SpeakUp/ent/memos"
	"github.com/Hosi121/SpeakUp/ent/predicate"
	"github.com/Hosi121/SpeakUp/ent/users"
)

// USERSQuery is the builder for querying USERS entities.
type USERSQuery struct {
	config
	ctx              *QueryContext
	order            []users.OrderOption
	inters           []Interceptor
	predicates       []predicate.USERS
	withConnects     *FRIENDSQuery
	withParticipates *MATCHINGSQuery
	withPrepares     *MEMOSQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the USERSQuery builder.
func (uq *USERSQuery) Where(ps ...predicate.USERS) *USERSQuery {
	uq.predicates = append(uq.predicates, ps...)
	return uq
}

// Limit the number of records to be returned by this query.
func (uq *USERSQuery) Limit(limit int) *USERSQuery {
	uq.ctx.Limit = &limit
	return uq
}

// Offset to start from.
func (uq *USERSQuery) Offset(offset int) *USERSQuery {
	uq.ctx.Offset = &offset
	return uq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (uq *USERSQuery) Unique(unique bool) *USERSQuery {
	uq.ctx.Unique = &unique
	return uq
}

// Order specifies how the records should be ordered.
func (uq *USERSQuery) Order(o ...users.OrderOption) *USERSQuery {
	uq.order = append(uq.order, o...)
	return uq
}

// QueryConnects chains the current query on the "connects" edge.
func (uq *USERSQuery) QueryConnects() *FRIENDSQuery {
	query := (&FRIENDSClient{config: uq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := uq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := uq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(users.Table, users.FieldID, selector),
			sqlgraph.To(friends.Table, friends.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, users.ConnectsTable, users.ConnectsPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(uq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryParticipates chains the current query on the "participates" edge.
func (uq *USERSQuery) QueryParticipates() *MATCHINGSQuery {
	query := (&MATCHINGSClient{config: uq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := uq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := uq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(users.Table, users.FieldID, selector),
			sqlgraph.To(matchings.Table, matchings.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, users.ParticipatesTable, users.ParticipatesPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(uq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryPrepares chains the current query on the "prepares" edge.
func (uq *USERSQuery) QueryPrepares() *MEMOSQuery {
	query := (&MEMOSClient{config: uq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := uq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := uq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(users.Table, users.FieldID, selector),
			sqlgraph.To(memos.Table, memos.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, users.PreparesTable, users.PreparesColumn),
		)
		fromU = sqlgraph.SetNeighbors(uq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first USERS entity from the query.
// Returns a *NotFoundError when no USERS was found.
func (uq *USERSQuery) First(ctx context.Context) (*USERS, error) {
	nodes, err := uq.Limit(1).All(setContextOp(ctx, uq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{users.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (uq *USERSQuery) FirstX(ctx context.Context) *USERS {
	node, err := uq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first USERS ID from the query.
// Returns a *NotFoundError when no USERS ID was found.
func (uq *USERSQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = uq.Limit(1).IDs(setContextOp(ctx, uq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{users.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (uq *USERSQuery) FirstIDX(ctx context.Context) int {
	id, err := uq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single USERS entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one USERS entity is found.
// Returns a *NotFoundError when no USERS entities are found.
func (uq *USERSQuery) Only(ctx context.Context) (*USERS, error) {
	nodes, err := uq.Limit(2).All(setContextOp(ctx, uq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{users.Label}
	default:
		return nil, &NotSingularError{users.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (uq *USERSQuery) OnlyX(ctx context.Context) *USERS {
	node, err := uq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only USERS ID in the query.
// Returns a *NotSingularError when more than one USERS ID is found.
// Returns a *NotFoundError when no entities are found.
func (uq *USERSQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = uq.Limit(2).IDs(setContextOp(ctx, uq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{users.Label}
	default:
		err = &NotSingularError{users.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (uq *USERSQuery) OnlyIDX(ctx context.Context) int {
	id, err := uq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of USERSs.
func (uq *USERSQuery) All(ctx context.Context) ([]*USERS, error) {
	ctx = setContextOp(ctx, uq.ctx, ent.OpQueryAll)
	if err := uq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*USERS, *USERSQuery]()
	return withInterceptors[[]*USERS](ctx, uq, qr, uq.inters)
}

// AllX is like All, but panics if an error occurs.
func (uq *USERSQuery) AllX(ctx context.Context) []*USERS {
	nodes, err := uq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of USERS IDs.
func (uq *USERSQuery) IDs(ctx context.Context) (ids []int, err error) {
	if uq.ctx.Unique == nil && uq.path != nil {
		uq.Unique(true)
	}
	ctx = setContextOp(ctx, uq.ctx, ent.OpQueryIDs)
	if err = uq.Select(users.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (uq *USERSQuery) IDsX(ctx context.Context) []int {
	ids, err := uq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (uq *USERSQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, uq.ctx, ent.OpQueryCount)
	if err := uq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, uq, querierCount[*USERSQuery](), uq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (uq *USERSQuery) CountX(ctx context.Context) int {
	count, err := uq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (uq *USERSQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, uq.ctx, ent.OpQueryExist)
	switch _, err := uq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (uq *USERSQuery) ExistX(ctx context.Context) bool {
	exist, err := uq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the USERSQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (uq *USERSQuery) Clone() *USERSQuery {
	if uq == nil {
		return nil
	}
	return &USERSQuery{
		config:           uq.config,
		ctx:              uq.ctx.Clone(),
		order:            append([]users.OrderOption{}, uq.order...),
		inters:           append([]Interceptor{}, uq.inters...),
		predicates:       append([]predicate.USERS{}, uq.predicates...),
		withConnects:     uq.withConnects.Clone(),
		withParticipates: uq.withParticipates.Clone(),
		withPrepares:     uq.withPrepares.Clone(),
		// clone intermediate query.
		sql:  uq.sql.Clone(),
		path: uq.path,
	}
}

// WithConnects tells the query-builder to eager-load the nodes that are connected to
// the "connects" edge. The optional arguments are used to configure the query builder of the edge.
func (uq *USERSQuery) WithConnects(opts ...func(*FRIENDSQuery)) *USERSQuery {
	query := (&FRIENDSClient{config: uq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	uq.withConnects = query
	return uq
}

// WithParticipates tells the query-builder to eager-load the nodes that are connected to
// the "participates" edge. The optional arguments are used to configure the query builder of the edge.
func (uq *USERSQuery) WithParticipates(opts ...func(*MATCHINGSQuery)) *USERSQuery {
	query := (&MATCHINGSClient{config: uq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	uq.withParticipates = query
	return uq
}

// WithPrepares tells the query-builder to eager-load the nodes that are connected to
// the "prepares" edge. The optional arguments are used to configure the query builder of the edge.
func (uq *USERSQuery) WithPrepares(opts ...func(*MEMOSQuery)) *USERSQuery {
	query := (&MEMOSClient{config: uq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	uq.withPrepares = query
	return uq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		UserID int `json:"user_id,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.USERS.Query().
//		GroupBy(users.FieldUserID).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (uq *USERSQuery) GroupBy(field string, fields ...string) *USERSGroupBy {
	uq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &USERSGroupBy{build: uq}
	grbuild.flds = &uq.ctx.Fields
	grbuild.label = users.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		UserID int `json:"user_id,omitempty"`
//	}
//
//	client.USERS.Query().
//		Select(users.FieldUserID).
//		Scan(ctx, &v)
func (uq *USERSQuery) Select(fields ...string) *USERSSelect {
	uq.ctx.Fields = append(uq.ctx.Fields, fields...)
	sbuild := &USERSSelect{USERSQuery: uq}
	sbuild.label = users.Label
	sbuild.flds, sbuild.scan = &uq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a USERSSelect configured with the given aggregations.
func (uq *USERSQuery) Aggregate(fns ...AggregateFunc) *USERSSelect {
	return uq.Select().Aggregate(fns...)
}

func (uq *USERSQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range uq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, uq); err != nil {
				return err
			}
		}
	}
	for _, f := range uq.ctx.Fields {
		if !users.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if uq.path != nil {
		prev, err := uq.path(ctx)
		if err != nil {
			return err
		}
		uq.sql = prev
	}
	return nil
}

func (uq *USERSQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*USERS, error) {
	var (
		nodes       = []*USERS{}
		_spec       = uq.querySpec()
		loadedTypes = [3]bool{
			uq.withConnects != nil,
			uq.withParticipates != nil,
			uq.withPrepares != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*USERS).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &USERS{config: uq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, uq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := uq.withConnects; query != nil {
		if err := uq.loadConnects(ctx, query, nodes,
			func(n *USERS) { n.Edges.Connects = []*FRIENDS{} },
			func(n *USERS, e *FRIENDS) { n.Edges.Connects = append(n.Edges.Connects, e) }); err != nil {
			return nil, err
		}
	}
	if query := uq.withParticipates; query != nil {
		if err := uq.loadParticipates(ctx, query, nodes,
			func(n *USERS) { n.Edges.Participates = []*MATCHINGS{} },
			func(n *USERS, e *MATCHINGS) { n.Edges.Participates = append(n.Edges.Participates, e) }); err != nil {
			return nil, err
		}
	}
	if query := uq.withPrepares; query != nil {
		if err := uq.loadPrepares(ctx, query, nodes, nil,
			func(n *USERS, e *MEMOS) { n.Edges.Prepares = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (uq *USERSQuery) loadConnects(ctx context.Context, query *FRIENDSQuery, nodes []*USERS, init func(*USERS), assign func(*USERS, *FRIENDS)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[int]*USERS)
	nids := make(map[int]map[*USERS]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(users.ConnectsTable)
		s.Join(joinT).On(s.C(friends.FieldID), joinT.C(users.ConnectsPrimaryKey[1]))
		s.Where(sql.InValues(joinT.C(users.ConnectsPrimaryKey[0]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(users.ConnectsPrimaryKey[0]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullInt64)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := int(values[0].(*sql.NullInt64).Int64)
				inValue := int(values[1].(*sql.NullInt64).Int64)
				if nids[inValue] == nil {
					nids[inValue] = map[*USERS]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*FRIENDS](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "connects" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (uq *USERSQuery) loadParticipates(ctx context.Context, query *MATCHINGSQuery, nodes []*USERS, init func(*USERS), assign func(*USERS, *MATCHINGS)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[int]*USERS)
	nids := make(map[int]map[*USERS]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(users.ParticipatesTable)
		s.Join(joinT).On(s.C(matchings.FieldID), joinT.C(users.ParticipatesPrimaryKey[1]))
		s.Where(sql.InValues(joinT.C(users.ParticipatesPrimaryKey[0]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(users.ParticipatesPrimaryKey[0]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullInt64)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := int(values[0].(*sql.NullInt64).Int64)
				inValue := int(values[1].(*sql.NullInt64).Int64)
				if nids[inValue] == nil {
					nids[inValue] = map[*USERS]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*MATCHINGS](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "participates" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (uq *USERSQuery) loadPrepares(ctx context.Context, query *MEMOSQuery, nodes []*USERS, init func(*USERS), assign func(*USERS, *MEMOS)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*USERS)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
	}
	query.withFKs = true
	query.Where(predicate.MEMOS(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(users.PreparesColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.users_prepares
		if fk == nil {
			return fmt.Errorf(`foreign-key "users_prepares" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "users_prepares" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}

func (uq *USERSQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := uq.querySpec()
	_spec.Node.Columns = uq.ctx.Fields
	if len(uq.ctx.Fields) > 0 {
		_spec.Unique = uq.ctx.Unique != nil && *uq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, uq.driver, _spec)
}

func (uq *USERSQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(users.Table, users.Columns, sqlgraph.NewFieldSpec(users.FieldID, field.TypeInt))
	_spec.From = uq.sql
	if unique := uq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if uq.path != nil {
		_spec.Unique = true
	}
	if fields := uq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, users.FieldID)
		for i := range fields {
			if fields[i] != users.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := uq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := uq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := uq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := uq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (uq *USERSQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(uq.driver.Dialect())
	t1 := builder.Table(users.Table)
	columns := uq.ctx.Fields
	if len(columns) == 0 {
		columns = users.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if uq.sql != nil {
		selector = uq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if uq.ctx.Unique != nil && *uq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range uq.predicates {
		p(selector)
	}
	for _, p := range uq.order {
		p(selector)
	}
	if offset := uq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := uq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// USERSGroupBy is the group-by builder for USERS entities.
type USERSGroupBy struct {
	selector
	build *USERSQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (ugb *USERSGroupBy) Aggregate(fns ...AggregateFunc) *USERSGroupBy {
	ugb.fns = append(ugb.fns, fns...)
	return ugb
}

// Scan applies the selector query and scans the result into the given value.
func (ugb *USERSGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, ugb.build.ctx, ent.OpQueryGroupBy)
	if err := ugb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*USERSQuery, *USERSGroupBy](ctx, ugb.build, ugb, ugb.build.inters, v)
}

func (ugb *USERSGroupBy) sqlScan(ctx context.Context, root *USERSQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(ugb.fns))
	for _, fn := range ugb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*ugb.flds)+len(ugb.fns))
		for _, f := range *ugb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*ugb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := ugb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// USERSSelect is the builder for selecting fields of USERS entities.
type USERSSelect struct {
	*USERSQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (us *USERSSelect) Aggregate(fns ...AggregateFunc) *USERSSelect {
	us.fns = append(us.fns, fns...)
	return us
}

// Scan applies the selector query and scans the result into the given value.
func (us *USERSSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, us.ctx, ent.OpQuerySelect)
	if err := us.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*USERSQuery, *USERSSelect](ctx, us.USERSQuery, us, us.inters, v)
}

func (us *USERSSelect) sqlScan(ctx context.Context, root *USERSQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(us.fns))
	for _, fn := range us.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*us.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := us.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
