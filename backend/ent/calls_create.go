// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Hosi121/SpeakUp/ent/calls"
	"github.com/Hosi121/SpeakUp/ent/sessions"
)

// CALLSCreate is the builder for creating a CALLS entity.
type CALLSCreate struct {
	config
	mutation *CALLSMutation
	hooks    []Hook
}

// SetSessionID sets the "session_id" field.
func (cc *CALLSCreate) SetSessionID(i int) *CALLSCreate {
	cc.mutation.SetSessionID(i)
	return cc
}

// SetCallStart sets the "call_start" field.
func (cc *CALLSCreate) SetCallStart(t time.Time) *CALLSCreate {
	cc.mutation.SetCallStart(t)
	return cc
}

// SetNillableCallStart sets the "call_start" field if the given value is not nil.
func (cc *CALLSCreate) SetNillableCallStart(t *time.Time) *CALLSCreate {
	if t != nil {
		cc.SetCallStart(*t)
	}
	return cc
}

// SetCallEnd sets the "call_end" field.
func (cc *CALLSCreate) SetCallEnd(t time.Time) *CALLSCreate {
	cc.mutation.SetCallEnd(t)
	return cc
}

// SetNillableCallEnd sets the "call_end" field if the given value is not nil.
func (cc *CALLSCreate) SetNillableCallEnd(t *time.Time) *CALLSCreate {
	if t != nil {
		cc.SetCallEnd(*t)
	}
	return cc
}

// SetRating sets the "rating" field.
func (cc *CALLSCreate) SetRating(i int) *CALLSCreate {
	cc.mutation.SetRating(i)
	return cc
}

// SetCreatedAt sets the "created_at" field.
func (cc *CALLSCreate) SetCreatedAt(t time.Time) *CALLSCreate {
	cc.mutation.SetCreatedAt(t)
	return cc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (cc *CALLSCreate) SetNillableCreatedAt(t *time.Time) *CALLSCreate {
	if t != nil {
		cc.SetCreatedAt(*t)
	}
	return cc
}

// SetMadeID sets the "made" edge to the SESSIONS entity by ID.
func (cc *CALLSCreate) SetMadeID(id int) *CALLSCreate {
	cc.mutation.SetMadeID(id)
	return cc
}

// SetNillableMadeID sets the "made" edge to the SESSIONS entity by ID if the given value is not nil.
func (cc *CALLSCreate) SetNillableMadeID(id *int) *CALLSCreate {
	if id != nil {
		cc = cc.SetMadeID(*id)
	}
	return cc
}

// SetMade sets the "made" edge to the SESSIONS entity.
func (cc *CALLSCreate) SetMade(s *SESSIONS) *CALLSCreate {
	return cc.SetMadeID(s.ID)
}

// Mutation returns the CALLSMutation object of the builder.
func (cc *CALLSCreate) Mutation() *CALLSMutation {
	return cc.mutation
}

// Save creates the CALLS in the database.
func (cc *CALLSCreate) Save(ctx context.Context) (*CALLS, error) {
	cc.defaults()
	return withHooks(ctx, cc.sqlSave, cc.mutation, cc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (cc *CALLSCreate) SaveX(ctx context.Context) *CALLS {
	v, err := cc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cc *CALLSCreate) Exec(ctx context.Context) error {
	_, err := cc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cc *CALLSCreate) ExecX(ctx context.Context) {
	if err := cc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cc *CALLSCreate) defaults() {
	if _, ok := cc.mutation.CallStart(); !ok {
		v := calls.DefaultCallStart()
		cc.mutation.SetCallStart(v)
	}
	if _, ok := cc.mutation.CallEnd(); !ok {
		v := calls.DefaultCallEnd()
		cc.mutation.SetCallEnd(v)
	}
	if _, ok := cc.mutation.CreatedAt(); !ok {
		v := calls.DefaultCreatedAt()
		cc.mutation.SetCreatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cc *CALLSCreate) check() error {
	if _, ok := cc.mutation.SessionID(); !ok {
		return &ValidationError{Name: "session_id", err: errors.New(`ent: missing required field "CALLS.session_id"`)}
	}
	if _, ok := cc.mutation.CallStart(); !ok {
		return &ValidationError{Name: "call_start", err: errors.New(`ent: missing required field "CALLS.call_start"`)}
	}
	if _, ok := cc.mutation.CallEnd(); !ok {
		return &ValidationError{Name: "call_end", err: errors.New(`ent: missing required field "CALLS.call_end"`)}
	}
	if _, ok := cc.mutation.Rating(); !ok {
		return &ValidationError{Name: "rating", err: errors.New(`ent: missing required field "CALLS.rating"`)}
	}
	if _, ok := cc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "CALLS.created_at"`)}
	}
	return nil
}

func (cc *CALLSCreate) sqlSave(ctx context.Context) (*CALLS, error) {
	if err := cc.check(); err != nil {
		return nil, err
	}
	_node, _spec := cc.createSpec()
	if err := sqlgraph.CreateNode(ctx, cc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	cc.mutation.id = &_node.ID
	cc.mutation.done = true
	return _node, nil
}

func (cc *CALLSCreate) createSpec() (*CALLS, *sqlgraph.CreateSpec) {
	var (
		_node = &CALLS{config: cc.config}
		_spec = sqlgraph.NewCreateSpec(calls.Table, sqlgraph.NewFieldSpec(calls.FieldID, field.TypeInt))
	)
	if value, ok := cc.mutation.SessionID(); ok {
		_spec.SetField(calls.FieldSessionID, field.TypeInt, value)
		_node.SessionID = value
	}
	if value, ok := cc.mutation.CallStart(); ok {
		_spec.SetField(calls.FieldCallStart, field.TypeTime, value)
		_node.CallStart = value
	}
	if value, ok := cc.mutation.CallEnd(); ok {
		_spec.SetField(calls.FieldCallEnd, field.TypeTime, value)
		_node.CallEnd = value
	}
	if value, ok := cc.mutation.Rating(); ok {
		_spec.SetField(calls.FieldRating, field.TypeInt, value)
		_node.Rating = value
	}
	if value, ok := cc.mutation.CreatedAt(); ok {
		_spec.SetField(calls.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if nodes := cc.mutation.MadeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   calls.MadeTable,
			Columns: []string{calls.MadeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sessions.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.sessions_makes = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// CALLSCreateBulk is the builder for creating many CALLS entities in bulk.
type CALLSCreateBulk struct {
	config
	err      error
	builders []*CALLSCreate
}

// Save creates the CALLS entities in the database.
func (ccb *CALLSCreateBulk) Save(ctx context.Context) ([]*CALLS, error) {
	if ccb.err != nil {
		return nil, ccb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ccb.builders))
	nodes := make([]*CALLS, len(ccb.builders))
	mutators := make([]Mutator, len(ccb.builders))
	for i := range ccb.builders {
		func(i int, root context.Context) {
			builder := ccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CALLSMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ccb *CALLSCreateBulk) SaveX(ctx context.Context) []*CALLS {
	v, err := ccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ccb *CALLSCreateBulk) Exec(ctx context.Context) error {
	_, err := ccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ccb *CALLSCreateBulk) ExecX(ctx context.Context) {
	if err := ccb.Exec(ctx); err != nil {
		panic(err)
	}
}
