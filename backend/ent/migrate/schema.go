// Code generated by ent, DO NOT EDIT.

package migrate

import (
	"entgo.io/ent/dialect/sql/schema"
	"entgo.io/ent/schema/field"
)

var (
	// AchievementSsColumns holds the columns for the "achievement_ss" table.
	AchievementSsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "user_id", Type: field.TypeInt},
		{Name: "title", Type: field.TypeString},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "users_acquires", Type: field.TypeInt, Nullable: true},
	}
	// AchievementSsTable holds the schema information for the "achievement_ss" table.
	AchievementSsTable = &schema.Table{
		Name:       "achievement_ss",
		Columns:    AchievementSsColumns,
		PrimaryKey: []*schema.Column{AchievementSsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "achievement_ss_user_ss_acquires",
				Columns:    []*schema.Column{AchievementSsColumns[4]},
				RefColumns: []*schema.Column{UserSsColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// AiThemeSsColumns holds the columns for the "ai_theme_ss" table.
	AiThemeSsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "theme_text", Type: field.TypeString},
		{Name: "created_at", Type: field.TypeTime},
	}
	// AiThemeSsTable holds the schema information for the "ai_theme_ss" table.
	AiThemeSsTable = &schema.Table{
		Name:       "ai_theme_ss",
		Columns:    AiThemeSsColumns,
		PrimaryKey: []*schema.Column{AiThemeSsColumns[0]},
	}
	// CallSsColumns holds the columns for the "call_ss" table.
	CallSsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "session_id", Type: field.TypeInt},
		{Name: "call_start", Type: field.TypeTime},
		{Name: "call_end", Type: field.TypeTime},
		{Name: "rating", Type: field.TypeInt},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "sessions_makes", Type: field.TypeInt, Unique: true, Nullable: true},
	}
	// CallSsTable holds the schema information for the "call_ss" table.
	CallSsTable = &schema.Table{
		Name:       "call_ss",
		Columns:    CallSsColumns,
		PrimaryKey: []*schema.Column{CallSsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "call_ss_session_ss_makes",
				Columns:    []*schema.Column{CallSsColumns[6]},
				RefColumns: []*schema.Column{SessionSsColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// EventSsColumns holds the columns for the "event_ss" table.
	EventSsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "event_start", Type: field.TypeTime},
		{Name: "event_end", Type: field.TypeTime},
		{Name: "theme_id", Type: field.TypeInt},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "events_uses", Type: field.TypeInt, Nullable: true},
	}
	// EventSsTable holds the schema information for the "event_ss" table.
	EventSsTable = &schema.Table{
		Name:       "event_ss",
		Columns:    EventSsColumns,
		PrimaryKey: []*schema.Column{EventSsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "event_ss_ai_theme_ss_uses",
				Columns:    []*schema.Column{EventSsColumns[5]},
				RefColumns: []*schema.Column{AiThemeSsColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// EventRecordSsColumns holds the columns for the "event_record_ss" table.
	EventRecordSsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "user_id", Type: field.TypeInt},
		{Name: "event_id", Type: field.TypeInt},
		{Name: "records", Type: field.TypeString, Default: ""},
		{Name: "events_participated", Type: field.TypeInt, Nullable: true},
		{Name: "users_makes", Type: field.TypeInt, Nullable: true},
	}
	// EventRecordSsTable holds the schema information for the "event_record_ss" table.
	EventRecordSsTable = &schema.Table{
		Name:       "event_record_ss",
		Columns:    EventRecordSsColumns,
		PrimaryKey: []*schema.Column{EventRecordSsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "event_record_ss_event_ss_participated",
				Columns:    []*schema.Column{EventRecordSsColumns[4]},
				RefColumns: []*schema.Column{EventSsColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "event_record_ss_user_ss_makes",
				Columns:    []*schema.Column{EventRecordSsColumns[5]},
				RefColumns: []*schema.Column{UserSsColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// FriendSsColumns holds the columns for the "friend_ss" table.
	FriendSsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "user_id", Type: field.TypeInt},
		{Name: "target_user_id", Type: field.TypeInt},
		{Name: "status", Type: field.TypeEnum, Enums: []string{"PENDING", "FRIEND", "BLOCKED"}},
		{Name: "created_at", Type: field.TypeTime},
	}
	// FriendSsTable holds the schema information for the "friend_ss" table.
	FriendSsTable = &schema.Table{
		Name:       "friend_ss",
		Columns:    FriendSsColumns,
		PrimaryKey: []*schema.Column{FriendSsColumns[0]},
	}
	// MemoSsColumns holds the columns for the "memo_ss" table.
	MemoSsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "user_id", Type: field.TypeInt, Unique: true},
		{Name: "memo1", Type: field.TypeString, Size: 255, Default: ""},
		{Name: "memo2", Type: field.TypeString, Size: 255, Default: ""},
		{Name: "users_prepares", Type: field.TypeInt, Unique: true, Nullable: true},
	}
	// MemoSsTable holds the schema information for the "memo_ss" table.
	MemoSsTable = &schema.Table{
		Name:       "memo_ss",
		Columns:    MemoSsColumns,
		PrimaryKey: []*schema.Column{MemoSsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "memo_ss_user_ss_prepares",
				Columns:    []*schema.Column{MemoSsColumns[4]},
				RefColumns: []*schema.Column{UserSsColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// ProgresSsColumns holds the columns for the "progres_ss" table.
	ProgresSsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "user_id", Type: field.TypeInt},
		{Name: "login_days", Type: field.TypeInt, Default: 0},
		{Name: "consecutive_participants", Type: field.TypeInt, Default: 0},
		{Name: "consecutive_login_days", Type: field.TypeInt, Default: 0},
		{Name: "users_records", Type: field.TypeInt, Unique: true, Nullable: true},
	}
	// ProgresSsTable holds the schema information for the "progres_ss" table.
	ProgresSsTable = &schema.Table{
		Name:       "progres_ss",
		Columns:    ProgresSsColumns,
		PrimaryKey: []*schema.Column{ProgresSsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "progres_ss_user_ss_records",
				Columns:    []*schema.Column{ProgresSsColumns[5]},
				RefColumns: []*schema.Column{UserSsColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// SessionSsColumns holds the columns for the "session_ss" table.
	SessionSsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "user_id", Type: field.TypeInt},
		{Name: "matched_user_id", Type: field.TypeInt},
		{Name: "record_id", Type: field.TypeInt},
		{Name: "matched_at", Type: field.TypeTime},
		{Name: "status", Type: field.TypeEnum, Enums: []string{"MATCHED", "PROCCESSING", "FINISHED"}},
		{Name: "event_records_has", Type: field.TypeInt, Nullable: true},
	}
	// SessionSsTable holds the schema information for the "session_ss" table.
	SessionSsTable = &schema.Table{
		Name:       "session_ss",
		Columns:    SessionSsColumns,
		PrimaryKey: []*schema.Column{SessionSsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "session_ss_event_record_ss_has",
				Columns:    []*schema.Column{SessionSsColumns[6]},
				RefColumns: []*schema.Column{EventRecordSsColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// UserSsColumns holds the columns for the "user_ss" table.
	UserSsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "username", Type: field.TypeString, Size: 255},
		{Name: "email", Type: field.TypeString},
		{Name: "avatar_url", Type: field.TypeString, Nullable: true, Size: 2147483647},
		{Name: "role", Type: field.TypeEnum, Enums: []string{"SUPERUSER", "ADMIN", "USER"}},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "is_deleted", Type: field.TypeBool, Default: false},
		{Name: "updated_at", Type: field.TypeTime},
	}
	// UserSsTable holds the schema information for the "user_ss" table.
	UserSsTable = &schema.Table{
		Name:       "user_ss",
		Columns:    UserSsColumns,
		PrimaryKey: []*schema.Column{UserSsColumns[0]},
	}
	// UsersConnectsColumns holds the columns for the "users_connects" table.
	UsersConnectsColumns = []*schema.Column{
		{Name: "users_id", Type: field.TypeInt},
		{Name: "friends_id", Type: field.TypeInt},
	}
	// UsersConnectsTable holds the schema information for the "users_connects" table.
	UsersConnectsTable = &schema.Table{
		Name:       "users_connects",
		Columns:    UsersConnectsColumns,
		PrimaryKey: []*schema.Column{UsersConnectsColumns[0], UsersConnectsColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "users_connects_users_id",
				Columns:    []*schema.Column{UsersConnectsColumns[0]},
				RefColumns: []*schema.Column{UserSsColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "users_connects_friends_id",
				Columns:    []*schema.Column{UsersConnectsColumns[1]},
				RefColumns: []*schema.Column{FriendSsColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// Tables holds all the tables in the schema.
	Tables = []*schema.Table{
		AchievementSsTable,
		AiThemeSsTable,
		CallSsTable,
		EventSsTable,
		EventRecordSsTable,
		FriendSsTable,
		MemoSsTable,
		ProgresSsTable,
		SessionSsTable,
		UserSsTable,
		UsersConnectsTable,
	}
)

func init() {
	AchievementSsTable.ForeignKeys[0].RefTable = UserSsTable
	CallSsTable.ForeignKeys[0].RefTable = SessionSsTable
	EventSsTable.ForeignKeys[0].RefTable = AiThemeSsTable
	EventRecordSsTable.ForeignKeys[0].RefTable = EventSsTable
	EventRecordSsTable.ForeignKeys[1].RefTable = UserSsTable
	MemoSsTable.ForeignKeys[0].RefTable = UserSsTable
	ProgresSsTable.ForeignKeys[0].RefTable = UserSsTable
	SessionSsTable.ForeignKeys[0].RefTable = EventRecordSsTable
	UsersConnectsTable.ForeignKeys[0].RefTable = UserSsTable
	UsersConnectsTable.ForeignKeys[1].RefTable = FriendSsTable
}
