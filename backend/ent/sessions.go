// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/Hosi121/SpeakUp/ent/aithemes"
	"github.com/Hosi121/SpeakUp/ent/sessions"
)

// SESSIONS is the model entity for the SESSIONS schema.
type SESSIONS struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// SessionID holds the value of the "session_id" field.
	SessionID int `json:"session_id,omitempty"`
	// SessionStart holds the value of the "session_start" field.
	SessionStart time.Time `json:"session_start,omitempty"`
	// SessionEnd holds the value of the "session_end" field.
	SessionEnd time.Time `json:"session_end,omitempty"`
	// ThemeID holds the value of the "theme_id" field.
	ThemeID int `json:"theme_id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the SESSIONSQuery when eager-loading is set.
	Edges         SESSIONSEdges `json:"edges"`
	sessions_uses *int
	selectValues  sql.SelectValues
}

// SESSIONSEdges holds the relations/edges for other nodes in the graph.
type SESSIONSEdges struct {
	// Has holds the value of the has edge.
	Has []*MATCHINGS `json:"has,omitempty"`
	// Uses holds the value of the uses edge.
	Uses *AITHEMES `json:"uses,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// HasOrErr returns the Has value or an error if the edge
// was not loaded in eager-loading.
func (e SESSIONSEdges) HasOrErr() ([]*MATCHINGS, error) {
	if e.loadedTypes[0] {
		return e.Has, nil
	}
	return nil, &NotLoadedError{edge: "has"}
}

// UsesOrErr returns the Uses value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e SESSIONSEdges) UsesOrErr() (*AITHEMES, error) {
	if e.Uses != nil {
		return e.Uses, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: aithemes.Label}
	}
	return nil, &NotLoadedError{edge: "uses"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*SESSIONS) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case sessions.FieldID, sessions.FieldSessionID, sessions.FieldThemeID:
			values[i] = new(sql.NullInt64)
		case sessions.FieldSessionStart, sessions.FieldSessionEnd, sessions.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		case sessions.ForeignKeys[0]: // sessions_uses
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the SESSIONS fields.
func (s *SESSIONS) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case sessions.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			s.ID = int(value.Int64)
		case sessions.FieldSessionID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field session_id", values[i])
			} else if value.Valid {
				s.SessionID = int(value.Int64)
			}
		case sessions.FieldSessionStart:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field session_start", values[i])
			} else if value.Valid {
				s.SessionStart = value.Time
			}
		case sessions.FieldSessionEnd:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field session_end", values[i])
			} else if value.Valid {
				s.SessionEnd = value.Time
			}
		case sessions.FieldThemeID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field theme_id", values[i])
			} else if value.Valid {
				s.ThemeID = int(value.Int64)
			}
		case sessions.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				s.CreatedAt = value.Time
			}
		case sessions.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field sessions_uses", value)
			} else if value.Valid {
				s.sessions_uses = new(int)
				*s.sessions_uses = int(value.Int64)
			}
		default:
			s.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the SESSIONS.
// This includes values selected through modifiers, order, etc.
func (s *SESSIONS) Value(name string) (ent.Value, error) {
	return s.selectValues.Get(name)
}

// QueryHas queries the "has" edge of the SESSIONS entity.
func (s *SESSIONS) QueryHas() *MATCHINGSQuery {
	return NewSESSIONSClient(s.config).QueryHas(s)
}

// QueryUses queries the "uses" edge of the SESSIONS entity.
func (s *SESSIONS) QueryUses() *AITHEMESQuery {
	return NewSESSIONSClient(s.config).QueryUses(s)
}

// Update returns a builder for updating this SESSIONS.
// Note that you need to call SESSIONS.Unwrap() before calling this method if this SESSIONS
// was returned from a transaction, and the transaction was committed or rolled back.
func (s *SESSIONS) Update() *SESSIONSUpdateOne {
	return NewSESSIONSClient(s.config).UpdateOne(s)
}

// Unwrap unwraps the SESSIONS entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (s *SESSIONS) Unwrap() *SESSIONS {
	_tx, ok := s.config.driver.(*txDriver)
	if !ok {
		panic("ent: SESSIONS is not a transactional entity")
	}
	s.config.driver = _tx.drv
	return s
}

// String implements the fmt.Stringer.
func (s *SESSIONS) String() string {
	var builder strings.Builder
	builder.WriteString("SESSIONS(")
	builder.WriteString(fmt.Sprintf("id=%v, ", s.ID))
	builder.WriteString("session_id=")
	builder.WriteString(fmt.Sprintf("%v", s.SessionID))
	builder.WriteString(", ")
	builder.WriteString("session_start=")
	builder.WriteString(s.SessionStart.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("session_end=")
	builder.WriteString(s.SessionEnd.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("theme_id=")
	builder.WriteString(fmt.Sprintf("%v", s.ThemeID))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(s.CreatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// SESSIONSs is a parsable slice of SESSIONS.
type SESSIONSs []*SESSIONS
