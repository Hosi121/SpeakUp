// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/Hosi121/SpeakUp/ent/chats"
	"github.com/Hosi121/SpeakUp/ent/friends"
)

// CHATS is the model entity for the CHATS schema.
type CHATS struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// FriendID holds the value of the "friend_id" field.
	FriendID int `json:"friend_id,omitempty"`
	// Message holds the value of the "message" field.
	Message string `json:"message,omitempty"`
	// IsRecieved holds the value of the "is_recieved" field.
	IsRecieved bool `json:"is_recieved,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the CHATSQuery when eager-loading is set.
	Edges        CHATSEdges `json:"edges"`
	friends_has  *int
	selectValues sql.SelectValues
}

// CHATSEdges holds the relations/edges for other nodes in the graph.
type CHATSEdges struct {
	// Had holds the value of the had edge.
	Had *FRIENDS `json:"had,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// HadOrErr returns the Had value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CHATSEdges) HadOrErr() (*FRIENDS, error) {
	if e.Had != nil {
		return e.Had, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: friends.Label}
	}
	return nil, &NotLoadedError{edge: "had"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*CHATS) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case chats.FieldIsRecieved:
			values[i] = new(sql.NullBool)
		case chats.FieldID, chats.FieldFriendID:
			values[i] = new(sql.NullInt64)
		case chats.FieldMessage:
			values[i] = new(sql.NullString)
		case chats.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		case chats.ForeignKeys[0]: // friends_has
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the CHATS fields.
func (c *CHATS) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case chats.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			c.ID = int(value.Int64)
		case chats.FieldFriendID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field friend_id", values[i])
			} else if value.Valid {
				c.FriendID = int(value.Int64)
			}
		case chats.FieldMessage:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field message", values[i])
			} else if value.Valid {
				c.Message = value.String
			}
		case chats.FieldIsRecieved:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_recieved", values[i])
			} else if value.Valid {
				c.IsRecieved = value.Bool
			}
		case chats.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				c.CreatedAt = value.Time
			}
		case chats.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field friends_has", value)
			} else if value.Valid {
				c.friends_has = new(int)
				*c.friends_has = int(value.Int64)
			}
		default:
			c.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the CHATS.
// This includes values selected through modifiers, order, etc.
func (c *CHATS) Value(name string) (ent.Value, error) {
	return c.selectValues.Get(name)
}

// QueryHad queries the "had" edge of the CHATS entity.
func (c *CHATS) QueryHad() *FRIENDSQuery {
	return NewCHATSClient(c.config).QueryHad(c)
}

// Update returns a builder for updating this CHATS.
// Note that you need to call CHATS.Unwrap() before calling this method if this CHATS
// was returned from a transaction, and the transaction was committed or rolled back.
func (c *CHATS) Update() *CHATSUpdateOne {
	return NewCHATSClient(c.config).UpdateOne(c)
}

// Unwrap unwraps the CHATS entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (c *CHATS) Unwrap() *CHATS {
	_tx, ok := c.config.driver.(*txDriver)
	if !ok {
		panic("ent: CHATS is not a transactional entity")
	}
	c.config.driver = _tx.drv
	return c
}

// String implements the fmt.Stringer.
func (c *CHATS) String() string {
	var builder strings.Builder
	builder.WriteString("CHATS(")
	builder.WriteString(fmt.Sprintf("id=%v, ", c.ID))
	builder.WriteString("friend_id=")
	builder.WriteString(fmt.Sprintf("%v", c.FriendID))
	builder.WriteString(", ")
	builder.WriteString("message=")
	builder.WriteString(c.Message)
	builder.WriteString(", ")
	builder.WriteString("is_recieved=")
	builder.WriteString(fmt.Sprintf("%v", c.IsRecieved))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(c.CreatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// CHATSs is a parsable slice of CHATS.
type CHATSs []*CHATS
