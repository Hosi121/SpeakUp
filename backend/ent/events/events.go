// Code generated by ent, DO NOT EDIT.

package events

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the events type in the database.
	Label = "events"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldEventStart holds the string denoting the event_start field in the database.
	FieldEventStart = "event_start"
	// FieldEventEnd holds the string denoting the event_end field in the database.
	FieldEventEnd = "event_end"
	// FieldThemeID holds the string denoting the theme_id field in the database.
	FieldThemeID = "theme_id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// EdgeParticipated holds the string denoting the participated edge name in mutations.
	EdgeParticipated = "participated"
	// EdgeUses holds the string denoting the uses edge name in mutations.
	EdgeUses = "uses"
	// Table holds the table name of the events in the database.
	Table = "event_ss"
	// ParticipatedTable is the table that holds the participated relation/edge.
	ParticipatedTable = "event_record_ss"
	// ParticipatedInverseTable is the table name for the EVENT_RECORDS entity.
	// It exists in this package in order to avoid circular dependency with the "event_records" package.
	ParticipatedInverseTable = "event_record_ss"
	// ParticipatedColumn is the table column denoting the participated relation/edge.
	ParticipatedColumn = "events_participated"
	// UsesTable is the table that holds the uses relation/edge.
	UsesTable = "event_ss"
	// UsesInverseTable is the table name for the AI_THEMES entity.
	// It exists in this package in order to avoid circular dependency with the "ai_themes" package.
	UsesInverseTable = "ai_theme_ss"
	// UsesColumn is the table column denoting the uses relation/edge.
	UsesColumn = "events_uses"
)

// Columns holds all SQL columns for events fields.
var Columns = []string{
	FieldID,
	FieldEventStart,
	FieldEventEnd,
	FieldThemeID,
	FieldCreatedAt,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "event_ss"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"events_uses",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt time.Time
)

// OrderOption defines the ordering options for the EVENTS queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByEventStart orders the results by the event_start field.
func ByEventStart(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEventStart, opts...).ToFunc()
}

// ByEventEnd orders the results by the event_end field.
func ByEventEnd(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEventEnd, opts...).ToFunc()
}

// ByThemeID orders the results by the theme_id field.
func ByThemeID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldThemeID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByParticipatedCount orders the results by participated count.
func ByParticipatedCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newParticipatedStep(), opts...)
	}
}

// ByParticipated orders the results by participated terms.
func ByParticipated(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newParticipatedStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByUsesField orders the results by uses field.
func ByUsesField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUsesStep(), sql.OrderByField(field, opts...))
	}
}
func newParticipatedStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ParticipatedInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ParticipatedTable, ParticipatedColumn),
	)
}
func newUsesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UsesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, UsesTable, UsesColumn),
	)
}
