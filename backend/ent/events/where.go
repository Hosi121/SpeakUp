// Code generated by ent, DO NOT EDIT.

package events

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/Hosi121/SpeakUp/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.EVENTS {
	return predicate.EVENTS(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.EVENTS {
	return predicate.EVENTS(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.EVENTS {
	return predicate.EVENTS(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.EVENTS {
	return predicate.EVENTS(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.EVENTS {
	return predicate.EVENTS(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.EVENTS {
	return predicate.EVENTS(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.EVENTS {
	return predicate.EVENTS(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.EVENTS {
	return predicate.EVENTS(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.EVENTS {
	return predicate.EVENTS(sql.FieldLTE(FieldID, id))
}

// EventStart applies equality check predicate on the "event_start" field. It's identical to EventStartEQ.
func EventStart(v time.Time) predicate.EVENTS {
	return predicate.EVENTS(sql.FieldEQ(FieldEventStart, v))
}

// EventEnd applies equality check predicate on the "event_end" field. It's identical to EventEndEQ.
func EventEnd(v time.Time) predicate.EVENTS {
	return predicate.EVENTS(sql.FieldEQ(FieldEventEnd, v))
}

// ThemeID applies equality check predicate on the "theme_id" field. It's identical to ThemeIDEQ.
func ThemeID(v int) predicate.EVENTS {
	return predicate.EVENTS(sql.FieldEQ(FieldThemeID, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.EVENTS {
	return predicate.EVENTS(sql.FieldEQ(FieldCreatedAt, v))
}

// EventStartEQ applies the EQ predicate on the "event_start" field.
func EventStartEQ(v time.Time) predicate.EVENTS {
	return predicate.EVENTS(sql.FieldEQ(FieldEventStart, v))
}

// EventStartNEQ applies the NEQ predicate on the "event_start" field.
func EventStartNEQ(v time.Time) predicate.EVENTS {
	return predicate.EVENTS(sql.FieldNEQ(FieldEventStart, v))
}

// EventStartIn applies the In predicate on the "event_start" field.
func EventStartIn(vs ...time.Time) predicate.EVENTS {
	return predicate.EVENTS(sql.FieldIn(FieldEventStart, vs...))
}

// EventStartNotIn applies the NotIn predicate on the "event_start" field.
func EventStartNotIn(vs ...time.Time) predicate.EVENTS {
	return predicate.EVENTS(sql.FieldNotIn(FieldEventStart, vs...))
}

// EventStartGT applies the GT predicate on the "event_start" field.
func EventStartGT(v time.Time) predicate.EVENTS {
	return predicate.EVENTS(sql.FieldGT(FieldEventStart, v))
}

// EventStartGTE applies the GTE predicate on the "event_start" field.
func EventStartGTE(v time.Time) predicate.EVENTS {
	return predicate.EVENTS(sql.FieldGTE(FieldEventStart, v))
}

// EventStartLT applies the LT predicate on the "event_start" field.
func EventStartLT(v time.Time) predicate.EVENTS {
	return predicate.EVENTS(sql.FieldLT(FieldEventStart, v))
}

// EventStartLTE applies the LTE predicate on the "event_start" field.
func EventStartLTE(v time.Time) predicate.EVENTS {
	return predicate.EVENTS(sql.FieldLTE(FieldEventStart, v))
}

// EventEndEQ applies the EQ predicate on the "event_end" field.
func EventEndEQ(v time.Time) predicate.EVENTS {
	return predicate.EVENTS(sql.FieldEQ(FieldEventEnd, v))
}

// EventEndNEQ applies the NEQ predicate on the "event_end" field.
func EventEndNEQ(v time.Time) predicate.EVENTS {
	return predicate.EVENTS(sql.FieldNEQ(FieldEventEnd, v))
}

// EventEndIn applies the In predicate on the "event_end" field.
func EventEndIn(vs ...time.Time) predicate.EVENTS {
	return predicate.EVENTS(sql.FieldIn(FieldEventEnd, vs...))
}

// EventEndNotIn applies the NotIn predicate on the "event_end" field.
func EventEndNotIn(vs ...time.Time) predicate.EVENTS {
	return predicate.EVENTS(sql.FieldNotIn(FieldEventEnd, vs...))
}

// EventEndGT applies the GT predicate on the "event_end" field.
func EventEndGT(v time.Time) predicate.EVENTS {
	return predicate.EVENTS(sql.FieldGT(FieldEventEnd, v))
}

// EventEndGTE applies the GTE predicate on the "event_end" field.
func EventEndGTE(v time.Time) predicate.EVENTS {
	return predicate.EVENTS(sql.FieldGTE(FieldEventEnd, v))
}

// EventEndLT applies the LT predicate on the "event_end" field.
func EventEndLT(v time.Time) predicate.EVENTS {
	return predicate.EVENTS(sql.FieldLT(FieldEventEnd, v))
}

// EventEndLTE applies the LTE predicate on the "event_end" field.
func EventEndLTE(v time.Time) predicate.EVENTS {
	return predicate.EVENTS(sql.FieldLTE(FieldEventEnd, v))
}

// ThemeIDEQ applies the EQ predicate on the "theme_id" field.
func ThemeIDEQ(v int) predicate.EVENTS {
	return predicate.EVENTS(sql.FieldEQ(FieldThemeID, v))
}

// ThemeIDNEQ applies the NEQ predicate on the "theme_id" field.
func ThemeIDNEQ(v int) predicate.EVENTS {
	return predicate.EVENTS(sql.FieldNEQ(FieldThemeID, v))
}

// ThemeIDIn applies the In predicate on the "theme_id" field.
func ThemeIDIn(vs ...int) predicate.EVENTS {
	return predicate.EVENTS(sql.FieldIn(FieldThemeID, vs...))
}

// ThemeIDNotIn applies the NotIn predicate on the "theme_id" field.
func ThemeIDNotIn(vs ...int) predicate.EVENTS {
	return predicate.EVENTS(sql.FieldNotIn(FieldThemeID, vs...))
}

// ThemeIDGT applies the GT predicate on the "theme_id" field.
func ThemeIDGT(v int) predicate.EVENTS {
	return predicate.EVENTS(sql.FieldGT(FieldThemeID, v))
}

// ThemeIDGTE applies the GTE predicate on the "theme_id" field.
func ThemeIDGTE(v int) predicate.EVENTS {
	return predicate.EVENTS(sql.FieldGTE(FieldThemeID, v))
}

// ThemeIDLT applies the LT predicate on the "theme_id" field.
func ThemeIDLT(v int) predicate.EVENTS {
	return predicate.EVENTS(sql.FieldLT(FieldThemeID, v))
}

// ThemeIDLTE applies the LTE predicate on the "theme_id" field.
func ThemeIDLTE(v int) predicate.EVENTS {
	return predicate.EVENTS(sql.FieldLTE(FieldThemeID, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.EVENTS {
	return predicate.EVENTS(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.EVENTS {
	return predicate.EVENTS(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.EVENTS {
	return predicate.EVENTS(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.EVENTS {
	return predicate.EVENTS(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.EVENTS {
	return predicate.EVENTS(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.EVENTS {
	return predicate.EVENTS(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.EVENTS {
	return predicate.EVENTS(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.EVENTS {
	return predicate.EVENTS(sql.FieldLTE(FieldCreatedAt, v))
}

// HasParticipated applies the HasEdge predicate on the "participated" edge.
func HasParticipated() predicate.EVENTS {
	return predicate.EVENTS(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ParticipatedTable, ParticipatedColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasParticipatedWith applies the HasEdge predicate on the "participated" edge with a given conditions (other predicates).
func HasParticipatedWith(preds ...predicate.EVENT_RECORDS) predicate.EVENTS {
	return predicate.EVENTS(func(s *sql.Selector) {
		step := newParticipatedStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasUses applies the HasEdge predicate on the "uses" edge.
func HasUses() predicate.EVENTS {
	return predicate.EVENTS(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, UsesTable, UsesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUsesWith applies the HasEdge predicate on the "uses" edge with a given conditions (other predicates).
func HasUsesWith(preds ...predicate.AI_THEMES) predicate.EVENTS {
	return predicate.EVENTS(func(s *sql.Selector) {
		step := newUsesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.EVENTS) predicate.EVENTS {
	return predicate.EVENTS(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.EVENTS) predicate.EVENTS {
	return predicate.EVENTS(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.EVENTS) predicate.EVENTS {
	return predicate.EVENTS(sql.NotPredicates(p))
}
