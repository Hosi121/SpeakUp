// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sync"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/Hosi121/SpeakUp/ent/aithemes"
	"github.com/Hosi121/SpeakUp/ent/calls"
	"github.com/Hosi121/SpeakUp/ent/friends"
	"github.com/Hosi121/SpeakUp/ent/matchings"
	"github.com/Hosi121/SpeakUp/ent/memos"
	"github.com/Hosi121/SpeakUp/ent/predicate"
	"github.com/Hosi121/SpeakUp/ent/sessions"
	"github.com/Hosi121/SpeakUp/ent/users"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeAITHEMES  = "AITHEMES"
	TypeCALLS     = "CALLS"
	TypeFRIENDS   = "FRIENDS"
	TypeMATCHINGS = "MATCHINGS"
	TypeMEMOS     = "MEMOS"
	TypeSESSIONS  = "SESSIONS"
	TypeUSERS     = "USERS"
)

// AITHEMESMutation represents an operation that mutates the AITHEMES nodes in the graph.
type AITHEMESMutation struct {
	config
	op            Op
	typ           string
	id            *int
	theme_id      *int
	addtheme_id   *int
	theme_text    *string
	created_at    *time.Time
	clearedFields map[string]struct{}
	used          map[int]struct{}
	removedused   map[int]struct{}
	clearedused   bool
	done          bool
	oldValue      func(context.Context) (*AITHEMES, error)
	predicates    []predicate.AITHEMES
}

var _ ent.Mutation = (*AITHEMESMutation)(nil)

// aithemesOption allows management of the mutation configuration using functional options.
type aithemesOption func(*AITHEMESMutation)

// newAITHEMESMutation creates new mutation for the AITHEMES entity.
func newAITHEMESMutation(c config, op Op, opts ...aithemesOption) *AITHEMESMutation {
	m := &AITHEMESMutation{
		config:        c,
		op:            op,
		typ:           TypeAITHEMES,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withAITHEMESID sets the ID field of the mutation.
func withAITHEMESID(id int) aithemesOption {
	return func(m *AITHEMESMutation) {
		var (
			err   error
			once  sync.Once
			value *AITHEMES
		)
		m.oldValue = func(ctx context.Context) (*AITHEMES, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().AITHEMES.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withAITHEMES sets the old AITHEMES of the mutation.
func withAITHEMES(node *AITHEMES) aithemesOption {
	return func(m *AITHEMESMutation) {
		m.oldValue = func(context.Context) (*AITHEMES, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m AITHEMESMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m AITHEMESMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *AITHEMESMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *AITHEMESMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().AITHEMES.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetThemeID sets the "theme_id" field.
func (m *AITHEMESMutation) SetThemeID(i int) {
	m.theme_id = &i
	m.addtheme_id = nil
}

// ThemeID returns the value of the "theme_id" field in the mutation.
func (m *AITHEMESMutation) ThemeID() (r int, exists bool) {
	v := m.theme_id
	if v == nil {
		return
	}
	return *v, true
}

// OldThemeID returns the old "theme_id" field's value of the AITHEMES entity.
// If the AITHEMES object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AITHEMESMutation) OldThemeID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldThemeID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldThemeID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldThemeID: %w", err)
	}
	return oldValue.ThemeID, nil
}

// AddThemeID adds i to the "theme_id" field.
func (m *AITHEMESMutation) AddThemeID(i int) {
	if m.addtheme_id != nil {
		*m.addtheme_id += i
	} else {
		m.addtheme_id = &i
	}
}

// AddedThemeID returns the value that was added to the "theme_id" field in this mutation.
func (m *AITHEMESMutation) AddedThemeID() (r int, exists bool) {
	v := m.addtheme_id
	if v == nil {
		return
	}
	return *v, true
}

// ResetThemeID resets all changes to the "theme_id" field.
func (m *AITHEMESMutation) ResetThemeID() {
	m.theme_id = nil
	m.addtheme_id = nil
}

// SetThemeText sets the "theme_text" field.
func (m *AITHEMESMutation) SetThemeText(s string) {
	m.theme_text = &s
}

// ThemeText returns the value of the "theme_text" field in the mutation.
func (m *AITHEMESMutation) ThemeText() (r string, exists bool) {
	v := m.theme_text
	if v == nil {
		return
	}
	return *v, true
}

// OldThemeText returns the old "theme_text" field's value of the AITHEMES entity.
// If the AITHEMES object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AITHEMESMutation) OldThemeText(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldThemeText is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldThemeText requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldThemeText: %w", err)
	}
	return oldValue.ThemeText, nil
}

// ResetThemeText resets all changes to the "theme_text" field.
func (m *AITHEMESMutation) ResetThemeText() {
	m.theme_text = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *AITHEMESMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *AITHEMESMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the AITHEMES entity.
// If the AITHEMES object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AITHEMESMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *AITHEMESMutation) ResetCreatedAt() {
	m.created_at = nil
}

// AddUsedIDs adds the "used" edge to the SESSIONS entity by ids.
func (m *AITHEMESMutation) AddUsedIDs(ids ...int) {
	if m.used == nil {
		m.used = make(map[int]struct{})
	}
	for i := range ids {
		m.used[ids[i]] = struct{}{}
	}
}

// ClearUsed clears the "used" edge to the SESSIONS entity.
func (m *AITHEMESMutation) ClearUsed() {
	m.clearedused = true
}

// UsedCleared reports if the "used" edge to the SESSIONS entity was cleared.
func (m *AITHEMESMutation) UsedCleared() bool {
	return m.clearedused
}

// RemoveUsedIDs removes the "used" edge to the SESSIONS entity by IDs.
func (m *AITHEMESMutation) RemoveUsedIDs(ids ...int) {
	if m.removedused == nil {
		m.removedused = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.used, ids[i])
		m.removedused[ids[i]] = struct{}{}
	}
}

// RemovedUsed returns the removed IDs of the "used" edge to the SESSIONS entity.
func (m *AITHEMESMutation) RemovedUsedIDs() (ids []int) {
	for id := range m.removedused {
		ids = append(ids, id)
	}
	return
}

// UsedIDs returns the "used" edge IDs in the mutation.
func (m *AITHEMESMutation) UsedIDs() (ids []int) {
	for id := range m.used {
		ids = append(ids, id)
	}
	return
}

// ResetUsed resets all changes to the "used" edge.
func (m *AITHEMESMutation) ResetUsed() {
	m.used = nil
	m.clearedused = false
	m.removedused = nil
}

// Where appends a list predicates to the AITHEMESMutation builder.
func (m *AITHEMESMutation) Where(ps ...predicate.AITHEMES) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the AITHEMESMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *AITHEMESMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.AITHEMES, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *AITHEMESMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *AITHEMESMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (AITHEMES).
func (m *AITHEMESMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *AITHEMESMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m.theme_id != nil {
		fields = append(fields, aithemes.FieldThemeID)
	}
	if m.theme_text != nil {
		fields = append(fields, aithemes.FieldThemeText)
	}
	if m.created_at != nil {
		fields = append(fields, aithemes.FieldCreatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *AITHEMESMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case aithemes.FieldThemeID:
		return m.ThemeID()
	case aithemes.FieldThemeText:
		return m.ThemeText()
	case aithemes.FieldCreatedAt:
		return m.CreatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *AITHEMESMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case aithemes.FieldThemeID:
		return m.OldThemeID(ctx)
	case aithemes.FieldThemeText:
		return m.OldThemeText(ctx)
	case aithemes.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown AITHEMES field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *AITHEMESMutation) SetField(name string, value ent.Value) error {
	switch name {
	case aithemes.FieldThemeID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetThemeID(v)
		return nil
	case aithemes.FieldThemeText:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetThemeText(v)
		return nil
	case aithemes.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown AITHEMES field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *AITHEMESMutation) AddedFields() []string {
	var fields []string
	if m.addtheme_id != nil {
		fields = append(fields, aithemes.FieldThemeID)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *AITHEMESMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case aithemes.FieldThemeID:
		return m.AddedThemeID()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *AITHEMESMutation) AddField(name string, value ent.Value) error {
	switch name {
	case aithemes.FieldThemeID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddThemeID(v)
		return nil
	}
	return fmt.Errorf("unknown AITHEMES numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *AITHEMESMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *AITHEMESMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *AITHEMESMutation) ClearField(name string) error {
	return fmt.Errorf("unknown AITHEMES nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *AITHEMESMutation) ResetField(name string) error {
	switch name {
	case aithemes.FieldThemeID:
		m.ResetThemeID()
		return nil
	case aithemes.FieldThemeText:
		m.ResetThemeText()
		return nil
	case aithemes.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	}
	return fmt.Errorf("unknown AITHEMES field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *AITHEMESMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.used != nil {
		edges = append(edges, aithemes.EdgeUsed)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *AITHEMESMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case aithemes.EdgeUsed:
		ids := make([]ent.Value, 0, len(m.used))
		for id := range m.used {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *AITHEMESMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedused != nil {
		edges = append(edges, aithemes.EdgeUsed)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *AITHEMESMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case aithemes.EdgeUsed:
		ids := make([]ent.Value, 0, len(m.removedused))
		for id := range m.removedused {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *AITHEMESMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedused {
		edges = append(edges, aithemes.EdgeUsed)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *AITHEMESMutation) EdgeCleared(name string) bool {
	switch name {
	case aithemes.EdgeUsed:
		return m.clearedused
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *AITHEMESMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown AITHEMES unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *AITHEMESMutation) ResetEdge(name string) error {
	switch name {
	case aithemes.EdgeUsed:
		m.ResetUsed()
		return nil
	}
	return fmt.Errorf("unknown AITHEMES edge %s", name)
}

// CALLSMutation represents an operation that mutates the CALLS nodes in the graph.
type CALLSMutation struct {
	config
	op            Op
	typ           string
	id            *int
	call_id       *int
	addcall_id    *int
	session_id    *int
	addsession_id *int
	call_start    *time.Time
	call_end      *time.Time
	rating        *int
	addrating     *int
	created_at    *time.Time
	clearedFields map[string]struct{}
	made          *int
	clearedmade   bool
	done          bool
	oldValue      func(context.Context) (*CALLS, error)
	predicates    []predicate.CALLS
}

var _ ent.Mutation = (*CALLSMutation)(nil)

// callsOption allows management of the mutation configuration using functional options.
type callsOption func(*CALLSMutation)

// newCALLSMutation creates new mutation for the CALLS entity.
func newCALLSMutation(c config, op Op, opts ...callsOption) *CALLSMutation {
	m := &CALLSMutation{
		config:        c,
		op:            op,
		typ:           TypeCALLS,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withCALLSID sets the ID field of the mutation.
func withCALLSID(id int) callsOption {
	return func(m *CALLSMutation) {
		var (
			err   error
			once  sync.Once
			value *CALLS
		)
		m.oldValue = func(ctx context.Context) (*CALLS, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().CALLS.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withCALLS sets the old CALLS of the mutation.
func withCALLS(node *CALLS) callsOption {
	return func(m *CALLSMutation) {
		m.oldValue = func(context.Context) (*CALLS, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m CALLSMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m CALLSMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *CALLSMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *CALLSMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().CALLS.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCallID sets the "call_id" field.
func (m *CALLSMutation) SetCallID(i int) {
	m.call_id = &i
	m.addcall_id = nil
}

// CallID returns the value of the "call_id" field in the mutation.
func (m *CALLSMutation) CallID() (r int, exists bool) {
	v := m.call_id
	if v == nil {
		return
	}
	return *v, true
}

// OldCallID returns the old "call_id" field's value of the CALLS entity.
// If the CALLS object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CALLSMutation) OldCallID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCallID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCallID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCallID: %w", err)
	}
	return oldValue.CallID, nil
}

// AddCallID adds i to the "call_id" field.
func (m *CALLSMutation) AddCallID(i int) {
	if m.addcall_id != nil {
		*m.addcall_id += i
	} else {
		m.addcall_id = &i
	}
}

// AddedCallID returns the value that was added to the "call_id" field in this mutation.
func (m *CALLSMutation) AddedCallID() (r int, exists bool) {
	v := m.addcall_id
	if v == nil {
		return
	}
	return *v, true
}

// ResetCallID resets all changes to the "call_id" field.
func (m *CALLSMutation) ResetCallID() {
	m.call_id = nil
	m.addcall_id = nil
}

// SetSessionID sets the "session_id" field.
func (m *CALLSMutation) SetSessionID(i int) {
	m.session_id = &i
	m.addsession_id = nil
}

// SessionID returns the value of the "session_id" field in the mutation.
func (m *CALLSMutation) SessionID() (r int, exists bool) {
	v := m.session_id
	if v == nil {
		return
	}
	return *v, true
}

// OldSessionID returns the old "session_id" field's value of the CALLS entity.
// If the CALLS object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CALLSMutation) OldSessionID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSessionID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSessionID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSessionID: %w", err)
	}
	return oldValue.SessionID, nil
}

// AddSessionID adds i to the "session_id" field.
func (m *CALLSMutation) AddSessionID(i int) {
	if m.addsession_id != nil {
		*m.addsession_id += i
	} else {
		m.addsession_id = &i
	}
}

// AddedSessionID returns the value that was added to the "session_id" field in this mutation.
func (m *CALLSMutation) AddedSessionID() (r int, exists bool) {
	v := m.addsession_id
	if v == nil {
		return
	}
	return *v, true
}

// ResetSessionID resets all changes to the "session_id" field.
func (m *CALLSMutation) ResetSessionID() {
	m.session_id = nil
	m.addsession_id = nil
}

// SetCallStart sets the "call_start" field.
func (m *CALLSMutation) SetCallStart(t time.Time) {
	m.call_start = &t
}

// CallStart returns the value of the "call_start" field in the mutation.
func (m *CALLSMutation) CallStart() (r time.Time, exists bool) {
	v := m.call_start
	if v == nil {
		return
	}
	return *v, true
}

// OldCallStart returns the old "call_start" field's value of the CALLS entity.
// If the CALLS object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CALLSMutation) OldCallStart(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCallStart is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCallStart requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCallStart: %w", err)
	}
	return oldValue.CallStart, nil
}

// ResetCallStart resets all changes to the "call_start" field.
func (m *CALLSMutation) ResetCallStart() {
	m.call_start = nil
}

// SetCallEnd sets the "call_end" field.
func (m *CALLSMutation) SetCallEnd(t time.Time) {
	m.call_end = &t
}

// CallEnd returns the value of the "call_end" field in the mutation.
func (m *CALLSMutation) CallEnd() (r time.Time, exists bool) {
	v := m.call_end
	if v == nil {
		return
	}
	return *v, true
}

// OldCallEnd returns the old "call_end" field's value of the CALLS entity.
// If the CALLS object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CALLSMutation) OldCallEnd(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCallEnd is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCallEnd requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCallEnd: %w", err)
	}
	return oldValue.CallEnd, nil
}

// ResetCallEnd resets all changes to the "call_end" field.
func (m *CALLSMutation) ResetCallEnd() {
	m.call_end = nil
}

// SetRating sets the "rating" field.
func (m *CALLSMutation) SetRating(i int) {
	m.rating = &i
	m.addrating = nil
}

// Rating returns the value of the "rating" field in the mutation.
func (m *CALLSMutation) Rating() (r int, exists bool) {
	v := m.rating
	if v == nil {
		return
	}
	return *v, true
}

// OldRating returns the old "rating" field's value of the CALLS entity.
// If the CALLS object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CALLSMutation) OldRating(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRating is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRating requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRating: %w", err)
	}
	return oldValue.Rating, nil
}

// AddRating adds i to the "rating" field.
func (m *CALLSMutation) AddRating(i int) {
	if m.addrating != nil {
		*m.addrating += i
	} else {
		m.addrating = &i
	}
}

// AddedRating returns the value that was added to the "rating" field in this mutation.
func (m *CALLSMutation) AddedRating() (r int, exists bool) {
	v := m.addrating
	if v == nil {
		return
	}
	return *v, true
}

// ResetRating resets all changes to the "rating" field.
func (m *CALLSMutation) ResetRating() {
	m.rating = nil
	m.addrating = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *CALLSMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *CALLSMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the CALLS entity.
// If the CALLS object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CALLSMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *CALLSMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetMadeID sets the "made" edge to the MATCHINGS entity by id.
func (m *CALLSMutation) SetMadeID(id int) {
	m.made = &id
}

// ClearMade clears the "made" edge to the MATCHINGS entity.
func (m *CALLSMutation) ClearMade() {
	m.clearedmade = true
}

// MadeCleared reports if the "made" edge to the MATCHINGS entity was cleared.
func (m *CALLSMutation) MadeCleared() bool {
	return m.clearedmade
}

// MadeID returns the "made" edge ID in the mutation.
func (m *CALLSMutation) MadeID() (id int, exists bool) {
	if m.made != nil {
		return *m.made, true
	}
	return
}

// MadeIDs returns the "made" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// MadeID instead. It exists only for internal usage by the builders.
func (m *CALLSMutation) MadeIDs() (ids []int) {
	if id := m.made; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetMade resets all changes to the "made" edge.
func (m *CALLSMutation) ResetMade() {
	m.made = nil
	m.clearedmade = false
}

// Where appends a list predicates to the CALLSMutation builder.
func (m *CALLSMutation) Where(ps ...predicate.CALLS) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the CALLSMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *CALLSMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.CALLS, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *CALLSMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *CALLSMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (CALLS).
func (m *CALLSMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *CALLSMutation) Fields() []string {
	fields := make([]string, 0, 6)
	if m.call_id != nil {
		fields = append(fields, calls.FieldCallID)
	}
	if m.session_id != nil {
		fields = append(fields, calls.FieldSessionID)
	}
	if m.call_start != nil {
		fields = append(fields, calls.FieldCallStart)
	}
	if m.call_end != nil {
		fields = append(fields, calls.FieldCallEnd)
	}
	if m.rating != nil {
		fields = append(fields, calls.FieldRating)
	}
	if m.created_at != nil {
		fields = append(fields, calls.FieldCreatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *CALLSMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case calls.FieldCallID:
		return m.CallID()
	case calls.FieldSessionID:
		return m.SessionID()
	case calls.FieldCallStart:
		return m.CallStart()
	case calls.FieldCallEnd:
		return m.CallEnd()
	case calls.FieldRating:
		return m.Rating()
	case calls.FieldCreatedAt:
		return m.CreatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *CALLSMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case calls.FieldCallID:
		return m.OldCallID(ctx)
	case calls.FieldSessionID:
		return m.OldSessionID(ctx)
	case calls.FieldCallStart:
		return m.OldCallStart(ctx)
	case calls.FieldCallEnd:
		return m.OldCallEnd(ctx)
	case calls.FieldRating:
		return m.OldRating(ctx)
	case calls.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown CALLS field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CALLSMutation) SetField(name string, value ent.Value) error {
	switch name {
	case calls.FieldCallID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCallID(v)
		return nil
	case calls.FieldSessionID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSessionID(v)
		return nil
	case calls.FieldCallStart:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCallStart(v)
		return nil
	case calls.FieldCallEnd:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCallEnd(v)
		return nil
	case calls.FieldRating:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRating(v)
		return nil
	case calls.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown CALLS field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *CALLSMutation) AddedFields() []string {
	var fields []string
	if m.addcall_id != nil {
		fields = append(fields, calls.FieldCallID)
	}
	if m.addsession_id != nil {
		fields = append(fields, calls.FieldSessionID)
	}
	if m.addrating != nil {
		fields = append(fields, calls.FieldRating)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *CALLSMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case calls.FieldCallID:
		return m.AddedCallID()
	case calls.FieldSessionID:
		return m.AddedSessionID()
	case calls.FieldRating:
		return m.AddedRating()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CALLSMutation) AddField(name string, value ent.Value) error {
	switch name {
	case calls.FieldCallID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCallID(v)
		return nil
	case calls.FieldSessionID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddSessionID(v)
		return nil
	case calls.FieldRating:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddRating(v)
		return nil
	}
	return fmt.Errorf("unknown CALLS numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *CALLSMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *CALLSMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *CALLSMutation) ClearField(name string) error {
	return fmt.Errorf("unknown CALLS nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *CALLSMutation) ResetField(name string) error {
	switch name {
	case calls.FieldCallID:
		m.ResetCallID()
		return nil
	case calls.FieldSessionID:
		m.ResetSessionID()
		return nil
	case calls.FieldCallStart:
		m.ResetCallStart()
		return nil
	case calls.FieldCallEnd:
		m.ResetCallEnd()
		return nil
	case calls.FieldRating:
		m.ResetRating()
		return nil
	case calls.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	}
	return fmt.Errorf("unknown CALLS field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *CALLSMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.made != nil {
		edges = append(edges, calls.EdgeMade)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *CALLSMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case calls.EdgeMade:
		if id := m.made; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *CALLSMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *CALLSMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *CALLSMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedmade {
		edges = append(edges, calls.EdgeMade)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *CALLSMutation) EdgeCleared(name string) bool {
	switch name {
	case calls.EdgeMade:
		return m.clearedmade
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *CALLSMutation) ClearEdge(name string) error {
	switch name {
	case calls.EdgeMade:
		m.ClearMade()
		return nil
	}
	return fmt.Errorf("unknown CALLS unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *CALLSMutation) ResetEdge(name string) error {
	switch name {
	case calls.EdgeMade:
		m.ResetMade()
		return nil
	}
	return fmt.Errorf("unknown CALLS edge %s", name)
}

// FRIENDSMutation represents an operation that mutates the FRIENDS nodes in the graph.
type FRIENDSMutation struct {
	config
	op                Op
	typ               string
	id                *int
	friend_id         *int
	addfriend_id      *int
	user_id           *int
	adduser_id        *int
	target_user_id    *int
	addtarget_user_id *int
	status            *friends.Status
	created_at        *time.Time
	clearedFields     map[string]struct{}
	connects          map[int]struct{}
	removedconnects   map[int]struct{}
	clearedconnects   bool
	done              bool
	oldValue          func(context.Context) (*FRIENDS, error)
	predicates        []predicate.FRIENDS
}

var _ ent.Mutation = (*FRIENDSMutation)(nil)

// friendsOption allows management of the mutation configuration using functional options.
type friendsOption func(*FRIENDSMutation)

// newFRIENDSMutation creates new mutation for the FRIENDS entity.
func newFRIENDSMutation(c config, op Op, opts ...friendsOption) *FRIENDSMutation {
	m := &FRIENDSMutation{
		config:        c,
		op:            op,
		typ:           TypeFRIENDS,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withFRIENDSID sets the ID field of the mutation.
func withFRIENDSID(id int) friendsOption {
	return func(m *FRIENDSMutation) {
		var (
			err   error
			once  sync.Once
			value *FRIENDS
		)
		m.oldValue = func(ctx context.Context) (*FRIENDS, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().FRIENDS.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withFRIENDS sets the old FRIENDS of the mutation.
func withFRIENDS(node *FRIENDS) friendsOption {
	return func(m *FRIENDSMutation) {
		m.oldValue = func(context.Context) (*FRIENDS, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m FRIENDSMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m FRIENDSMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *FRIENDSMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *FRIENDSMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().FRIENDS.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetFriendID sets the "friend_id" field.
func (m *FRIENDSMutation) SetFriendID(i int) {
	m.friend_id = &i
	m.addfriend_id = nil
}

// FriendID returns the value of the "friend_id" field in the mutation.
func (m *FRIENDSMutation) FriendID() (r int, exists bool) {
	v := m.friend_id
	if v == nil {
		return
	}
	return *v, true
}

// OldFriendID returns the old "friend_id" field's value of the FRIENDS entity.
// If the FRIENDS object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FRIENDSMutation) OldFriendID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFriendID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFriendID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFriendID: %w", err)
	}
	return oldValue.FriendID, nil
}

// AddFriendID adds i to the "friend_id" field.
func (m *FRIENDSMutation) AddFriendID(i int) {
	if m.addfriend_id != nil {
		*m.addfriend_id += i
	} else {
		m.addfriend_id = &i
	}
}

// AddedFriendID returns the value that was added to the "friend_id" field in this mutation.
func (m *FRIENDSMutation) AddedFriendID() (r int, exists bool) {
	v := m.addfriend_id
	if v == nil {
		return
	}
	return *v, true
}

// ResetFriendID resets all changes to the "friend_id" field.
func (m *FRIENDSMutation) ResetFriendID() {
	m.friend_id = nil
	m.addfriend_id = nil
}

// SetUserID sets the "user_id" field.
func (m *FRIENDSMutation) SetUserID(i int) {
	m.user_id = &i
	m.adduser_id = nil
}

// UserID returns the value of the "user_id" field in the mutation.
func (m *FRIENDSMutation) UserID() (r int, exists bool) {
	v := m.user_id
	if v == nil {
		return
	}
	return *v, true
}

// OldUserID returns the old "user_id" field's value of the FRIENDS entity.
// If the FRIENDS object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FRIENDSMutation) OldUserID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUserID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUserID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUserID: %w", err)
	}
	return oldValue.UserID, nil
}

// AddUserID adds i to the "user_id" field.
func (m *FRIENDSMutation) AddUserID(i int) {
	if m.adduser_id != nil {
		*m.adduser_id += i
	} else {
		m.adduser_id = &i
	}
}

// AddedUserID returns the value that was added to the "user_id" field in this mutation.
func (m *FRIENDSMutation) AddedUserID() (r int, exists bool) {
	v := m.adduser_id
	if v == nil {
		return
	}
	return *v, true
}

// ResetUserID resets all changes to the "user_id" field.
func (m *FRIENDSMutation) ResetUserID() {
	m.user_id = nil
	m.adduser_id = nil
}

// SetTargetUserID sets the "target_user_id" field.
func (m *FRIENDSMutation) SetTargetUserID(i int) {
	m.target_user_id = &i
	m.addtarget_user_id = nil
}

// TargetUserID returns the value of the "target_user_id" field in the mutation.
func (m *FRIENDSMutation) TargetUserID() (r int, exists bool) {
	v := m.target_user_id
	if v == nil {
		return
	}
	return *v, true
}

// OldTargetUserID returns the old "target_user_id" field's value of the FRIENDS entity.
// If the FRIENDS object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FRIENDSMutation) OldTargetUserID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTargetUserID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTargetUserID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTargetUserID: %w", err)
	}
	return oldValue.TargetUserID, nil
}

// AddTargetUserID adds i to the "target_user_id" field.
func (m *FRIENDSMutation) AddTargetUserID(i int) {
	if m.addtarget_user_id != nil {
		*m.addtarget_user_id += i
	} else {
		m.addtarget_user_id = &i
	}
}

// AddedTargetUserID returns the value that was added to the "target_user_id" field in this mutation.
func (m *FRIENDSMutation) AddedTargetUserID() (r int, exists bool) {
	v := m.addtarget_user_id
	if v == nil {
		return
	}
	return *v, true
}

// ResetTargetUserID resets all changes to the "target_user_id" field.
func (m *FRIENDSMutation) ResetTargetUserID() {
	m.target_user_id = nil
	m.addtarget_user_id = nil
}

// SetStatus sets the "status" field.
func (m *FRIENDSMutation) SetStatus(f friends.Status) {
	m.status = &f
}

// Status returns the value of the "status" field in the mutation.
func (m *FRIENDSMutation) Status() (r friends.Status, exists bool) {
	v := m.status
	if v == nil {
		return
	}
	return *v, true
}

// OldStatus returns the old "status" field's value of the FRIENDS entity.
// If the FRIENDS object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FRIENDSMutation) OldStatus(ctx context.Context) (v friends.Status, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatus: %w", err)
	}
	return oldValue.Status, nil
}

// ResetStatus resets all changes to the "status" field.
func (m *FRIENDSMutation) ResetStatus() {
	m.status = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *FRIENDSMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *FRIENDSMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the FRIENDS entity.
// If the FRIENDS object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FRIENDSMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *FRIENDSMutation) ResetCreatedAt() {
	m.created_at = nil
}

// AddConnectIDs adds the "connects" edge to the USERS entity by ids.
func (m *FRIENDSMutation) AddConnectIDs(ids ...int) {
	if m.connects == nil {
		m.connects = make(map[int]struct{})
	}
	for i := range ids {
		m.connects[ids[i]] = struct{}{}
	}
}

// ClearConnects clears the "connects" edge to the USERS entity.
func (m *FRIENDSMutation) ClearConnects() {
	m.clearedconnects = true
}

// ConnectsCleared reports if the "connects" edge to the USERS entity was cleared.
func (m *FRIENDSMutation) ConnectsCleared() bool {
	return m.clearedconnects
}

// RemoveConnectIDs removes the "connects" edge to the USERS entity by IDs.
func (m *FRIENDSMutation) RemoveConnectIDs(ids ...int) {
	if m.removedconnects == nil {
		m.removedconnects = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.connects, ids[i])
		m.removedconnects[ids[i]] = struct{}{}
	}
}

// RemovedConnects returns the removed IDs of the "connects" edge to the USERS entity.
func (m *FRIENDSMutation) RemovedConnectsIDs() (ids []int) {
	for id := range m.removedconnects {
		ids = append(ids, id)
	}
	return
}

// ConnectsIDs returns the "connects" edge IDs in the mutation.
func (m *FRIENDSMutation) ConnectsIDs() (ids []int) {
	for id := range m.connects {
		ids = append(ids, id)
	}
	return
}

// ResetConnects resets all changes to the "connects" edge.
func (m *FRIENDSMutation) ResetConnects() {
	m.connects = nil
	m.clearedconnects = false
	m.removedconnects = nil
}

// Where appends a list predicates to the FRIENDSMutation builder.
func (m *FRIENDSMutation) Where(ps ...predicate.FRIENDS) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the FRIENDSMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *FRIENDSMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.FRIENDS, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *FRIENDSMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *FRIENDSMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (FRIENDS).
func (m *FRIENDSMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *FRIENDSMutation) Fields() []string {
	fields := make([]string, 0, 5)
	if m.friend_id != nil {
		fields = append(fields, friends.FieldFriendID)
	}
	if m.user_id != nil {
		fields = append(fields, friends.FieldUserID)
	}
	if m.target_user_id != nil {
		fields = append(fields, friends.FieldTargetUserID)
	}
	if m.status != nil {
		fields = append(fields, friends.FieldStatus)
	}
	if m.created_at != nil {
		fields = append(fields, friends.FieldCreatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *FRIENDSMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case friends.FieldFriendID:
		return m.FriendID()
	case friends.FieldUserID:
		return m.UserID()
	case friends.FieldTargetUserID:
		return m.TargetUserID()
	case friends.FieldStatus:
		return m.Status()
	case friends.FieldCreatedAt:
		return m.CreatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *FRIENDSMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case friends.FieldFriendID:
		return m.OldFriendID(ctx)
	case friends.FieldUserID:
		return m.OldUserID(ctx)
	case friends.FieldTargetUserID:
		return m.OldTargetUserID(ctx)
	case friends.FieldStatus:
		return m.OldStatus(ctx)
	case friends.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown FRIENDS field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *FRIENDSMutation) SetField(name string, value ent.Value) error {
	switch name {
	case friends.FieldFriendID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFriendID(v)
		return nil
	case friends.FieldUserID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUserID(v)
		return nil
	case friends.FieldTargetUserID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTargetUserID(v)
		return nil
	case friends.FieldStatus:
		v, ok := value.(friends.Status)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatus(v)
		return nil
	case friends.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown FRIENDS field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *FRIENDSMutation) AddedFields() []string {
	var fields []string
	if m.addfriend_id != nil {
		fields = append(fields, friends.FieldFriendID)
	}
	if m.adduser_id != nil {
		fields = append(fields, friends.FieldUserID)
	}
	if m.addtarget_user_id != nil {
		fields = append(fields, friends.FieldTargetUserID)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *FRIENDSMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case friends.FieldFriendID:
		return m.AddedFriendID()
	case friends.FieldUserID:
		return m.AddedUserID()
	case friends.FieldTargetUserID:
		return m.AddedTargetUserID()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *FRIENDSMutation) AddField(name string, value ent.Value) error {
	switch name {
	case friends.FieldFriendID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddFriendID(v)
		return nil
	case friends.FieldUserID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddUserID(v)
		return nil
	case friends.FieldTargetUserID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddTargetUserID(v)
		return nil
	}
	return fmt.Errorf("unknown FRIENDS numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *FRIENDSMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *FRIENDSMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *FRIENDSMutation) ClearField(name string) error {
	return fmt.Errorf("unknown FRIENDS nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *FRIENDSMutation) ResetField(name string) error {
	switch name {
	case friends.FieldFriendID:
		m.ResetFriendID()
		return nil
	case friends.FieldUserID:
		m.ResetUserID()
		return nil
	case friends.FieldTargetUserID:
		m.ResetTargetUserID()
		return nil
	case friends.FieldStatus:
		m.ResetStatus()
		return nil
	case friends.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	}
	return fmt.Errorf("unknown FRIENDS field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *FRIENDSMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.connects != nil {
		edges = append(edges, friends.EdgeConnects)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *FRIENDSMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case friends.EdgeConnects:
		ids := make([]ent.Value, 0, len(m.connects))
		for id := range m.connects {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *FRIENDSMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedconnects != nil {
		edges = append(edges, friends.EdgeConnects)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *FRIENDSMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case friends.EdgeConnects:
		ids := make([]ent.Value, 0, len(m.removedconnects))
		for id := range m.removedconnects {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *FRIENDSMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedconnects {
		edges = append(edges, friends.EdgeConnects)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *FRIENDSMutation) EdgeCleared(name string) bool {
	switch name {
	case friends.EdgeConnects:
		return m.clearedconnects
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *FRIENDSMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown FRIENDS unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *FRIENDSMutation) ResetEdge(name string) error {
	switch name {
	case friends.EdgeConnects:
		m.ResetConnects()
		return nil
	}
	return fmt.Errorf("unknown FRIENDS edge %s", name)
}

// MATCHINGSMutation represents an operation that mutates the MATCHINGS nodes in the graph.
type MATCHINGSMutation struct {
	config
	op                 Op
	typ                string
	id                 *int
	match_id           *int
	addmatch_id        *int
	user_id            *int
	adduser_id         *int
	matched_user_id    *int
	addmatched_user_id *int
	session_id         *int
	addsession_id      *int
	matched_at         *time.Time
	status             *matchings.Status
	clearedFields      map[string]struct{}
	member             map[int]struct{}
	removedmember      map[int]struct{}
	clearedmember      bool
	had                *int
	clearedhad         bool
	makes              *int
	clearedmakes       bool
	done               bool
	oldValue           func(context.Context) (*MATCHINGS, error)
	predicates         []predicate.MATCHINGS
}

var _ ent.Mutation = (*MATCHINGSMutation)(nil)

// matchingsOption allows management of the mutation configuration using functional options.
type matchingsOption func(*MATCHINGSMutation)

// newMATCHINGSMutation creates new mutation for the MATCHINGS entity.
func newMATCHINGSMutation(c config, op Op, opts ...matchingsOption) *MATCHINGSMutation {
	m := &MATCHINGSMutation{
		config:        c,
		op:            op,
		typ:           TypeMATCHINGS,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withMATCHINGSID sets the ID field of the mutation.
func withMATCHINGSID(id int) matchingsOption {
	return func(m *MATCHINGSMutation) {
		var (
			err   error
			once  sync.Once
			value *MATCHINGS
		)
		m.oldValue = func(ctx context.Context) (*MATCHINGS, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().MATCHINGS.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withMATCHINGS sets the old MATCHINGS of the mutation.
func withMATCHINGS(node *MATCHINGS) matchingsOption {
	return func(m *MATCHINGSMutation) {
		m.oldValue = func(context.Context) (*MATCHINGS, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m MATCHINGSMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m MATCHINGSMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *MATCHINGSMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *MATCHINGSMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().MATCHINGS.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetMatchID sets the "match_id" field.
func (m *MATCHINGSMutation) SetMatchID(i int) {
	m.match_id = &i
	m.addmatch_id = nil
}

// MatchID returns the value of the "match_id" field in the mutation.
func (m *MATCHINGSMutation) MatchID() (r int, exists bool) {
	v := m.match_id
	if v == nil {
		return
	}
	return *v, true
}

// OldMatchID returns the old "match_id" field's value of the MATCHINGS entity.
// If the MATCHINGS object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MATCHINGSMutation) OldMatchID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMatchID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMatchID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMatchID: %w", err)
	}
	return oldValue.MatchID, nil
}

// AddMatchID adds i to the "match_id" field.
func (m *MATCHINGSMutation) AddMatchID(i int) {
	if m.addmatch_id != nil {
		*m.addmatch_id += i
	} else {
		m.addmatch_id = &i
	}
}

// AddedMatchID returns the value that was added to the "match_id" field in this mutation.
func (m *MATCHINGSMutation) AddedMatchID() (r int, exists bool) {
	v := m.addmatch_id
	if v == nil {
		return
	}
	return *v, true
}

// ResetMatchID resets all changes to the "match_id" field.
func (m *MATCHINGSMutation) ResetMatchID() {
	m.match_id = nil
	m.addmatch_id = nil
}

// SetUserID sets the "user_id" field.
func (m *MATCHINGSMutation) SetUserID(i int) {
	m.user_id = &i
	m.adduser_id = nil
}

// UserID returns the value of the "user_id" field in the mutation.
func (m *MATCHINGSMutation) UserID() (r int, exists bool) {
	v := m.user_id
	if v == nil {
		return
	}
	return *v, true
}

// OldUserID returns the old "user_id" field's value of the MATCHINGS entity.
// If the MATCHINGS object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MATCHINGSMutation) OldUserID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUserID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUserID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUserID: %w", err)
	}
	return oldValue.UserID, nil
}

// AddUserID adds i to the "user_id" field.
func (m *MATCHINGSMutation) AddUserID(i int) {
	if m.adduser_id != nil {
		*m.adduser_id += i
	} else {
		m.adduser_id = &i
	}
}

// AddedUserID returns the value that was added to the "user_id" field in this mutation.
func (m *MATCHINGSMutation) AddedUserID() (r int, exists bool) {
	v := m.adduser_id
	if v == nil {
		return
	}
	return *v, true
}

// ResetUserID resets all changes to the "user_id" field.
func (m *MATCHINGSMutation) ResetUserID() {
	m.user_id = nil
	m.adduser_id = nil
}

// SetMatchedUserID sets the "matched_user_id" field.
func (m *MATCHINGSMutation) SetMatchedUserID(i int) {
	m.matched_user_id = &i
	m.addmatched_user_id = nil
}

// MatchedUserID returns the value of the "matched_user_id" field in the mutation.
func (m *MATCHINGSMutation) MatchedUserID() (r int, exists bool) {
	v := m.matched_user_id
	if v == nil {
		return
	}
	return *v, true
}

// OldMatchedUserID returns the old "matched_user_id" field's value of the MATCHINGS entity.
// If the MATCHINGS object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MATCHINGSMutation) OldMatchedUserID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMatchedUserID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMatchedUserID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMatchedUserID: %w", err)
	}
	return oldValue.MatchedUserID, nil
}

// AddMatchedUserID adds i to the "matched_user_id" field.
func (m *MATCHINGSMutation) AddMatchedUserID(i int) {
	if m.addmatched_user_id != nil {
		*m.addmatched_user_id += i
	} else {
		m.addmatched_user_id = &i
	}
}

// AddedMatchedUserID returns the value that was added to the "matched_user_id" field in this mutation.
func (m *MATCHINGSMutation) AddedMatchedUserID() (r int, exists bool) {
	v := m.addmatched_user_id
	if v == nil {
		return
	}
	return *v, true
}

// ResetMatchedUserID resets all changes to the "matched_user_id" field.
func (m *MATCHINGSMutation) ResetMatchedUserID() {
	m.matched_user_id = nil
	m.addmatched_user_id = nil
}

// SetSessionID sets the "session_id" field.
func (m *MATCHINGSMutation) SetSessionID(i int) {
	m.session_id = &i
	m.addsession_id = nil
}

// SessionID returns the value of the "session_id" field in the mutation.
func (m *MATCHINGSMutation) SessionID() (r int, exists bool) {
	v := m.session_id
	if v == nil {
		return
	}
	return *v, true
}

// OldSessionID returns the old "session_id" field's value of the MATCHINGS entity.
// If the MATCHINGS object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MATCHINGSMutation) OldSessionID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSessionID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSessionID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSessionID: %w", err)
	}
	return oldValue.SessionID, nil
}

// AddSessionID adds i to the "session_id" field.
func (m *MATCHINGSMutation) AddSessionID(i int) {
	if m.addsession_id != nil {
		*m.addsession_id += i
	} else {
		m.addsession_id = &i
	}
}

// AddedSessionID returns the value that was added to the "session_id" field in this mutation.
func (m *MATCHINGSMutation) AddedSessionID() (r int, exists bool) {
	v := m.addsession_id
	if v == nil {
		return
	}
	return *v, true
}

// ResetSessionID resets all changes to the "session_id" field.
func (m *MATCHINGSMutation) ResetSessionID() {
	m.session_id = nil
	m.addsession_id = nil
}

// SetMatchedAt sets the "matched_at" field.
func (m *MATCHINGSMutation) SetMatchedAt(t time.Time) {
	m.matched_at = &t
}

// MatchedAt returns the value of the "matched_at" field in the mutation.
func (m *MATCHINGSMutation) MatchedAt() (r time.Time, exists bool) {
	v := m.matched_at
	if v == nil {
		return
	}
	return *v, true
}

// OldMatchedAt returns the old "matched_at" field's value of the MATCHINGS entity.
// If the MATCHINGS object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MATCHINGSMutation) OldMatchedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMatchedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMatchedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMatchedAt: %w", err)
	}
	return oldValue.MatchedAt, nil
}

// ResetMatchedAt resets all changes to the "matched_at" field.
func (m *MATCHINGSMutation) ResetMatchedAt() {
	m.matched_at = nil
}

// SetStatus sets the "status" field.
func (m *MATCHINGSMutation) SetStatus(value matchings.Status) {
	m.status = &value
}

// Status returns the value of the "status" field in the mutation.
func (m *MATCHINGSMutation) Status() (r matchings.Status, exists bool) {
	v := m.status
	if v == nil {
		return
	}
	return *v, true
}

// OldStatus returns the old "status" field's value of the MATCHINGS entity.
// If the MATCHINGS object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MATCHINGSMutation) OldStatus(ctx context.Context) (v matchings.Status, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatus: %w", err)
	}
	return oldValue.Status, nil
}

// ResetStatus resets all changes to the "status" field.
func (m *MATCHINGSMutation) ResetStatus() {
	m.status = nil
}

// AddMemberIDs adds the "member" edge to the USERS entity by ids.
func (m *MATCHINGSMutation) AddMemberIDs(ids ...int) {
	if m.member == nil {
		m.member = make(map[int]struct{})
	}
	for i := range ids {
		m.member[ids[i]] = struct{}{}
	}
}

// ClearMember clears the "member" edge to the USERS entity.
func (m *MATCHINGSMutation) ClearMember() {
	m.clearedmember = true
}

// MemberCleared reports if the "member" edge to the USERS entity was cleared.
func (m *MATCHINGSMutation) MemberCleared() bool {
	return m.clearedmember
}

// RemoveMemberIDs removes the "member" edge to the USERS entity by IDs.
func (m *MATCHINGSMutation) RemoveMemberIDs(ids ...int) {
	if m.removedmember == nil {
		m.removedmember = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.member, ids[i])
		m.removedmember[ids[i]] = struct{}{}
	}
}

// RemovedMember returns the removed IDs of the "member" edge to the USERS entity.
func (m *MATCHINGSMutation) RemovedMemberIDs() (ids []int) {
	for id := range m.removedmember {
		ids = append(ids, id)
	}
	return
}

// MemberIDs returns the "member" edge IDs in the mutation.
func (m *MATCHINGSMutation) MemberIDs() (ids []int) {
	for id := range m.member {
		ids = append(ids, id)
	}
	return
}

// ResetMember resets all changes to the "member" edge.
func (m *MATCHINGSMutation) ResetMember() {
	m.member = nil
	m.clearedmember = false
	m.removedmember = nil
}

// SetHadID sets the "had" edge to the SESSIONS entity by id.
func (m *MATCHINGSMutation) SetHadID(id int) {
	m.had = &id
}

// ClearHad clears the "had" edge to the SESSIONS entity.
func (m *MATCHINGSMutation) ClearHad() {
	m.clearedhad = true
}

// HadCleared reports if the "had" edge to the SESSIONS entity was cleared.
func (m *MATCHINGSMutation) HadCleared() bool {
	return m.clearedhad
}

// HadID returns the "had" edge ID in the mutation.
func (m *MATCHINGSMutation) HadID() (id int, exists bool) {
	if m.had != nil {
		return *m.had, true
	}
	return
}

// HadIDs returns the "had" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// HadID instead. It exists only for internal usage by the builders.
func (m *MATCHINGSMutation) HadIDs() (ids []int) {
	if id := m.had; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetHad resets all changes to the "had" edge.
func (m *MATCHINGSMutation) ResetHad() {
	m.had = nil
	m.clearedhad = false
}

// SetMakesID sets the "makes" edge to the CALLS entity by id.
func (m *MATCHINGSMutation) SetMakesID(id int) {
	m.makes = &id
}

// ClearMakes clears the "makes" edge to the CALLS entity.
func (m *MATCHINGSMutation) ClearMakes() {
	m.clearedmakes = true
}

// MakesCleared reports if the "makes" edge to the CALLS entity was cleared.
func (m *MATCHINGSMutation) MakesCleared() bool {
	return m.clearedmakes
}

// MakesID returns the "makes" edge ID in the mutation.
func (m *MATCHINGSMutation) MakesID() (id int, exists bool) {
	if m.makes != nil {
		return *m.makes, true
	}
	return
}

// MakesIDs returns the "makes" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// MakesID instead. It exists only for internal usage by the builders.
func (m *MATCHINGSMutation) MakesIDs() (ids []int) {
	if id := m.makes; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetMakes resets all changes to the "makes" edge.
func (m *MATCHINGSMutation) ResetMakes() {
	m.makes = nil
	m.clearedmakes = false
}

// Where appends a list predicates to the MATCHINGSMutation builder.
func (m *MATCHINGSMutation) Where(ps ...predicate.MATCHINGS) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the MATCHINGSMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *MATCHINGSMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.MATCHINGS, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *MATCHINGSMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *MATCHINGSMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (MATCHINGS).
func (m *MATCHINGSMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *MATCHINGSMutation) Fields() []string {
	fields := make([]string, 0, 6)
	if m.match_id != nil {
		fields = append(fields, matchings.FieldMatchID)
	}
	if m.user_id != nil {
		fields = append(fields, matchings.FieldUserID)
	}
	if m.matched_user_id != nil {
		fields = append(fields, matchings.FieldMatchedUserID)
	}
	if m.session_id != nil {
		fields = append(fields, matchings.FieldSessionID)
	}
	if m.matched_at != nil {
		fields = append(fields, matchings.FieldMatchedAt)
	}
	if m.status != nil {
		fields = append(fields, matchings.FieldStatus)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *MATCHINGSMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case matchings.FieldMatchID:
		return m.MatchID()
	case matchings.FieldUserID:
		return m.UserID()
	case matchings.FieldMatchedUserID:
		return m.MatchedUserID()
	case matchings.FieldSessionID:
		return m.SessionID()
	case matchings.FieldMatchedAt:
		return m.MatchedAt()
	case matchings.FieldStatus:
		return m.Status()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *MATCHINGSMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case matchings.FieldMatchID:
		return m.OldMatchID(ctx)
	case matchings.FieldUserID:
		return m.OldUserID(ctx)
	case matchings.FieldMatchedUserID:
		return m.OldMatchedUserID(ctx)
	case matchings.FieldSessionID:
		return m.OldSessionID(ctx)
	case matchings.FieldMatchedAt:
		return m.OldMatchedAt(ctx)
	case matchings.FieldStatus:
		return m.OldStatus(ctx)
	}
	return nil, fmt.Errorf("unknown MATCHINGS field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *MATCHINGSMutation) SetField(name string, value ent.Value) error {
	switch name {
	case matchings.FieldMatchID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMatchID(v)
		return nil
	case matchings.FieldUserID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUserID(v)
		return nil
	case matchings.FieldMatchedUserID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMatchedUserID(v)
		return nil
	case matchings.FieldSessionID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSessionID(v)
		return nil
	case matchings.FieldMatchedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMatchedAt(v)
		return nil
	case matchings.FieldStatus:
		v, ok := value.(matchings.Status)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatus(v)
		return nil
	}
	return fmt.Errorf("unknown MATCHINGS field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *MATCHINGSMutation) AddedFields() []string {
	var fields []string
	if m.addmatch_id != nil {
		fields = append(fields, matchings.FieldMatchID)
	}
	if m.adduser_id != nil {
		fields = append(fields, matchings.FieldUserID)
	}
	if m.addmatched_user_id != nil {
		fields = append(fields, matchings.FieldMatchedUserID)
	}
	if m.addsession_id != nil {
		fields = append(fields, matchings.FieldSessionID)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *MATCHINGSMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case matchings.FieldMatchID:
		return m.AddedMatchID()
	case matchings.FieldUserID:
		return m.AddedUserID()
	case matchings.FieldMatchedUserID:
		return m.AddedMatchedUserID()
	case matchings.FieldSessionID:
		return m.AddedSessionID()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *MATCHINGSMutation) AddField(name string, value ent.Value) error {
	switch name {
	case matchings.FieldMatchID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddMatchID(v)
		return nil
	case matchings.FieldUserID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddUserID(v)
		return nil
	case matchings.FieldMatchedUserID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddMatchedUserID(v)
		return nil
	case matchings.FieldSessionID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddSessionID(v)
		return nil
	}
	return fmt.Errorf("unknown MATCHINGS numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *MATCHINGSMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *MATCHINGSMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *MATCHINGSMutation) ClearField(name string) error {
	return fmt.Errorf("unknown MATCHINGS nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *MATCHINGSMutation) ResetField(name string) error {
	switch name {
	case matchings.FieldMatchID:
		m.ResetMatchID()
		return nil
	case matchings.FieldUserID:
		m.ResetUserID()
		return nil
	case matchings.FieldMatchedUserID:
		m.ResetMatchedUserID()
		return nil
	case matchings.FieldSessionID:
		m.ResetSessionID()
		return nil
	case matchings.FieldMatchedAt:
		m.ResetMatchedAt()
		return nil
	case matchings.FieldStatus:
		m.ResetStatus()
		return nil
	}
	return fmt.Errorf("unknown MATCHINGS field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *MATCHINGSMutation) AddedEdges() []string {
	edges := make([]string, 0, 3)
	if m.member != nil {
		edges = append(edges, matchings.EdgeMember)
	}
	if m.had != nil {
		edges = append(edges, matchings.EdgeHad)
	}
	if m.makes != nil {
		edges = append(edges, matchings.EdgeMakes)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *MATCHINGSMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case matchings.EdgeMember:
		ids := make([]ent.Value, 0, len(m.member))
		for id := range m.member {
			ids = append(ids, id)
		}
		return ids
	case matchings.EdgeHad:
		if id := m.had; id != nil {
			return []ent.Value{*id}
		}
	case matchings.EdgeMakes:
		if id := m.makes; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *MATCHINGSMutation) RemovedEdges() []string {
	edges := make([]string, 0, 3)
	if m.removedmember != nil {
		edges = append(edges, matchings.EdgeMember)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *MATCHINGSMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case matchings.EdgeMember:
		ids := make([]ent.Value, 0, len(m.removedmember))
		for id := range m.removedmember {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *MATCHINGSMutation) ClearedEdges() []string {
	edges := make([]string, 0, 3)
	if m.clearedmember {
		edges = append(edges, matchings.EdgeMember)
	}
	if m.clearedhad {
		edges = append(edges, matchings.EdgeHad)
	}
	if m.clearedmakes {
		edges = append(edges, matchings.EdgeMakes)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *MATCHINGSMutation) EdgeCleared(name string) bool {
	switch name {
	case matchings.EdgeMember:
		return m.clearedmember
	case matchings.EdgeHad:
		return m.clearedhad
	case matchings.EdgeMakes:
		return m.clearedmakes
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *MATCHINGSMutation) ClearEdge(name string) error {
	switch name {
	case matchings.EdgeHad:
		m.ClearHad()
		return nil
	case matchings.EdgeMakes:
		m.ClearMakes()
		return nil
	}
	return fmt.Errorf("unknown MATCHINGS unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *MATCHINGSMutation) ResetEdge(name string) error {
	switch name {
	case matchings.EdgeMember:
		m.ResetMember()
		return nil
	case matchings.EdgeHad:
		m.ResetHad()
		return nil
	case matchings.EdgeMakes:
		m.ResetMakes()
		return nil
	}
	return fmt.Errorf("unknown MATCHINGS edge %s", name)
}

// MEMOSMutation represents an operation that mutates the MEMOS nodes in the graph.
type MEMOSMutation struct {
	config
	op              Op
	typ             string
	id              *int
	memo_id         *int
	addmemo_id      *int
	user_id         *int
	adduser_id      *int
	memo1           *string
	memo2           *string
	clearedFields   map[string]struct{}
	prepared        *int
	clearedprepared bool
	done            bool
	oldValue        func(context.Context) (*MEMOS, error)
	predicates      []predicate.MEMOS
}

var _ ent.Mutation = (*MEMOSMutation)(nil)

// memosOption allows management of the mutation configuration using functional options.
type memosOption func(*MEMOSMutation)

// newMEMOSMutation creates new mutation for the MEMOS entity.
func newMEMOSMutation(c config, op Op, opts ...memosOption) *MEMOSMutation {
	m := &MEMOSMutation{
		config:        c,
		op:            op,
		typ:           TypeMEMOS,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withMEMOSID sets the ID field of the mutation.
func withMEMOSID(id int) memosOption {
	return func(m *MEMOSMutation) {
		var (
			err   error
			once  sync.Once
			value *MEMOS
		)
		m.oldValue = func(ctx context.Context) (*MEMOS, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().MEMOS.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withMEMOS sets the old MEMOS of the mutation.
func withMEMOS(node *MEMOS) memosOption {
	return func(m *MEMOSMutation) {
		m.oldValue = func(context.Context) (*MEMOS, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m MEMOSMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m MEMOSMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *MEMOSMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *MEMOSMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().MEMOS.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetMemoID sets the "memo_id" field.
func (m *MEMOSMutation) SetMemoID(i int) {
	m.memo_id = &i
	m.addmemo_id = nil
}

// MemoID returns the value of the "memo_id" field in the mutation.
func (m *MEMOSMutation) MemoID() (r int, exists bool) {
	v := m.memo_id
	if v == nil {
		return
	}
	return *v, true
}

// OldMemoID returns the old "memo_id" field's value of the MEMOS entity.
// If the MEMOS object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MEMOSMutation) OldMemoID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMemoID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMemoID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMemoID: %w", err)
	}
	return oldValue.MemoID, nil
}

// AddMemoID adds i to the "memo_id" field.
func (m *MEMOSMutation) AddMemoID(i int) {
	if m.addmemo_id != nil {
		*m.addmemo_id += i
	} else {
		m.addmemo_id = &i
	}
}

// AddedMemoID returns the value that was added to the "memo_id" field in this mutation.
func (m *MEMOSMutation) AddedMemoID() (r int, exists bool) {
	v := m.addmemo_id
	if v == nil {
		return
	}
	return *v, true
}

// ResetMemoID resets all changes to the "memo_id" field.
func (m *MEMOSMutation) ResetMemoID() {
	m.memo_id = nil
	m.addmemo_id = nil
}

// SetUserID sets the "user_id" field.
func (m *MEMOSMutation) SetUserID(i int) {
	m.user_id = &i
	m.adduser_id = nil
}

// UserID returns the value of the "user_id" field in the mutation.
func (m *MEMOSMutation) UserID() (r int, exists bool) {
	v := m.user_id
	if v == nil {
		return
	}
	return *v, true
}

// OldUserID returns the old "user_id" field's value of the MEMOS entity.
// If the MEMOS object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MEMOSMutation) OldUserID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUserID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUserID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUserID: %w", err)
	}
	return oldValue.UserID, nil
}

// AddUserID adds i to the "user_id" field.
func (m *MEMOSMutation) AddUserID(i int) {
	if m.adduser_id != nil {
		*m.adduser_id += i
	} else {
		m.adduser_id = &i
	}
}

// AddedUserID returns the value that was added to the "user_id" field in this mutation.
func (m *MEMOSMutation) AddedUserID() (r int, exists bool) {
	v := m.adduser_id
	if v == nil {
		return
	}
	return *v, true
}

// ResetUserID resets all changes to the "user_id" field.
func (m *MEMOSMutation) ResetUserID() {
	m.user_id = nil
	m.adduser_id = nil
}

// SetMemo1 sets the "memo1" field.
func (m *MEMOSMutation) SetMemo1(s string) {
	m.memo1 = &s
}

// Memo1 returns the value of the "memo1" field in the mutation.
func (m *MEMOSMutation) Memo1() (r string, exists bool) {
	v := m.memo1
	if v == nil {
		return
	}
	return *v, true
}

// OldMemo1 returns the old "memo1" field's value of the MEMOS entity.
// If the MEMOS object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MEMOSMutation) OldMemo1(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMemo1 is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMemo1 requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMemo1: %w", err)
	}
	return oldValue.Memo1, nil
}

// ResetMemo1 resets all changes to the "memo1" field.
func (m *MEMOSMutation) ResetMemo1() {
	m.memo1 = nil
}

// SetMemo2 sets the "memo2" field.
func (m *MEMOSMutation) SetMemo2(s string) {
	m.memo2 = &s
}

// Memo2 returns the value of the "memo2" field in the mutation.
func (m *MEMOSMutation) Memo2() (r string, exists bool) {
	v := m.memo2
	if v == nil {
		return
	}
	return *v, true
}

// OldMemo2 returns the old "memo2" field's value of the MEMOS entity.
// If the MEMOS object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MEMOSMutation) OldMemo2(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMemo2 is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMemo2 requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMemo2: %w", err)
	}
	return oldValue.Memo2, nil
}

// ResetMemo2 resets all changes to the "memo2" field.
func (m *MEMOSMutation) ResetMemo2() {
	m.memo2 = nil
}

// SetPreparedID sets the "prepared" edge to the USERS entity by id.
func (m *MEMOSMutation) SetPreparedID(id int) {
	m.prepared = &id
}

// ClearPrepared clears the "prepared" edge to the USERS entity.
func (m *MEMOSMutation) ClearPrepared() {
	m.clearedprepared = true
}

// PreparedCleared reports if the "prepared" edge to the USERS entity was cleared.
func (m *MEMOSMutation) PreparedCleared() bool {
	return m.clearedprepared
}

// PreparedID returns the "prepared" edge ID in the mutation.
func (m *MEMOSMutation) PreparedID() (id int, exists bool) {
	if m.prepared != nil {
		return *m.prepared, true
	}
	return
}

// PreparedIDs returns the "prepared" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// PreparedID instead. It exists only for internal usage by the builders.
func (m *MEMOSMutation) PreparedIDs() (ids []int) {
	if id := m.prepared; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetPrepared resets all changes to the "prepared" edge.
func (m *MEMOSMutation) ResetPrepared() {
	m.prepared = nil
	m.clearedprepared = false
}

// Where appends a list predicates to the MEMOSMutation builder.
func (m *MEMOSMutation) Where(ps ...predicate.MEMOS) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the MEMOSMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *MEMOSMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.MEMOS, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *MEMOSMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *MEMOSMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (MEMOS).
func (m *MEMOSMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *MEMOSMutation) Fields() []string {
	fields := make([]string, 0, 4)
	if m.memo_id != nil {
		fields = append(fields, memos.FieldMemoID)
	}
	if m.user_id != nil {
		fields = append(fields, memos.FieldUserID)
	}
	if m.memo1 != nil {
		fields = append(fields, memos.FieldMemo1)
	}
	if m.memo2 != nil {
		fields = append(fields, memos.FieldMemo2)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *MEMOSMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case memos.FieldMemoID:
		return m.MemoID()
	case memos.FieldUserID:
		return m.UserID()
	case memos.FieldMemo1:
		return m.Memo1()
	case memos.FieldMemo2:
		return m.Memo2()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *MEMOSMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case memos.FieldMemoID:
		return m.OldMemoID(ctx)
	case memos.FieldUserID:
		return m.OldUserID(ctx)
	case memos.FieldMemo1:
		return m.OldMemo1(ctx)
	case memos.FieldMemo2:
		return m.OldMemo2(ctx)
	}
	return nil, fmt.Errorf("unknown MEMOS field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *MEMOSMutation) SetField(name string, value ent.Value) error {
	switch name {
	case memos.FieldMemoID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMemoID(v)
		return nil
	case memos.FieldUserID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUserID(v)
		return nil
	case memos.FieldMemo1:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMemo1(v)
		return nil
	case memos.FieldMemo2:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMemo2(v)
		return nil
	}
	return fmt.Errorf("unknown MEMOS field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *MEMOSMutation) AddedFields() []string {
	var fields []string
	if m.addmemo_id != nil {
		fields = append(fields, memos.FieldMemoID)
	}
	if m.adduser_id != nil {
		fields = append(fields, memos.FieldUserID)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *MEMOSMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case memos.FieldMemoID:
		return m.AddedMemoID()
	case memos.FieldUserID:
		return m.AddedUserID()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *MEMOSMutation) AddField(name string, value ent.Value) error {
	switch name {
	case memos.FieldMemoID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddMemoID(v)
		return nil
	case memos.FieldUserID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddUserID(v)
		return nil
	}
	return fmt.Errorf("unknown MEMOS numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *MEMOSMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *MEMOSMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *MEMOSMutation) ClearField(name string) error {
	return fmt.Errorf("unknown MEMOS nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *MEMOSMutation) ResetField(name string) error {
	switch name {
	case memos.FieldMemoID:
		m.ResetMemoID()
		return nil
	case memos.FieldUserID:
		m.ResetUserID()
		return nil
	case memos.FieldMemo1:
		m.ResetMemo1()
		return nil
	case memos.FieldMemo2:
		m.ResetMemo2()
		return nil
	}
	return fmt.Errorf("unknown MEMOS field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *MEMOSMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.prepared != nil {
		edges = append(edges, memos.EdgePrepared)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *MEMOSMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case memos.EdgePrepared:
		if id := m.prepared; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *MEMOSMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *MEMOSMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *MEMOSMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedprepared {
		edges = append(edges, memos.EdgePrepared)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *MEMOSMutation) EdgeCleared(name string) bool {
	switch name {
	case memos.EdgePrepared:
		return m.clearedprepared
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *MEMOSMutation) ClearEdge(name string) error {
	switch name {
	case memos.EdgePrepared:
		m.ClearPrepared()
		return nil
	}
	return fmt.Errorf("unknown MEMOS unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *MEMOSMutation) ResetEdge(name string) error {
	switch name {
	case memos.EdgePrepared:
		m.ResetPrepared()
		return nil
	}
	return fmt.Errorf("unknown MEMOS edge %s", name)
}

// SESSIONSMutation represents an operation that mutates the SESSIONS nodes in the graph.
type SESSIONSMutation struct {
	config
	op            Op
	typ           string
	id            *int
	session_id    *int
	addsession_id *int
	session_start *time.Time
	session_end   *time.Time
	theme_id      *int
	addtheme_id   *int
	created_at    *time.Time
	clearedFields map[string]struct{}
	has           map[int]struct{}
	removedhas    map[int]struct{}
	clearedhas    bool
	uses          *int
	cleareduses   bool
	done          bool
	oldValue      func(context.Context) (*SESSIONS, error)
	predicates    []predicate.SESSIONS
}

var _ ent.Mutation = (*SESSIONSMutation)(nil)

// sessionsOption allows management of the mutation configuration using functional options.
type sessionsOption func(*SESSIONSMutation)

// newSESSIONSMutation creates new mutation for the SESSIONS entity.
func newSESSIONSMutation(c config, op Op, opts ...sessionsOption) *SESSIONSMutation {
	m := &SESSIONSMutation{
		config:        c,
		op:            op,
		typ:           TypeSESSIONS,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withSESSIONSID sets the ID field of the mutation.
func withSESSIONSID(id int) sessionsOption {
	return func(m *SESSIONSMutation) {
		var (
			err   error
			once  sync.Once
			value *SESSIONS
		)
		m.oldValue = func(ctx context.Context) (*SESSIONS, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().SESSIONS.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withSESSIONS sets the old SESSIONS of the mutation.
func withSESSIONS(node *SESSIONS) sessionsOption {
	return func(m *SESSIONSMutation) {
		m.oldValue = func(context.Context) (*SESSIONS, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m SESSIONSMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m SESSIONSMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *SESSIONSMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *SESSIONSMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().SESSIONS.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetSessionID sets the "session_id" field.
func (m *SESSIONSMutation) SetSessionID(i int) {
	m.session_id = &i
	m.addsession_id = nil
}

// SessionID returns the value of the "session_id" field in the mutation.
func (m *SESSIONSMutation) SessionID() (r int, exists bool) {
	v := m.session_id
	if v == nil {
		return
	}
	return *v, true
}

// OldSessionID returns the old "session_id" field's value of the SESSIONS entity.
// If the SESSIONS object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SESSIONSMutation) OldSessionID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSessionID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSessionID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSessionID: %w", err)
	}
	return oldValue.SessionID, nil
}

// AddSessionID adds i to the "session_id" field.
func (m *SESSIONSMutation) AddSessionID(i int) {
	if m.addsession_id != nil {
		*m.addsession_id += i
	} else {
		m.addsession_id = &i
	}
}

// AddedSessionID returns the value that was added to the "session_id" field in this mutation.
func (m *SESSIONSMutation) AddedSessionID() (r int, exists bool) {
	v := m.addsession_id
	if v == nil {
		return
	}
	return *v, true
}

// ResetSessionID resets all changes to the "session_id" field.
func (m *SESSIONSMutation) ResetSessionID() {
	m.session_id = nil
	m.addsession_id = nil
}

// SetSessionStart sets the "session_start" field.
func (m *SESSIONSMutation) SetSessionStart(t time.Time) {
	m.session_start = &t
}

// SessionStart returns the value of the "session_start" field in the mutation.
func (m *SESSIONSMutation) SessionStart() (r time.Time, exists bool) {
	v := m.session_start
	if v == nil {
		return
	}
	return *v, true
}

// OldSessionStart returns the old "session_start" field's value of the SESSIONS entity.
// If the SESSIONS object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SESSIONSMutation) OldSessionStart(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSessionStart is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSessionStart requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSessionStart: %w", err)
	}
	return oldValue.SessionStart, nil
}

// ResetSessionStart resets all changes to the "session_start" field.
func (m *SESSIONSMutation) ResetSessionStart() {
	m.session_start = nil
}

// SetSessionEnd sets the "session_end" field.
func (m *SESSIONSMutation) SetSessionEnd(t time.Time) {
	m.session_end = &t
}

// SessionEnd returns the value of the "session_end" field in the mutation.
func (m *SESSIONSMutation) SessionEnd() (r time.Time, exists bool) {
	v := m.session_end
	if v == nil {
		return
	}
	return *v, true
}

// OldSessionEnd returns the old "session_end" field's value of the SESSIONS entity.
// If the SESSIONS object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SESSIONSMutation) OldSessionEnd(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSessionEnd is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSessionEnd requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSessionEnd: %w", err)
	}
	return oldValue.SessionEnd, nil
}

// ResetSessionEnd resets all changes to the "session_end" field.
func (m *SESSIONSMutation) ResetSessionEnd() {
	m.session_end = nil
}

// SetThemeID sets the "theme_id" field.
func (m *SESSIONSMutation) SetThemeID(i int) {
	m.theme_id = &i
	m.addtheme_id = nil
}

// ThemeID returns the value of the "theme_id" field in the mutation.
func (m *SESSIONSMutation) ThemeID() (r int, exists bool) {
	v := m.theme_id
	if v == nil {
		return
	}
	return *v, true
}

// OldThemeID returns the old "theme_id" field's value of the SESSIONS entity.
// If the SESSIONS object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SESSIONSMutation) OldThemeID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldThemeID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldThemeID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldThemeID: %w", err)
	}
	return oldValue.ThemeID, nil
}

// AddThemeID adds i to the "theme_id" field.
func (m *SESSIONSMutation) AddThemeID(i int) {
	if m.addtheme_id != nil {
		*m.addtheme_id += i
	} else {
		m.addtheme_id = &i
	}
}

// AddedThemeID returns the value that was added to the "theme_id" field in this mutation.
func (m *SESSIONSMutation) AddedThemeID() (r int, exists bool) {
	v := m.addtheme_id
	if v == nil {
		return
	}
	return *v, true
}

// ResetThemeID resets all changes to the "theme_id" field.
func (m *SESSIONSMutation) ResetThemeID() {
	m.theme_id = nil
	m.addtheme_id = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *SESSIONSMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *SESSIONSMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the SESSIONS entity.
// If the SESSIONS object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SESSIONSMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *SESSIONSMutation) ResetCreatedAt() {
	m.created_at = nil
}

// AddHaIDs adds the "has" edge to the MATCHINGS entity by ids.
func (m *SESSIONSMutation) AddHaIDs(ids ...int) {
	if m.has == nil {
		m.has = make(map[int]struct{})
	}
	for i := range ids {
		m.has[ids[i]] = struct{}{}
	}
}

// ClearHas clears the "has" edge to the MATCHINGS entity.
func (m *SESSIONSMutation) ClearHas() {
	m.clearedhas = true
}

// HasCleared reports if the "has" edge to the MATCHINGS entity was cleared.
func (m *SESSIONSMutation) HasCleared() bool {
	return m.clearedhas
}

// RemoveHaIDs removes the "has" edge to the MATCHINGS entity by IDs.
func (m *SESSIONSMutation) RemoveHaIDs(ids ...int) {
	if m.removedhas == nil {
		m.removedhas = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.has, ids[i])
		m.removedhas[ids[i]] = struct{}{}
	}
}

// RemovedHas returns the removed IDs of the "has" edge to the MATCHINGS entity.
func (m *SESSIONSMutation) RemovedHasIDs() (ids []int) {
	for id := range m.removedhas {
		ids = append(ids, id)
	}
	return
}

// HasIDs returns the "has" edge IDs in the mutation.
func (m *SESSIONSMutation) HasIDs() (ids []int) {
	for id := range m.has {
		ids = append(ids, id)
	}
	return
}

// ResetHas resets all changes to the "has" edge.
func (m *SESSIONSMutation) ResetHas() {
	m.has = nil
	m.clearedhas = false
	m.removedhas = nil
}

// SetUsesID sets the "uses" edge to the AITHEMES entity by id.
func (m *SESSIONSMutation) SetUsesID(id int) {
	m.uses = &id
}

// ClearUses clears the "uses" edge to the AITHEMES entity.
func (m *SESSIONSMutation) ClearUses() {
	m.cleareduses = true
}

// UsesCleared reports if the "uses" edge to the AITHEMES entity was cleared.
func (m *SESSIONSMutation) UsesCleared() bool {
	return m.cleareduses
}

// UsesID returns the "uses" edge ID in the mutation.
func (m *SESSIONSMutation) UsesID() (id int, exists bool) {
	if m.uses != nil {
		return *m.uses, true
	}
	return
}

// UsesIDs returns the "uses" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// UsesID instead. It exists only for internal usage by the builders.
func (m *SESSIONSMutation) UsesIDs() (ids []int) {
	if id := m.uses; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetUses resets all changes to the "uses" edge.
func (m *SESSIONSMutation) ResetUses() {
	m.uses = nil
	m.cleareduses = false
}

// Where appends a list predicates to the SESSIONSMutation builder.
func (m *SESSIONSMutation) Where(ps ...predicate.SESSIONS) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the SESSIONSMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *SESSIONSMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.SESSIONS, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *SESSIONSMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *SESSIONSMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (SESSIONS).
func (m *SESSIONSMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *SESSIONSMutation) Fields() []string {
	fields := make([]string, 0, 5)
	if m.session_id != nil {
		fields = append(fields, sessions.FieldSessionID)
	}
	if m.session_start != nil {
		fields = append(fields, sessions.FieldSessionStart)
	}
	if m.session_end != nil {
		fields = append(fields, sessions.FieldSessionEnd)
	}
	if m.theme_id != nil {
		fields = append(fields, sessions.FieldThemeID)
	}
	if m.created_at != nil {
		fields = append(fields, sessions.FieldCreatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *SESSIONSMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case sessions.FieldSessionID:
		return m.SessionID()
	case sessions.FieldSessionStart:
		return m.SessionStart()
	case sessions.FieldSessionEnd:
		return m.SessionEnd()
	case sessions.FieldThemeID:
		return m.ThemeID()
	case sessions.FieldCreatedAt:
		return m.CreatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *SESSIONSMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case sessions.FieldSessionID:
		return m.OldSessionID(ctx)
	case sessions.FieldSessionStart:
		return m.OldSessionStart(ctx)
	case sessions.FieldSessionEnd:
		return m.OldSessionEnd(ctx)
	case sessions.FieldThemeID:
		return m.OldThemeID(ctx)
	case sessions.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown SESSIONS field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SESSIONSMutation) SetField(name string, value ent.Value) error {
	switch name {
	case sessions.FieldSessionID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSessionID(v)
		return nil
	case sessions.FieldSessionStart:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSessionStart(v)
		return nil
	case sessions.FieldSessionEnd:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSessionEnd(v)
		return nil
	case sessions.FieldThemeID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetThemeID(v)
		return nil
	case sessions.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown SESSIONS field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *SESSIONSMutation) AddedFields() []string {
	var fields []string
	if m.addsession_id != nil {
		fields = append(fields, sessions.FieldSessionID)
	}
	if m.addtheme_id != nil {
		fields = append(fields, sessions.FieldThemeID)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *SESSIONSMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case sessions.FieldSessionID:
		return m.AddedSessionID()
	case sessions.FieldThemeID:
		return m.AddedThemeID()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SESSIONSMutation) AddField(name string, value ent.Value) error {
	switch name {
	case sessions.FieldSessionID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddSessionID(v)
		return nil
	case sessions.FieldThemeID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddThemeID(v)
		return nil
	}
	return fmt.Errorf("unknown SESSIONS numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *SESSIONSMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *SESSIONSMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *SESSIONSMutation) ClearField(name string) error {
	return fmt.Errorf("unknown SESSIONS nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *SESSIONSMutation) ResetField(name string) error {
	switch name {
	case sessions.FieldSessionID:
		m.ResetSessionID()
		return nil
	case sessions.FieldSessionStart:
		m.ResetSessionStart()
		return nil
	case sessions.FieldSessionEnd:
		m.ResetSessionEnd()
		return nil
	case sessions.FieldThemeID:
		m.ResetThemeID()
		return nil
	case sessions.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	}
	return fmt.Errorf("unknown SESSIONS field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *SESSIONSMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.has != nil {
		edges = append(edges, sessions.EdgeHas)
	}
	if m.uses != nil {
		edges = append(edges, sessions.EdgeUses)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *SESSIONSMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case sessions.EdgeHas:
		ids := make([]ent.Value, 0, len(m.has))
		for id := range m.has {
			ids = append(ids, id)
		}
		return ids
	case sessions.EdgeUses:
		if id := m.uses; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *SESSIONSMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedhas != nil {
		edges = append(edges, sessions.EdgeHas)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *SESSIONSMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case sessions.EdgeHas:
		ids := make([]ent.Value, 0, len(m.removedhas))
		for id := range m.removedhas {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *SESSIONSMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedhas {
		edges = append(edges, sessions.EdgeHas)
	}
	if m.cleareduses {
		edges = append(edges, sessions.EdgeUses)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *SESSIONSMutation) EdgeCleared(name string) bool {
	switch name {
	case sessions.EdgeHas:
		return m.clearedhas
	case sessions.EdgeUses:
		return m.cleareduses
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *SESSIONSMutation) ClearEdge(name string) error {
	switch name {
	case sessions.EdgeUses:
		m.ClearUses()
		return nil
	}
	return fmt.Errorf("unknown SESSIONS unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *SESSIONSMutation) ResetEdge(name string) error {
	switch name {
	case sessions.EdgeHas:
		m.ResetHas()
		return nil
	case sessions.EdgeUses:
		m.ResetUses()
		return nil
	}
	return fmt.Errorf("unknown SESSIONS edge %s", name)
}

// USERSMutation represents an operation that mutates the USERS nodes in the graph.
type USERSMutation struct {
	config
	op                  Op
	typ                 string
	id                  *int
	user_id             *int
	adduser_id          *int
	username            *string
	email               *string
	avatar_url          *string
	role                *users.Role
	created_at          *time.Time
	is_deleted          *bool
	updated_at          *time.Time
	access_token        *string
	clearedFields       map[string]struct{}
	connects            map[int]struct{}
	removedconnects     map[int]struct{}
	clearedconnects     bool
	participates        map[int]struct{}
	removedparticipates map[int]struct{}
	clearedparticipates bool
	prepares            *int
	clearedprepares     bool
	done                bool
	oldValue            func(context.Context) (*USERS, error)
	predicates          []predicate.USERS
}

var _ ent.Mutation = (*USERSMutation)(nil)

// usersOption allows management of the mutation configuration using functional options.
type usersOption func(*USERSMutation)

// newUSERSMutation creates new mutation for the USERS entity.
func newUSERSMutation(c config, op Op, opts ...usersOption) *USERSMutation {
	m := &USERSMutation{
		config:        c,
		op:            op,
		typ:           TypeUSERS,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUSERSID sets the ID field of the mutation.
func withUSERSID(id int) usersOption {
	return func(m *USERSMutation) {
		var (
			err   error
			once  sync.Once
			value *USERS
		)
		m.oldValue = func(ctx context.Context) (*USERS, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().USERS.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUSERS sets the old USERS of the mutation.
func withUSERS(node *USERS) usersOption {
	return func(m *USERSMutation) {
		m.oldValue = func(context.Context) (*USERS, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m USERSMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m USERSMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *USERSMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *USERSMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().USERS.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetUserID sets the "user_id" field.
func (m *USERSMutation) SetUserID(i int) {
	m.user_id = &i
	m.adduser_id = nil
}

// UserID returns the value of the "user_id" field in the mutation.
func (m *USERSMutation) UserID() (r int, exists bool) {
	v := m.user_id
	if v == nil {
		return
	}
	return *v, true
}

// OldUserID returns the old "user_id" field's value of the USERS entity.
// If the USERS object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *USERSMutation) OldUserID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUserID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUserID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUserID: %w", err)
	}
	return oldValue.UserID, nil
}

// AddUserID adds i to the "user_id" field.
func (m *USERSMutation) AddUserID(i int) {
	if m.adduser_id != nil {
		*m.adduser_id += i
	} else {
		m.adduser_id = &i
	}
}

// AddedUserID returns the value that was added to the "user_id" field in this mutation.
func (m *USERSMutation) AddedUserID() (r int, exists bool) {
	v := m.adduser_id
	if v == nil {
		return
	}
	return *v, true
}

// ResetUserID resets all changes to the "user_id" field.
func (m *USERSMutation) ResetUserID() {
	m.user_id = nil
	m.adduser_id = nil
}

// SetUsername sets the "username" field.
func (m *USERSMutation) SetUsername(s string) {
	m.username = &s
}

// Username returns the value of the "username" field in the mutation.
func (m *USERSMutation) Username() (r string, exists bool) {
	v := m.username
	if v == nil {
		return
	}
	return *v, true
}

// OldUsername returns the old "username" field's value of the USERS entity.
// If the USERS object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *USERSMutation) OldUsername(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUsername is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUsername requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUsername: %w", err)
	}
	return oldValue.Username, nil
}

// ResetUsername resets all changes to the "username" field.
func (m *USERSMutation) ResetUsername() {
	m.username = nil
}

// SetEmail sets the "email" field.
func (m *USERSMutation) SetEmail(s string) {
	m.email = &s
}

// Email returns the value of the "email" field in the mutation.
func (m *USERSMutation) Email() (r string, exists bool) {
	v := m.email
	if v == nil {
		return
	}
	return *v, true
}

// OldEmail returns the old "email" field's value of the USERS entity.
// If the USERS object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *USERSMutation) OldEmail(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEmail is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEmail requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEmail: %w", err)
	}
	return oldValue.Email, nil
}

// ResetEmail resets all changes to the "email" field.
func (m *USERSMutation) ResetEmail() {
	m.email = nil
}

// SetAvatarURL sets the "avatar_url" field.
func (m *USERSMutation) SetAvatarURL(s string) {
	m.avatar_url = &s
}

// AvatarURL returns the value of the "avatar_url" field in the mutation.
func (m *USERSMutation) AvatarURL() (r string, exists bool) {
	v := m.avatar_url
	if v == nil {
		return
	}
	return *v, true
}

// OldAvatarURL returns the old "avatar_url" field's value of the USERS entity.
// If the USERS object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *USERSMutation) OldAvatarURL(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAvatarURL is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAvatarURL requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAvatarURL: %w", err)
	}
	return oldValue.AvatarURL, nil
}

// ClearAvatarURL clears the value of the "avatar_url" field.
func (m *USERSMutation) ClearAvatarURL() {
	m.avatar_url = nil
	m.clearedFields[users.FieldAvatarURL] = struct{}{}
}

// AvatarURLCleared returns if the "avatar_url" field was cleared in this mutation.
func (m *USERSMutation) AvatarURLCleared() bool {
	_, ok := m.clearedFields[users.FieldAvatarURL]
	return ok
}

// ResetAvatarURL resets all changes to the "avatar_url" field.
func (m *USERSMutation) ResetAvatarURL() {
	m.avatar_url = nil
	delete(m.clearedFields, users.FieldAvatarURL)
}

// SetRole sets the "role" field.
func (m *USERSMutation) SetRole(u users.Role) {
	m.role = &u
}

// Role returns the value of the "role" field in the mutation.
func (m *USERSMutation) Role() (r users.Role, exists bool) {
	v := m.role
	if v == nil {
		return
	}
	return *v, true
}

// OldRole returns the old "role" field's value of the USERS entity.
// If the USERS object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *USERSMutation) OldRole(ctx context.Context) (v users.Role, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRole is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRole requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRole: %w", err)
	}
	return oldValue.Role, nil
}

// ResetRole resets all changes to the "role" field.
func (m *USERSMutation) ResetRole() {
	m.role = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *USERSMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *USERSMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the USERS entity.
// If the USERS object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *USERSMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *USERSMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetIsDeleted sets the "is_deleted" field.
func (m *USERSMutation) SetIsDeleted(b bool) {
	m.is_deleted = &b
}

// IsDeleted returns the value of the "is_deleted" field in the mutation.
func (m *USERSMutation) IsDeleted() (r bool, exists bool) {
	v := m.is_deleted
	if v == nil {
		return
	}
	return *v, true
}

// OldIsDeleted returns the old "is_deleted" field's value of the USERS entity.
// If the USERS object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *USERSMutation) OldIsDeleted(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIsDeleted is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIsDeleted requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsDeleted: %w", err)
	}
	return oldValue.IsDeleted, nil
}

// ResetIsDeleted resets all changes to the "is_deleted" field.
func (m *USERSMutation) ResetIsDeleted() {
	m.is_deleted = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *USERSMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *USERSMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the USERS entity.
// If the USERS object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *USERSMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *USERSMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetAccessToken sets the "access_token" field.
func (m *USERSMutation) SetAccessToken(s string) {
	m.access_token = &s
}

// AccessToken returns the value of the "access_token" field in the mutation.
func (m *USERSMutation) AccessToken() (r string, exists bool) {
	v := m.access_token
	if v == nil {
		return
	}
	return *v, true
}

// OldAccessToken returns the old "access_token" field's value of the USERS entity.
// If the USERS object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *USERSMutation) OldAccessToken(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAccessToken is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAccessToken requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAccessToken: %w", err)
	}
	return oldValue.AccessToken, nil
}

// ResetAccessToken resets all changes to the "access_token" field.
func (m *USERSMutation) ResetAccessToken() {
	m.access_token = nil
}

// AddConnectIDs adds the "connects" edge to the FRIENDS entity by ids.
func (m *USERSMutation) AddConnectIDs(ids ...int) {
	if m.connects == nil {
		m.connects = make(map[int]struct{})
	}
	for i := range ids {
		m.connects[ids[i]] = struct{}{}
	}
}

// ClearConnects clears the "connects" edge to the FRIENDS entity.
func (m *USERSMutation) ClearConnects() {
	m.clearedconnects = true
}

// ConnectsCleared reports if the "connects" edge to the FRIENDS entity was cleared.
func (m *USERSMutation) ConnectsCleared() bool {
	return m.clearedconnects
}

// RemoveConnectIDs removes the "connects" edge to the FRIENDS entity by IDs.
func (m *USERSMutation) RemoveConnectIDs(ids ...int) {
	if m.removedconnects == nil {
		m.removedconnects = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.connects, ids[i])
		m.removedconnects[ids[i]] = struct{}{}
	}
}

// RemovedConnects returns the removed IDs of the "connects" edge to the FRIENDS entity.
func (m *USERSMutation) RemovedConnectsIDs() (ids []int) {
	for id := range m.removedconnects {
		ids = append(ids, id)
	}
	return
}

// ConnectsIDs returns the "connects" edge IDs in the mutation.
func (m *USERSMutation) ConnectsIDs() (ids []int) {
	for id := range m.connects {
		ids = append(ids, id)
	}
	return
}

// ResetConnects resets all changes to the "connects" edge.
func (m *USERSMutation) ResetConnects() {
	m.connects = nil
	m.clearedconnects = false
	m.removedconnects = nil
}

// AddParticipateIDs adds the "participates" edge to the MATCHINGS entity by ids.
func (m *USERSMutation) AddParticipateIDs(ids ...int) {
	if m.participates == nil {
		m.participates = make(map[int]struct{})
	}
	for i := range ids {
		m.participates[ids[i]] = struct{}{}
	}
}

// ClearParticipates clears the "participates" edge to the MATCHINGS entity.
func (m *USERSMutation) ClearParticipates() {
	m.clearedparticipates = true
}

// ParticipatesCleared reports if the "participates" edge to the MATCHINGS entity was cleared.
func (m *USERSMutation) ParticipatesCleared() bool {
	return m.clearedparticipates
}

// RemoveParticipateIDs removes the "participates" edge to the MATCHINGS entity by IDs.
func (m *USERSMutation) RemoveParticipateIDs(ids ...int) {
	if m.removedparticipates == nil {
		m.removedparticipates = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.participates, ids[i])
		m.removedparticipates[ids[i]] = struct{}{}
	}
}

// RemovedParticipates returns the removed IDs of the "participates" edge to the MATCHINGS entity.
func (m *USERSMutation) RemovedParticipatesIDs() (ids []int) {
	for id := range m.removedparticipates {
		ids = append(ids, id)
	}
	return
}

// ParticipatesIDs returns the "participates" edge IDs in the mutation.
func (m *USERSMutation) ParticipatesIDs() (ids []int) {
	for id := range m.participates {
		ids = append(ids, id)
	}
	return
}

// ResetParticipates resets all changes to the "participates" edge.
func (m *USERSMutation) ResetParticipates() {
	m.participates = nil
	m.clearedparticipates = false
	m.removedparticipates = nil
}

// SetPreparesID sets the "prepares" edge to the MEMOS entity by id.
func (m *USERSMutation) SetPreparesID(id int) {
	m.prepares = &id
}

// ClearPrepares clears the "prepares" edge to the MEMOS entity.
func (m *USERSMutation) ClearPrepares() {
	m.clearedprepares = true
}

// PreparesCleared reports if the "prepares" edge to the MEMOS entity was cleared.
func (m *USERSMutation) PreparesCleared() bool {
	return m.clearedprepares
}

// PreparesID returns the "prepares" edge ID in the mutation.
func (m *USERSMutation) PreparesID() (id int, exists bool) {
	if m.prepares != nil {
		return *m.prepares, true
	}
	return
}

// PreparesIDs returns the "prepares" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// PreparesID instead. It exists only for internal usage by the builders.
func (m *USERSMutation) PreparesIDs() (ids []int) {
	if id := m.prepares; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetPrepares resets all changes to the "prepares" edge.
func (m *USERSMutation) ResetPrepares() {
	m.prepares = nil
	m.clearedprepares = false
}

// Where appends a list predicates to the USERSMutation builder.
func (m *USERSMutation) Where(ps ...predicate.USERS) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the USERSMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *USERSMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.USERS, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *USERSMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *USERSMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (USERS).
func (m *USERSMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *USERSMutation) Fields() []string {
	fields := make([]string, 0, 9)
	if m.user_id != nil {
		fields = append(fields, users.FieldUserID)
	}
	if m.username != nil {
		fields = append(fields, users.FieldUsername)
	}
	if m.email != nil {
		fields = append(fields, users.FieldEmail)
	}
	if m.avatar_url != nil {
		fields = append(fields, users.FieldAvatarURL)
	}
	if m.role != nil {
		fields = append(fields, users.FieldRole)
	}
	if m.created_at != nil {
		fields = append(fields, users.FieldCreatedAt)
	}
	if m.is_deleted != nil {
		fields = append(fields, users.FieldIsDeleted)
	}
	if m.updated_at != nil {
		fields = append(fields, users.FieldUpdatedAt)
	}
	if m.access_token != nil {
		fields = append(fields, users.FieldAccessToken)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *USERSMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case users.FieldUserID:
		return m.UserID()
	case users.FieldUsername:
		return m.Username()
	case users.FieldEmail:
		return m.Email()
	case users.FieldAvatarURL:
		return m.AvatarURL()
	case users.FieldRole:
		return m.Role()
	case users.FieldCreatedAt:
		return m.CreatedAt()
	case users.FieldIsDeleted:
		return m.IsDeleted()
	case users.FieldUpdatedAt:
		return m.UpdatedAt()
	case users.FieldAccessToken:
		return m.AccessToken()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *USERSMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case users.FieldUserID:
		return m.OldUserID(ctx)
	case users.FieldUsername:
		return m.OldUsername(ctx)
	case users.FieldEmail:
		return m.OldEmail(ctx)
	case users.FieldAvatarURL:
		return m.OldAvatarURL(ctx)
	case users.FieldRole:
		return m.OldRole(ctx)
	case users.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case users.FieldIsDeleted:
		return m.OldIsDeleted(ctx)
	case users.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case users.FieldAccessToken:
		return m.OldAccessToken(ctx)
	}
	return nil, fmt.Errorf("unknown USERS field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *USERSMutation) SetField(name string, value ent.Value) error {
	switch name {
	case users.FieldUserID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUserID(v)
		return nil
	case users.FieldUsername:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUsername(v)
		return nil
	case users.FieldEmail:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEmail(v)
		return nil
	case users.FieldAvatarURL:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAvatarURL(v)
		return nil
	case users.FieldRole:
		v, ok := value.(users.Role)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRole(v)
		return nil
	case users.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case users.FieldIsDeleted:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsDeleted(v)
		return nil
	case users.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case users.FieldAccessToken:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAccessToken(v)
		return nil
	}
	return fmt.Errorf("unknown USERS field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *USERSMutation) AddedFields() []string {
	var fields []string
	if m.adduser_id != nil {
		fields = append(fields, users.FieldUserID)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *USERSMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case users.FieldUserID:
		return m.AddedUserID()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *USERSMutation) AddField(name string, value ent.Value) error {
	switch name {
	case users.FieldUserID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddUserID(v)
		return nil
	}
	return fmt.Errorf("unknown USERS numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *USERSMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(users.FieldAvatarURL) {
		fields = append(fields, users.FieldAvatarURL)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *USERSMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *USERSMutation) ClearField(name string) error {
	switch name {
	case users.FieldAvatarURL:
		m.ClearAvatarURL()
		return nil
	}
	return fmt.Errorf("unknown USERS nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *USERSMutation) ResetField(name string) error {
	switch name {
	case users.FieldUserID:
		m.ResetUserID()
		return nil
	case users.FieldUsername:
		m.ResetUsername()
		return nil
	case users.FieldEmail:
		m.ResetEmail()
		return nil
	case users.FieldAvatarURL:
		m.ResetAvatarURL()
		return nil
	case users.FieldRole:
		m.ResetRole()
		return nil
	case users.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case users.FieldIsDeleted:
		m.ResetIsDeleted()
		return nil
	case users.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case users.FieldAccessToken:
		m.ResetAccessToken()
		return nil
	}
	return fmt.Errorf("unknown USERS field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *USERSMutation) AddedEdges() []string {
	edges := make([]string, 0, 3)
	if m.connects != nil {
		edges = append(edges, users.EdgeConnects)
	}
	if m.participates != nil {
		edges = append(edges, users.EdgeParticipates)
	}
	if m.prepares != nil {
		edges = append(edges, users.EdgePrepares)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *USERSMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case users.EdgeConnects:
		ids := make([]ent.Value, 0, len(m.connects))
		for id := range m.connects {
			ids = append(ids, id)
		}
		return ids
	case users.EdgeParticipates:
		ids := make([]ent.Value, 0, len(m.participates))
		for id := range m.participates {
			ids = append(ids, id)
		}
		return ids
	case users.EdgePrepares:
		if id := m.prepares; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *USERSMutation) RemovedEdges() []string {
	edges := make([]string, 0, 3)
	if m.removedconnects != nil {
		edges = append(edges, users.EdgeConnects)
	}
	if m.removedparticipates != nil {
		edges = append(edges, users.EdgeParticipates)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *USERSMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case users.EdgeConnects:
		ids := make([]ent.Value, 0, len(m.removedconnects))
		for id := range m.removedconnects {
			ids = append(ids, id)
		}
		return ids
	case users.EdgeParticipates:
		ids := make([]ent.Value, 0, len(m.removedparticipates))
		for id := range m.removedparticipates {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *USERSMutation) ClearedEdges() []string {
	edges := make([]string, 0, 3)
	if m.clearedconnects {
		edges = append(edges, users.EdgeConnects)
	}
	if m.clearedparticipates {
		edges = append(edges, users.EdgeParticipates)
	}
	if m.clearedprepares {
		edges = append(edges, users.EdgePrepares)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *USERSMutation) EdgeCleared(name string) bool {
	switch name {
	case users.EdgeConnects:
		return m.clearedconnects
	case users.EdgeParticipates:
		return m.clearedparticipates
	case users.EdgePrepares:
		return m.clearedprepares
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *USERSMutation) ClearEdge(name string) error {
	switch name {
	case users.EdgePrepares:
		m.ClearPrepares()
		return nil
	}
	return fmt.Errorf("unknown USERS unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *USERSMutation) ResetEdge(name string) error {
	switch name {
	case users.EdgeConnects:
		m.ResetConnects()
		return nil
	case users.EdgeParticipates:
		m.ResetParticipates()
		return nil
	case users.EdgePrepares:
		m.ResetPrepares()
		return nil
	}
	return fmt.Errorf("unknown USERS edge %s", name)
}
