// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/Hosi121/SpeakUp/ent/calls"
	"github.com/Hosi121/SpeakUp/ent/matchings"
)

// CALLS is the model entity for the CALLS schema.
type CALLS struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CallID holds the value of the "call_id" field.
	CallID int `json:"call_id,omitempty"`
	// SessionID holds the value of the "session_id" field.
	SessionID int `json:"session_id,omitempty"`
	// CallStart holds the value of the "call_start" field.
	CallStart time.Time `json:"call_start,omitempty"`
	// CallEnd holds the value of the "call_end" field.
	CallEnd time.Time `json:"call_end,omitempty"`
	// Rating holds the value of the "rating" field.
	Rating int `json:"rating,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the CALLSQuery when eager-loading is set.
	Edges           CALLSEdges `json:"edges"`
	matchings_makes *int
	selectValues    sql.SelectValues
}

// CALLSEdges holds the relations/edges for other nodes in the graph.
type CALLSEdges struct {
	// Made holds the value of the made edge.
	Made *MATCHINGS `json:"made,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// MadeOrErr returns the Made value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CALLSEdges) MadeOrErr() (*MATCHINGS, error) {
	if e.Made != nil {
		return e.Made, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: matchings.Label}
	}
	return nil, &NotLoadedError{edge: "made"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*CALLS) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case calls.FieldID, calls.FieldCallID, calls.FieldSessionID, calls.FieldRating:
			values[i] = new(sql.NullInt64)
		case calls.FieldCallStart, calls.FieldCallEnd, calls.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		case calls.ForeignKeys[0]: // matchings_makes
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the CALLS fields.
func (c *CALLS) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case calls.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			c.ID = int(value.Int64)
		case calls.FieldCallID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field call_id", values[i])
			} else if value.Valid {
				c.CallID = int(value.Int64)
			}
		case calls.FieldSessionID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field session_id", values[i])
			} else if value.Valid {
				c.SessionID = int(value.Int64)
			}
		case calls.FieldCallStart:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field call_start", values[i])
			} else if value.Valid {
				c.CallStart = value.Time
			}
		case calls.FieldCallEnd:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field call_end", values[i])
			} else if value.Valid {
				c.CallEnd = value.Time
			}
		case calls.FieldRating:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field rating", values[i])
			} else if value.Valid {
				c.Rating = int(value.Int64)
			}
		case calls.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				c.CreatedAt = value.Time
			}
		case calls.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field matchings_makes", value)
			} else if value.Valid {
				c.matchings_makes = new(int)
				*c.matchings_makes = int(value.Int64)
			}
		default:
			c.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the CALLS.
// This includes values selected through modifiers, order, etc.
func (c *CALLS) Value(name string) (ent.Value, error) {
	return c.selectValues.Get(name)
}

// QueryMade queries the "made" edge of the CALLS entity.
func (c *CALLS) QueryMade() *MATCHINGSQuery {
	return NewCALLSClient(c.config).QueryMade(c)
}

// Update returns a builder for updating this CALLS.
// Note that you need to call CALLS.Unwrap() before calling this method if this CALLS
// was returned from a transaction, and the transaction was committed or rolled back.
func (c *CALLS) Update() *CALLSUpdateOne {
	return NewCALLSClient(c.config).UpdateOne(c)
}

// Unwrap unwraps the CALLS entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (c *CALLS) Unwrap() *CALLS {
	_tx, ok := c.config.driver.(*txDriver)
	if !ok {
		panic("ent: CALLS is not a transactional entity")
	}
	c.config.driver = _tx.drv
	return c
}

// String implements the fmt.Stringer.
func (c *CALLS) String() string {
	var builder strings.Builder
	builder.WriteString("CALLS(")
	builder.WriteString(fmt.Sprintf("id=%v, ", c.ID))
	builder.WriteString("call_id=")
	builder.WriteString(fmt.Sprintf("%v", c.CallID))
	builder.WriteString(", ")
	builder.WriteString("session_id=")
	builder.WriteString(fmt.Sprintf("%v", c.SessionID))
	builder.WriteString(", ")
	builder.WriteString("call_start=")
	builder.WriteString(c.CallStart.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("call_end=")
	builder.WriteString(c.CallEnd.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("rating=")
	builder.WriteString(fmt.Sprintf("%v", c.Rating))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(c.CreatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// CALLSs is a parsable slice of CALLS.
type CALLSs []*CALLS
