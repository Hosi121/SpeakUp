// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Hosi121/SpeakUp/ent/memos"
	"github.com/Hosi121/SpeakUp/ent/predicate"
	"github.com/Hosi121/SpeakUp/ent/users"
)

// MEMOSUpdate is the builder for updating MEMOS entities.
type MEMOSUpdate struct {
	config
	hooks    []Hook
	mutation *MEMOSMutation
}

// Where appends a list predicates to the MEMOSUpdate builder.
func (mu *MEMOSUpdate) Where(ps ...predicate.MEMOS) *MEMOSUpdate {
	mu.mutation.Where(ps...)
	return mu
}

// SetMemoID sets the "memo_id" field.
func (mu *MEMOSUpdate) SetMemoID(i int) *MEMOSUpdate {
	mu.mutation.ResetMemoID()
	mu.mutation.SetMemoID(i)
	return mu
}

// SetNillableMemoID sets the "memo_id" field if the given value is not nil.
func (mu *MEMOSUpdate) SetNillableMemoID(i *int) *MEMOSUpdate {
	if i != nil {
		mu.SetMemoID(*i)
	}
	return mu
}

// AddMemoID adds i to the "memo_id" field.
func (mu *MEMOSUpdate) AddMemoID(i int) *MEMOSUpdate {
	mu.mutation.AddMemoID(i)
	return mu
}

// SetUserID sets the "user_id" field.
func (mu *MEMOSUpdate) SetUserID(i int) *MEMOSUpdate {
	mu.mutation.ResetUserID()
	mu.mutation.SetUserID(i)
	return mu
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (mu *MEMOSUpdate) SetNillableUserID(i *int) *MEMOSUpdate {
	if i != nil {
		mu.SetUserID(*i)
	}
	return mu
}

// AddUserID adds i to the "user_id" field.
func (mu *MEMOSUpdate) AddUserID(i int) *MEMOSUpdate {
	mu.mutation.AddUserID(i)
	return mu
}

// SetMemo1 sets the "memo1" field.
func (mu *MEMOSUpdate) SetMemo1(s string) *MEMOSUpdate {
	mu.mutation.SetMemo1(s)
	return mu
}

// SetNillableMemo1 sets the "memo1" field if the given value is not nil.
func (mu *MEMOSUpdate) SetNillableMemo1(s *string) *MEMOSUpdate {
	if s != nil {
		mu.SetMemo1(*s)
	}
	return mu
}

// SetMemo2 sets the "memo2" field.
func (mu *MEMOSUpdate) SetMemo2(s string) *MEMOSUpdate {
	mu.mutation.SetMemo2(s)
	return mu
}

// SetNillableMemo2 sets the "memo2" field if the given value is not nil.
func (mu *MEMOSUpdate) SetNillableMemo2(s *string) *MEMOSUpdate {
	if s != nil {
		mu.SetMemo2(*s)
	}
	return mu
}

// SetPreparedID sets the "prepared" edge to the USERS entity by ID.
func (mu *MEMOSUpdate) SetPreparedID(id int) *MEMOSUpdate {
	mu.mutation.SetPreparedID(id)
	return mu
}

// SetNillablePreparedID sets the "prepared" edge to the USERS entity by ID if the given value is not nil.
func (mu *MEMOSUpdate) SetNillablePreparedID(id *int) *MEMOSUpdate {
	if id != nil {
		mu = mu.SetPreparedID(*id)
	}
	return mu
}

// SetPrepared sets the "prepared" edge to the USERS entity.
func (mu *MEMOSUpdate) SetPrepared(u *USERS) *MEMOSUpdate {
	return mu.SetPreparedID(u.ID)
}

// Mutation returns the MEMOSMutation object of the builder.
func (mu *MEMOSUpdate) Mutation() *MEMOSMutation {
	return mu.mutation
}

// ClearPrepared clears the "prepared" edge to the USERS entity.
func (mu *MEMOSUpdate) ClearPrepared() *MEMOSUpdate {
	mu.mutation.ClearPrepared()
	return mu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (mu *MEMOSUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, mu.sqlSave, mu.mutation, mu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (mu *MEMOSUpdate) SaveX(ctx context.Context) int {
	affected, err := mu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (mu *MEMOSUpdate) Exec(ctx context.Context) error {
	_, err := mu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mu *MEMOSUpdate) ExecX(ctx context.Context) {
	if err := mu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mu *MEMOSUpdate) check() error {
	if v, ok := mu.mutation.Memo1(); ok {
		if err := memos.Memo1Validator(v); err != nil {
			return &ValidationError{Name: "memo1", err: fmt.Errorf(`ent: validator failed for field "MEMOS.memo1": %w`, err)}
		}
	}
	if v, ok := mu.mutation.Memo2(); ok {
		if err := memos.Memo2Validator(v); err != nil {
			return &ValidationError{Name: "memo2", err: fmt.Errorf(`ent: validator failed for field "MEMOS.memo2": %w`, err)}
		}
	}
	return nil
}

func (mu *MEMOSUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := mu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(memos.Table, memos.Columns, sqlgraph.NewFieldSpec(memos.FieldID, field.TypeInt))
	if ps := mu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := mu.mutation.MemoID(); ok {
		_spec.SetField(memos.FieldMemoID, field.TypeInt, value)
	}
	if value, ok := mu.mutation.AddedMemoID(); ok {
		_spec.AddField(memos.FieldMemoID, field.TypeInt, value)
	}
	if value, ok := mu.mutation.UserID(); ok {
		_spec.SetField(memos.FieldUserID, field.TypeInt, value)
	}
	if value, ok := mu.mutation.AddedUserID(); ok {
		_spec.AddField(memos.FieldUserID, field.TypeInt, value)
	}
	if value, ok := mu.mutation.Memo1(); ok {
		_spec.SetField(memos.FieldMemo1, field.TypeString, value)
	}
	if value, ok := mu.mutation.Memo2(); ok {
		_spec.SetField(memos.FieldMemo2, field.TypeString, value)
	}
	if mu.mutation.PreparedCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   memos.PreparedTable,
			Columns: []string{memos.PreparedColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(users.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.PreparedIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   memos.PreparedTable,
			Columns: []string{memos.PreparedColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(users.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, mu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{memos.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	mu.mutation.done = true
	return n, nil
}

// MEMOSUpdateOne is the builder for updating a single MEMOS entity.
type MEMOSUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *MEMOSMutation
}

// SetMemoID sets the "memo_id" field.
func (muo *MEMOSUpdateOne) SetMemoID(i int) *MEMOSUpdateOne {
	muo.mutation.ResetMemoID()
	muo.mutation.SetMemoID(i)
	return muo
}

// SetNillableMemoID sets the "memo_id" field if the given value is not nil.
func (muo *MEMOSUpdateOne) SetNillableMemoID(i *int) *MEMOSUpdateOne {
	if i != nil {
		muo.SetMemoID(*i)
	}
	return muo
}

// AddMemoID adds i to the "memo_id" field.
func (muo *MEMOSUpdateOne) AddMemoID(i int) *MEMOSUpdateOne {
	muo.mutation.AddMemoID(i)
	return muo
}

// SetUserID sets the "user_id" field.
func (muo *MEMOSUpdateOne) SetUserID(i int) *MEMOSUpdateOne {
	muo.mutation.ResetUserID()
	muo.mutation.SetUserID(i)
	return muo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (muo *MEMOSUpdateOne) SetNillableUserID(i *int) *MEMOSUpdateOne {
	if i != nil {
		muo.SetUserID(*i)
	}
	return muo
}

// AddUserID adds i to the "user_id" field.
func (muo *MEMOSUpdateOne) AddUserID(i int) *MEMOSUpdateOne {
	muo.mutation.AddUserID(i)
	return muo
}

// SetMemo1 sets the "memo1" field.
func (muo *MEMOSUpdateOne) SetMemo1(s string) *MEMOSUpdateOne {
	muo.mutation.SetMemo1(s)
	return muo
}

// SetNillableMemo1 sets the "memo1" field if the given value is not nil.
func (muo *MEMOSUpdateOne) SetNillableMemo1(s *string) *MEMOSUpdateOne {
	if s != nil {
		muo.SetMemo1(*s)
	}
	return muo
}

// SetMemo2 sets the "memo2" field.
func (muo *MEMOSUpdateOne) SetMemo2(s string) *MEMOSUpdateOne {
	muo.mutation.SetMemo2(s)
	return muo
}

// SetNillableMemo2 sets the "memo2" field if the given value is not nil.
func (muo *MEMOSUpdateOne) SetNillableMemo2(s *string) *MEMOSUpdateOne {
	if s != nil {
		muo.SetMemo2(*s)
	}
	return muo
}

// SetPreparedID sets the "prepared" edge to the USERS entity by ID.
func (muo *MEMOSUpdateOne) SetPreparedID(id int) *MEMOSUpdateOne {
	muo.mutation.SetPreparedID(id)
	return muo
}

// SetNillablePreparedID sets the "prepared" edge to the USERS entity by ID if the given value is not nil.
func (muo *MEMOSUpdateOne) SetNillablePreparedID(id *int) *MEMOSUpdateOne {
	if id != nil {
		muo = muo.SetPreparedID(*id)
	}
	return muo
}

// SetPrepared sets the "prepared" edge to the USERS entity.
func (muo *MEMOSUpdateOne) SetPrepared(u *USERS) *MEMOSUpdateOne {
	return muo.SetPreparedID(u.ID)
}

// Mutation returns the MEMOSMutation object of the builder.
func (muo *MEMOSUpdateOne) Mutation() *MEMOSMutation {
	return muo.mutation
}

// ClearPrepared clears the "prepared" edge to the USERS entity.
func (muo *MEMOSUpdateOne) ClearPrepared() *MEMOSUpdateOne {
	muo.mutation.ClearPrepared()
	return muo
}

// Where appends a list predicates to the MEMOSUpdate builder.
func (muo *MEMOSUpdateOne) Where(ps ...predicate.MEMOS) *MEMOSUpdateOne {
	muo.mutation.Where(ps...)
	return muo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (muo *MEMOSUpdateOne) Select(field string, fields ...string) *MEMOSUpdateOne {
	muo.fields = append([]string{field}, fields...)
	return muo
}

// Save executes the query and returns the updated MEMOS entity.
func (muo *MEMOSUpdateOne) Save(ctx context.Context) (*MEMOS, error) {
	return withHooks(ctx, muo.sqlSave, muo.mutation, muo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (muo *MEMOSUpdateOne) SaveX(ctx context.Context) *MEMOS {
	node, err := muo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (muo *MEMOSUpdateOne) Exec(ctx context.Context) error {
	_, err := muo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (muo *MEMOSUpdateOne) ExecX(ctx context.Context) {
	if err := muo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (muo *MEMOSUpdateOne) check() error {
	if v, ok := muo.mutation.Memo1(); ok {
		if err := memos.Memo1Validator(v); err != nil {
			return &ValidationError{Name: "memo1", err: fmt.Errorf(`ent: validator failed for field "MEMOS.memo1": %w`, err)}
		}
	}
	if v, ok := muo.mutation.Memo2(); ok {
		if err := memos.Memo2Validator(v); err != nil {
			return &ValidationError{Name: "memo2", err: fmt.Errorf(`ent: validator failed for field "MEMOS.memo2": %w`, err)}
		}
	}
	return nil
}

func (muo *MEMOSUpdateOne) sqlSave(ctx context.Context) (_node *MEMOS, err error) {
	if err := muo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(memos.Table, memos.Columns, sqlgraph.NewFieldSpec(memos.FieldID, field.TypeInt))
	id, ok := muo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "MEMOS.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := muo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, memos.FieldID)
		for _, f := range fields {
			if !memos.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != memos.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := muo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := muo.mutation.MemoID(); ok {
		_spec.SetField(memos.FieldMemoID, field.TypeInt, value)
	}
	if value, ok := muo.mutation.AddedMemoID(); ok {
		_spec.AddField(memos.FieldMemoID, field.TypeInt, value)
	}
	if value, ok := muo.mutation.UserID(); ok {
		_spec.SetField(memos.FieldUserID, field.TypeInt, value)
	}
	if value, ok := muo.mutation.AddedUserID(); ok {
		_spec.AddField(memos.FieldUserID, field.TypeInt, value)
	}
	if value, ok := muo.mutation.Memo1(); ok {
		_spec.SetField(memos.FieldMemo1, field.TypeString, value)
	}
	if value, ok := muo.mutation.Memo2(); ok {
		_spec.SetField(memos.FieldMemo2, field.TypeString, value)
	}
	if muo.mutation.PreparedCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   memos.PreparedTable,
			Columns: []string{memos.PreparedColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(users.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.PreparedIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   memos.PreparedTable,
			Columns: []string{memos.PreparedColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(users.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &MEMOS{config: muo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, muo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{memos.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	muo.mutation.done = true
	return _node, nil
}
