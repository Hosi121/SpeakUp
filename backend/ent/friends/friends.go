// Code generated by ent, DO NOT EDIT.

package friends

import (
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the friends type in the database.
	Label = "friends"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldUserID holds the string denoting the user_id field in the database.
	FieldUserID = "user_id"
	// FieldTargetUserID holds the string denoting the target_user_id field in the database.
	FieldTargetUserID = "target_user_id"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// EdgeConnects holds the string denoting the connects edge name in mutations.
	EdgeConnects = "connects"
	// EdgeHas holds the string denoting the has edge name in mutations.
	EdgeHas = "has"
	// Table holds the table name of the friends in the database.
	Table = "friend_ss"
	// ConnectsTable is the table that holds the connects relation/edge. The primary key declared below.
	ConnectsTable = "users_connects"
	// ConnectsInverseTable is the table name for the USERS entity.
	// It exists in this package in order to avoid circular dependency with the "users" package.
	ConnectsInverseTable = "user_ss"
	// HasTable is the table that holds the has relation/edge.
	HasTable = "chat_ss"
	// HasInverseTable is the table name for the CHATS entity.
	// It exists in this package in order to avoid circular dependency with the "chats" package.
	HasInverseTable = "chat_ss"
	// HasColumn is the table column denoting the has relation/edge.
	HasColumn = "friends_has"
)

// Columns holds all SQL columns for friends fields.
var Columns = []string{
	FieldID,
	FieldUserID,
	FieldTargetUserID,
	FieldStatus,
	FieldCreatedAt,
}

var (
	// ConnectsPrimaryKey and ConnectsColumn2 are the table columns denoting the
	// primary key for the connects relation (M2M).
	ConnectsPrimaryKey = []string{"users_id", "friends_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
)

// Status defines the type for the "status" enum field.
type Status string

// Status values.
const (
	StatusPENDING Status = "PENDING"
	StatusFRIEND  Status = "FRIEND"
	StatusBLOCKED Status = "BLOCKED"
)

func (s Status) String() string {
	return string(s)
}

// StatusValidator is a validator for the "status" field enum values. It is called by the builders before save.
func StatusValidator(s Status) error {
	switch s {
	case StatusPENDING, StatusFRIEND, StatusBLOCKED:
		return nil
	default:
		return fmt.Errorf("friends: invalid enum value for status field: %q", s)
	}
}

// OrderOption defines the ordering options for the FRIENDS queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByUserID orders the results by the user_id field.
func ByUserID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUserID, opts...).ToFunc()
}

// ByTargetUserID orders the results by the target_user_id field.
func ByTargetUserID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTargetUserID, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByConnectsCount orders the results by connects count.
func ByConnectsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newConnectsStep(), opts...)
	}
}

// ByConnects orders the results by connects terms.
func ByConnects(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newConnectsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByHasCount orders the results by has count.
func ByHasCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newHasStep(), opts...)
	}
}

// ByHas orders the results by has terms.
func ByHas(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newHasStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newConnectsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ConnectsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, ConnectsTable, ConnectsPrimaryKey...),
	)
}
func newHasStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(HasInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, HasTable, HasColumn),
	)
}
