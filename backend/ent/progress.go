// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/Hosi121/SpeakUp/ent/progress"
	"github.com/Hosi121/SpeakUp/ent/users"
)

// PROGRESS is the model entity for the PROGRESS schema.
type PROGRESS struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// UserID holds the value of the "user_id" field.
	UserID int `json:"user_id,omitempty"`
	// LoginDays holds the value of the "login_days" field.
	LoginDays int `json:"login_days,omitempty"`
	// ConsecutiveParticipants holds the value of the "consecutive_participants" field.
	ConsecutiveParticipants int `json:"consecutive_participants,omitempty"`
	// ConsecutiveLoginDays holds the value of the "consecutive_login_days" field.
	ConsecutiveLoginDays int `json:"consecutive_login_days,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the PROGRESSQuery when eager-loading is set.
	Edges         PROGRESSEdges `json:"edges"`
	users_records *int
	selectValues  sql.SelectValues
}

// PROGRESSEdges holds the relations/edges for other nodes in the graph.
type PROGRESSEdges struct {
	// Recorded holds the value of the recorded edge.
	Recorded *USERS `json:"recorded,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// RecordedOrErr returns the Recorded value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PROGRESSEdges) RecordedOrErr() (*USERS, error) {
	if e.Recorded != nil {
		return e.Recorded, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: users.Label}
	}
	return nil, &NotLoadedError{edge: "recorded"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*PROGRESS) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case progress.FieldID, progress.FieldUserID, progress.FieldLoginDays, progress.FieldConsecutiveParticipants, progress.FieldConsecutiveLoginDays:
			values[i] = new(sql.NullInt64)
		case progress.ForeignKeys[0]: // users_records
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the PROGRESS fields.
func (pr *PROGRESS) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case progress.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			pr.ID = int(value.Int64)
		case progress.FieldUserID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				pr.UserID = int(value.Int64)
			}
		case progress.FieldLoginDays:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field login_days", values[i])
			} else if value.Valid {
				pr.LoginDays = int(value.Int64)
			}
		case progress.FieldConsecutiveParticipants:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field consecutive_participants", values[i])
			} else if value.Valid {
				pr.ConsecutiveParticipants = int(value.Int64)
			}
		case progress.FieldConsecutiveLoginDays:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field consecutive_login_days", values[i])
			} else if value.Valid {
				pr.ConsecutiveLoginDays = int(value.Int64)
			}
		case progress.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field users_records", value)
			} else if value.Valid {
				pr.users_records = new(int)
				*pr.users_records = int(value.Int64)
			}
		default:
			pr.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the PROGRESS.
// This includes values selected through modifiers, order, etc.
func (pr *PROGRESS) Value(name string) (ent.Value, error) {
	return pr.selectValues.Get(name)
}

// QueryRecorded queries the "recorded" edge of the PROGRESS entity.
func (pr *PROGRESS) QueryRecorded() *USERSQuery {
	return NewPROGRESSClient(pr.config).QueryRecorded(pr)
}

// Update returns a builder for updating this PROGRESS.
// Note that you need to call PROGRESS.Unwrap() before calling this method if this PROGRESS
// was returned from a transaction, and the transaction was committed or rolled back.
func (pr *PROGRESS) Update() *PROGRESSUpdateOne {
	return NewPROGRESSClient(pr.config).UpdateOne(pr)
}

// Unwrap unwraps the PROGRESS entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pr *PROGRESS) Unwrap() *PROGRESS {
	_tx, ok := pr.config.driver.(*txDriver)
	if !ok {
		panic("ent: PROGRESS is not a transactional entity")
	}
	pr.config.driver = _tx.drv
	return pr
}

// String implements the fmt.Stringer.
func (pr *PROGRESS) String() string {
	var builder strings.Builder
	builder.WriteString("PROGRESS(")
	builder.WriteString(fmt.Sprintf("id=%v, ", pr.ID))
	builder.WriteString("user_id=")
	builder.WriteString(fmt.Sprintf("%v", pr.UserID))
	builder.WriteString(", ")
	builder.WriteString("login_days=")
	builder.WriteString(fmt.Sprintf("%v", pr.LoginDays))
	builder.WriteString(", ")
	builder.WriteString("consecutive_participants=")
	builder.WriteString(fmt.Sprintf("%v", pr.ConsecutiveParticipants))
	builder.WriteString(", ")
	builder.WriteString("consecutive_login_days=")
	builder.WriteString(fmt.Sprintf("%v", pr.ConsecutiveLoginDays))
	builder.WriteByte(')')
	return builder.String()
}

// PROGRESSs is a parsable slice of PROGRESS.
type PROGRESSs []*PROGRESS
