// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Hosi121/SpeakUp/ent/calls"
	"github.com/Hosi121/SpeakUp/ent/matchings"
	"github.com/Hosi121/SpeakUp/ent/predicate"
	"github.com/Hosi121/SpeakUp/ent/sessions"
	"github.com/Hosi121/SpeakUp/ent/users"
)

// MATCHINGSUpdate is the builder for updating MATCHINGS entities.
type MATCHINGSUpdate struct {
	config
	hooks    []Hook
	mutation *MATCHINGSMutation
}

// Where appends a list predicates to the MATCHINGSUpdate builder.
func (mu *MATCHINGSUpdate) Where(ps ...predicate.MATCHINGS) *MATCHINGSUpdate {
	mu.mutation.Where(ps...)
	return mu
}

// SetMatchID sets the "match_id" field.
func (mu *MATCHINGSUpdate) SetMatchID(i int) *MATCHINGSUpdate {
	mu.mutation.ResetMatchID()
	mu.mutation.SetMatchID(i)
	return mu
}

// SetNillableMatchID sets the "match_id" field if the given value is not nil.
func (mu *MATCHINGSUpdate) SetNillableMatchID(i *int) *MATCHINGSUpdate {
	if i != nil {
		mu.SetMatchID(*i)
	}
	return mu
}

// AddMatchID adds i to the "match_id" field.
func (mu *MATCHINGSUpdate) AddMatchID(i int) *MATCHINGSUpdate {
	mu.mutation.AddMatchID(i)
	return mu
}

// SetUserID sets the "user_id" field.
func (mu *MATCHINGSUpdate) SetUserID(i int) *MATCHINGSUpdate {
	mu.mutation.ResetUserID()
	mu.mutation.SetUserID(i)
	return mu
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (mu *MATCHINGSUpdate) SetNillableUserID(i *int) *MATCHINGSUpdate {
	if i != nil {
		mu.SetUserID(*i)
	}
	return mu
}

// AddUserID adds i to the "user_id" field.
func (mu *MATCHINGSUpdate) AddUserID(i int) *MATCHINGSUpdate {
	mu.mutation.AddUserID(i)
	return mu
}

// SetMatchedUserID sets the "matched_user_id" field.
func (mu *MATCHINGSUpdate) SetMatchedUserID(i int) *MATCHINGSUpdate {
	mu.mutation.ResetMatchedUserID()
	mu.mutation.SetMatchedUserID(i)
	return mu
}

// SetNillableMatchedUserID sets the "matched_user_id" field if the given value is not nil.
func (mu *MATCHINGSUpdate) SetNillableMatchedUserID(i *int) *MATCHINGSUpdate {
	if i != nil {
		mu.SetMatchedUserID(*i)
	}
	return mu
}

// AddMatchedUserID adds i to the "matched_user_id" field.
func (mu *MATCHINGSUpdate) AddMatchedUserID(i int) *MATCHINGSUpdate {
	mu.mutation.AddMatchedUserID(i)
	return mu
}

// SetSessionID sets the "session_id" field.
func (mu *MATCHINGSUpdate) SetSessionID(i int) *MATCHINGSUpdate {
	mu.mutation.ResetSessionID()
	mu.mutation.SetSessionID(i)
	return mu
}

// SetNillableSessionID sets the "session_id" field if the given value is not nil.
func (mu *MATCHINGSUpdate) SetNillableSessionID(i *int) *MATCHINGSUpdate {
	if i != nil {
		mu.SetSessionID(*i)
	}
	return mu
}

// AddSessionID adds i to the "session_id" field.
func (mu *MATCHINGSUpdate) AddSessionID(i int) *MATCHINGSUpdate {
	mu.mutation.AddSessionID(i)
	return mu
}

// SetMatchedAt sets the "matched_at" field.
func (mu *MATCHINGSUpdate) SetMatchedAt(t time.Time) *MATCHINGSUpdate {
	mu.mutation.SetMatchedAt(t)
	return mu
}

// SetNillableMatchedAt sets the "matched_at" field if the given value is not nil.
func (mu *MATCHINGSUpdate) SetNillableMatchedAt(t *time.Time) *MATCHINGSUpdate {
	if t != nil {
		mu.SetMatchedAt(*t)
	}
	return mu
}

// SetStatus sets the "status" field.
func (mu *MATCHINGSUpdate) SetStatus(m matchings.Status) *MATCHINGSUpdate {
	mu.mutation.SetStatus(m)
	return mu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (mu *MATCHINGSUpdate) SetNillableStatus(m *matchings.Status) *MATCHINGSUpdate {
	if m != nil {
		mu.SetStatus(*m)
	}
	return mu
}

// AddMemberIDs adds the "member" edge to the USERS entity by IDs.
func (mu *MATCHINGSUpdate) AddMemberIDs(ids ...int) *MATCHINGSUpdate {
	mu.mutation.AddMemberIDs(ids...)
	return mu
}

// AddMember adds the "member" edges to the USERS entity.
func (mu *MATCHINGSUpdate) AddMember(u ...*USERS) *MATCHINGSUpdate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return mu.AddMemberIDs(ids...)
}

// SetHadID sets the "had" edge to the SESSIONS entity by ID.
func (mu *MATCHINGSUpdate) SetHadID(id int) *MATCHINGSUpdate {
	mu.mutation.SetHadID(id)
	return mu
}

// SetNillableHadID sets the "had" edge to the SESSIONS entity by ID if the given value is not nil.
func (mu *MATCHINGSUpdate) SetNillableHadID(id *int) *MATCHINGSUpdate {
	if id != nil {
		mu = mu.SetHadID(*id)
	}
	return mu
}

// SetHad sets the "had" edge to the SESSIONS entity.
func (mu *MATCHINGSUpdate) SetHad(s *SESSIONS) *MATCHINGSUpdate {
	return mu.SetHadID(s.ID)
}

// SetMakesID sets the "makes" edge to the CALLS entity by ID.
func (mu *MATCHINGSUpdate) SetMakesID(id int) *MATCHINGSUpdate {
	mu.mutation.SetMakesID(id)
	return mu
}

// SetNillableMakesID sets the "makes" edge to the CALLS entity by ID if the given value is not nil.
func (mu *MATCHINGSUpdate) SetNillableMakesID(id *int) *MATCHINGSUpdate {
	if id != nil {
		mu = mu.SetMakesID(*id)
	}
	return mu
}

// SetMakes sets the "makes" edge to the CALLS entity.
func (mu *MATCHINGSUpdate) SetMakes(c *CALLS) *MATCHINGSUpdate {
	return mu.SetMakesID(c.ID)
}

// Mutation returns the MATCHINGSMutation object of the builder.
func (mu *MATCHINGSUpdate) Mutation() *MATCHINGSMutation {
	return mu.mutation
}

// ClearMember clears all "member" edges to the USERS entity.
func (mu *MATCHINGSUpdate) ClearMember() *MATCHINGSUpdate {
	mu.mutation.ClearMember()
	return mu
}

// RemoveMemberIDs removes the "member" edge to USERS entities by IDs.
func (mu *MATCHINGSUpdate) RemoveMemberIDs(ids ...int) *MATCHINGSUpdate {
	mu.mutation.RemoveMemberIDs(ids...)
	return mu
}

// RemoveMember removes "member" edges to USERS entities.
func (mu *MATCHINGSUpdate) RemoveMember(u ...*USERS) *MATCHINGSUpdate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return mu.RemoveMemberIDs(ids...)
}

// ClearHad clears the "had" edge to the SESSIONS entity.
func (mu *MATCHINGSUpdate) ClearHad() *MATCHINGSUpdate {
	mu.mutation.ClearHad()
	return mu
}

// ClearMakes clears the "makes" edge to the CALLS entity.
func (mu *MATCHINGSUpdate) ClearMakes() *MATCHINGSUpdate {
	mu.mutation.ClearMakes()
	return mu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (mu *MATCHINGSUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, mu.sqlSave, mu.mutation, mu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (mu *MATCHINGSUpdate) SaveX(ctx context.Context) int {
	affected, err := mu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (mu *MATCHINGSUpdate) Exec(ctx context.Context) error {
	_, err := mu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mu *MATCHINGSUpdate) ExecX(ctx context.Context) {
	if err := mu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mu *MATCHINGSUpdate) check() error {
	if v, ok := mu.mutation.Status(); ok {
		if err := matchings.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "MATCHINGS.status": %w`, err)}
		}
	}
	return nil
}

func (mu *MATCHINGSUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := mu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(matchings.Table, matchings.Columns, sqlgraph.NewFieldSpec(matchings.FieldID, field.TypeInt))
	if ps := mu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := mu.mutation.MatchID(); ok {
		_spec.SetField(matchings.FieldMatchID, field.TypeInt, value)
	}
	if value, ok := mu.mutation.AddedMatchID(); ok {
		_spec.AddField(matchings.FieldMatchID, field.TypeInt, value)
	}
	if value, ok := mu.mutation.UserID(); ok {
		_spec.SetField(matchings.FieldUserID, field.TypeInt, value)
	}
	if value, ok := mu.mutation.AddedUserID(); ok {
		_spec.AddField(matchings.FieldUserID, field.TypeInt, value)
	}
	if value, ok := mu.mutation.MatchedUserID(); ok {
		_spec.SetField(matchings.FieldMatchedUserID, field.TypeInt, value)
	}
	if value, ok := mu.mutation.AddedMatchedUserID(); ok {
		_spec.AddField(matchings.FieldMatchedUserID, field.TypeInt, value)
	}
	if value, ok := mu.mutation.SessionID(); ok {
		_spec.SetField(matchings.FieldSessionID, field.TypeInt, value)
	}
	if value, ok := mu.mutation.AddedSessionID(); ok {
		_spec.AddField(matchings.FieldSessionID, field.TypeInt, value)
	}
	if value, ok := mu.mutation.MatchedAt(); ok {
		_spec.SetField(matchings.FieldMatchedAt, field.TypeTime, value)
	}
	if value, ok := mu.mutation.Status(); ok {
		_spec.SetField(matchings.FieldStatus, field.TypeEnum, value)
	}
	if mu.mutation.MemberCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   matchings.MemberTable,
			Columns: matchings.MemberPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(users.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.RemovedMemberIDs(); len(nodes) > 0 && !mu.mutation.MemberCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   matchings.MemberTable,
			Columns: matchings.MemberPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(users.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.MemberIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   matchings.MemberTable,
			Columns: matchings.MemberPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(users.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if mu.mutation.HadCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   matchings.HadTable,
			Columns: []string{matchings.HadColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sessions.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.HadIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   matchings.HadTable,
			Columns: []string{matchings.HadColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sessions.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if mu.mutation.MakesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   matchings.MakesTable,
			Columns: []string{matchings.MakesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(calls.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.MakesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   matchings.MakesTable,
			Columns: []string{matchings.MakesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(calls.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, mu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{matchings.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	mu.mutation.done = true
	return n, nil
}

// MATCHINGSUpdateOne is the builder for updating a single MATCHINGS entity.
type MATCHINGSUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *MATCHINGSMutation
}

// SetMatchID sets the "match_id" field.
func (muo *MATCHINGSUpdateOne) SetMatchID(i int) *MATCHINGSUpdateOne {
	muo.mutation.ResetMatchID()
	muo.mutation.SetMatchID(i)
	return muo
}

// SetNillableMatchID sets the "match_id" field if the given value is not nil.
func (muo *MATCHINGSUpdateOne) SetNillableMatchID(i *int) *MATCHINGSUpdateOne {
	if i != nil {
		muo.SetMatchID(*i)
	}
	return muo
}

// AddMatchID adds i to the "match_id" field.
func (muo *MATCHINGSUpdateOne) AddMatchID(i int) *MATCHINGSUpdateOne {
	muo.mutation.AddMatchID(i)
	return muo
}

// SetUserID sets the "user_id" field.
func (muo *MATCHINGSUpdateOne) SetUserID(i int) *MATCHINGSUpdateOne {
	muo.mutation.ResetUserID()
	muo.mutation.SetUserID(i)
	return muo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (muo *MATCHINGSUpdateOne) SetNillableUserID(i *int) *MATCHINGSUpdateOne {
	if i != nil {
		muo.SetUserID(*i)
	}
	return muo
}

// AddUserID adds i to the "user_id" field.
func (muo *MATCHINGSUpdateOne) AddUserID(i int) *MATCHINGSUpdateOne {
	muo.mutation.AddUserID(i)
	return muo
}

// SetMatchedUserID sets the "matched_user_id" field.
func (muo *MATCHINGSUpdateOne) SetMatchedUserID(i int) *MATCHINGSUpdateOne {
	muo.mutation.ResetMatchedUserID()
	muo.mutation.SetMatchedUserID(i)
	return muo
}

// SetNillableMatchedUserID sets the "matched_user_id" field if the given value is not nil.
func (muo *MATCHINGSUpdateOne) SetNillableMatchedUserID(i *int) *MATCHINGSUpdateOne {
	if i != nil {
		muo.SetMatchedUserID(*i)
	}
	return muo
}

// AddMatchedUserID adds i to the "matched_user_id" field.
func (muo *MATCHINGSUpdateOne) AddMatchedUserID(i int) *MATCHINGSUpdateOne {
	muo.mutation.AddMatchedUserID(i)
	return muo
}

// SetSessionID sets the "session_id" field.
func (muo *MATCHINGSUpdateOne) SetSessionID(i int) *MATCHINGSUpdateOne {
	muo.mutation.ResetSessionID()
	muo.mutation.SetSessionID(i)
	return muo
}

// SetNillableSessionID sets the "session_id" field if the given value is not nil.
func (muo *MATCHINGSUpdateOne) SetNillableSessionID(i *int) *MATCHINGSUpdateOne {
	if i != nil {
		muo.SetSessionID(*i)
	}
	return muo
}

// AddSessionID adds i to the "session_id" field.
func (muo *MATCHINGSUpdateOne) AddSessionID(i int) *MATCHINGSUpdateOne {
	muo.mutation.AddSessionID(i)
	return muo
}

// SetMatchedAt sets the "matched_at" field.
func (muo *MATCHINGSUpdateOne) SetMatchedAt(t time.Time) *MATCHINGSUpdateOne {
	muo.mutation.SetMatchedAt(t)
	return muo
}

// SetNillableMatchedAt sets the "matched_at" field if the given value is not nil.
func (muo *MATCHINGSUpdateOne) SetNillableMatchedAt(t *time.Time) *MATCHINGSUpdateOne {
	if t != nil {
		muo.SetMatchedAt(*t)
	}
	return muo
}

// SetStatus sets the "status" field.
func (muo *MATCHINGSUpdateOne) SetStatus(m matchings.Status) *MATCHINGSUpdateOne {
	muo.mutation.SetStatus(m)
	return muo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (muo *MATCHINGSUpdateOne) SetNillableStatus(m *matchings.Status) *MATCHINGSUpdateOne {
	if m != nil {
		muo.SetStatus(*m)
	}
	return muo
}

// AddMemberIDs adds the "member" edge to the USERS entity by IDs.
func (muo *MATCHINGSUpdateOne) AddMemberIDs(ids ...int) *MATCHINGSUpdateOne {
	muo.mutation.AddMemberIDs(ids...)
	return muo
}

// AddMember adds the "member" edges to the USERS entity.
func (muo *MATCHINGSUpdateOne) AddMember(u ...*USERS) *MATCHINGSUpdateOne {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return muo.AddMemberIDs(ids...)
}

// SetHadID sets the "had" edge to the SESSIONS entity by ID.
func (muo *MATCHINGSUpdateOne) SetHadID(id int) *MATCHINGSUpdateOne {
	muo.mutation.SetHadID(id)
	return muo
}

// SetNillableHadID sets the "had" edge to the SESSIONS entity by ID if the given value is not nil.
func (muo *MATCHINGSUpdateOne) SetNillableHadID(id *int) *MATCHINGSUpdateOne {
	if id != nil {
		muo = muo.SetHadID(*id)
	}
	return muo
}

// SetHad sets the "had" edge to the SESSIONS entity.
func (muo *MATCHINGSUpdateOne) SetHad(s *SESSIONS) *MATCHINGSUpdateOne {
	return muo.SetHadID(s.ID)
}

// SetMakesID sets the "makes" edge to the CALLS entity by ID.
func (muo *MATCHINGSUpdateOne) SetMakesID(id int) *MATCHINGSUpdateOne {
	muo.mutation.SetMakesID(id)
	return muo
}

// SetNillableMakesID sets the "makes" edge to the CALLS entity by ID if the given value is not nil.
func (muo *MATCHINGSUpdateOne) SetNillableMakesID(id *int) *MATCHINGSUpdateOne {
	if id != nil {
		muo = muo.SetMakesID(*id)
	}
	return muo
}

// SetMakes sets the "makes" edge to the CALLS entity.
func (muo *MATCHINGSUpdateOne) SetMakes(c *CALLS) *MATCHINGSUpdateOne {
	return muo.SetMakesID(c.ID)
}

// Mutation returns the MATCHINGSMutation object of the builder.
func (muo *MATCHINGSUpdateOne) Mutation() *MATCHINGSMutation {
	return muo.mutation
}

// ClearMember clears all "member" edges to the USERS entity.
func (muo *MATCHINGSUpdateOne) ClearMember() *MATCHINGSUpdateOne {
	muo.mutation.ClearMember()
	return muo
}

// RemoveMemberIDs removes the "member" edge to USERS entities by IDs.
func (muo *MATCHINGSUpdateOne) RemoveMemberIDs(ids ...int) *MATCHINGSUpdateOne {
	muo.mutation.RemoveMemberIDs(ids...)
	return muo
}

// RemoveMember removes "member" edges to USERS entities.
func (muo *MATCHINGSUpdateOne) RemoveMember(u ...*USERS) *MATCHINGSUpdateOne {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return muo.RemoveMemberIDs(ids...)
}

// ClearHad clears the "had" edge to the SESSIONS entity.
func (muo *MATCHINGSUpdateOne) ClearHad() *MATCHINGSUpdateOne {
	muo.mutation.ClearHad()
	return muo
}

// ClearMakes clears the "makes" edge to the CALLS entity.
func (muo *MATCHINGSUpdateOne) ClearMakes() *MATCHINGSUpdateOne {
	muo.mutation.ClearMakes()
	return muo
}

// Where appends a list predicates to the MATCHINGSUpdate builder.
func (muo *MATCHINGSUpdateOne) Where(ps ...predicate.MATCHINGS) *MATCHINGSUpdateOne {
	muo.mutation.Where(ps...)
	return muo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (muo *MATCHINGSUpdateOne) Select(field string, fields ...string) *MATCHINGSUpdateOne {
	muo.fields = append([]string{field}, fields...)
	return muo
}

// Save executes the query and returns the updated MATCHINGS entity.
func (muo *MATCHINGSUpdateOne) Save(ctx context.Context) (*MATCHINGS, error) {
	return withHooks(ctx, muo.sqlSave, muo.mutation, muo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (muo *MATCHINGSUpdateOne) SaveX(ctx context.Context) *MATCHINGS {
	node, err := muo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (muo *MATCHINGSUpdateOne) Exec(ctx context.Context) error {
	_, err := muo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (muo *MATCHINGSUpdateOne) ExecX(ctx context.Context) {
	if err := muo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (muo *MATCHINGSUpdateOne) check() error {
	if v, ok := muo.mutation.Status(); ok {
		if err := matchings.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "MATCHINGS.status": %w`, err)}
		}
	}
	return nil
}

func (muo *MATCHINGSUpdateOne) sqlSave(ctx context.Context) (_node *MATCHINGS, err error) {
	if err := muo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(matchings.Table, matchings.Columns, sqlgraph.NewFieldSpec(matchings.FieldID, field.TypeInt))
	id, ok := muo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "MATCHINGS.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := muo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, matchings.FieldID)
		for _, f := range fields {
			if !matchings.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != matchings.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := muo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := muo.mutation.MatchID(); ok {
		_spec.SetField(matchings.FieldMatchID, field.TypeInt, value)
	}
	if value, ok := muo.mutation.AddedMatchID(); ok {
		_spec.AddField(matchings.FieldMatchID, field.TypeInt, value)
	}
	if value, ok := muo.mutation.UserID(); ok {
		_spec.SetField(matchings.FieldUserID, field.TypeInt, value)
	}
	if value, ok := muo.mutation.AddedUserID(); ok {
		_spec.AddField(matchings.FieldUserID, field.TypeInt, value)
	}
	if value, ok := muo.mutation.MatchedUserID(); ok {
		_spec.SetField(matchings.FieldMatchedUserID, field.TypeInt, value)
	}
	if value, ok := muo.mutation.AddedMatchedUserID(); ok {
		_spec.AddField(matchings.FieldMatchedUserID, field.TypeInt, value)
	}
	if value, ok := muo.mutation.SessionID(); ok {
		_spec.SetField(matchings.FieldSessionID, field.TypeInt, value)
	}
	if value, ok := muo.mutation.AddedSessionID(); ok {
		_spec.AddField(matchings.FieldSessionID, field.TypeInt, value)
	}
	if value, ok := muo.mutation.MatchedAt(); ok {
		_spec.SetField(matchings.FieldMatchedAt, field.TypeTime, value)
	}
	if value, ok := muo.mutation.Status(); ok {
		_spec.SetField(matchings.FieldStatus, field.TypeEnum, value)
	}
	if muo.mutation.MemberCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   matchings.MemberTable,
			Columns: matchings.MemberPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(users.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.RemovedMemberIDs(); len(nodes) > 0 && !muo.mutation.MemberCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   matchings.MemberTable,
			Columns: matchings.MemberPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(users.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.MemberIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   matchings.MemberTable,
			Columns: matchings.MemberPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(users.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if muo.mutation.HadCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   matchings.HadTable,
			Columns: []string{matchings.HadColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sessions.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.HadIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   matchings.HadTable,
			Columns: []string{matchings.HadColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sessions.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if muo.mutation.MakesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   matchings.MakesTable,
			Columns: []string{matchings.MakesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(calls.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.MakesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   matchings.MakesTable,
			Columns: []string{matchings.MakesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(calls.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &MATCHINGS{config: muo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, muo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{matchings.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	muo.mutation.done = true
	return _node, nil
}
