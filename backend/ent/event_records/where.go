// Code generated by ent, DO NOT EDIT.

package event_records

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/Hosi121/SpeakUp/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.EVENT_RECORDS {
	return predicate.EVENT_RECORDS(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.EVENT_RECORDS {
	return predicate.EVENT_RECORDS(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.EVENT_RECORDS {
	return predicate.EVENT_RECORDS(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.EVENT_RECORDS {
	return predicate.EVENT_RECORDS(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.EVENT_RECORDS {
	return predicate.EVENT_RECORDS(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.EVENT_RECORDS {
	return predicate.EVENT_RECORDS(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.EVENT_RECORDS {
	return predicate.EVENT_RECORDS(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.EVENT_RECORDS {
	return predicate.EVENT_RECORDS(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.EVENT_RECORDS {
	return predicate.EVENT_RECORDS(sql.FieldLTE(FieldID, id))
}

// UserID applies equality check predicate on the "user_id" field. It's identical to UserIDEQ.
func UserID(v int) predicate.EVENT_RECORDS {
	return predicate.EVENT_RECORDS(sql.FieldEQ(FieldUserID, v))
}

// EventID applies equality check predicate on the "event_id" field. It's identical to EventIDEQ.
func EventID(v int) predicate.EVENT_RECORDS {
	return predicate.EVENT_RECORDS(sql.FieldEQ(FieldEventID, v))
}

// Records applies equality check predicate on the "records" field. It's identical to RecordsEQ.
func Records(v string) predicate.EVENT_RECORDS {
	return predicate.EVENT_RECORDS(sql.FieldEQ(FieldRecords, v))
}

// UserIDEQ applies the EQ predicate on the "user_id" field.
func UserIDEQ(v int) predicate.EVENT_RECORDS {
	return predicate.EVENT_RECORDS(sql.FieldEQ(FieldUserID, v))
}

// UserIDNEQ applies the NEQ predicate on the "user_id" field.
func UserIDNEQ(v int) predicate.EVENT_RECORDS {
	return predicate.EVENT_RECORDS(sql.FieldNEQ(FieldUserID, v))
}

// UserIDIn applies the In predicate on the "user_id" field.
func UserIDIn(vs ...int) predicate.EVENT_RECORDS {
	return predicate.EVENT_RECORDS(sql.FieldIn(FieldUserID, vs...))
}

// UserIDNotIn applies the NotIn predicate on the "user_id" field.
func UserIDNotIn(vs ...int) predicate.EVENT_RECORDS {
	return predicate.EVENT_RECORDS(sql.FieldNotIn(FieldUserID, vs...))
}

// UserIDGT applies the GT predicate on the "user_id" field.
func UserIDGT(v int) predicate.EVENT_RECORDS {
	return predicate.EVENT_RECORDS(sql.FieldGT(FieldUserID, v))
}

// UserIDGTE applies the GTE predicate on the "user_id" field.
func UserIDGTE(v int) predicate.EVENT_RECORDS {
	return predicate.EVENT_RECORDS(sql.FieldGTE(FieldUserID, v))
}

// UserIDLT applies the LT predicate on the "user_id" field.
func UserIDLT(v int) predicate.EVENT_RECORDS {
	return predicate.EVENT_RECORDS(sql.FieldLT(FieldUserID, v))
}

// UserIDLTE applies the LTE predicate on the "user_id" field.
func UserIDLTE(v int) predicate.EVENT_RECORDS {
	return predicate.EVENT_RECORDS(sql.FieldLTE(FieldUserID, v))
}

// EventIDEQ applies the EQ predicate on the "event_id" field.
func EventIDEQ(v int) predicate.EVENT_RECORDS {
	return predicate.EVENT_RECORDS(sql.FieldEQ(FieldEventID, v))
}

// EventIDNEQ applies the NEQ predicate on the "event_id" field.
func EventIDNEQ(v int) predicate.EVENT_RECORDS {
	return predicate.EVENT_RECORDS(sql.FieldNEQ(FieldEventID, v))
}

// EventIDIn applies the In predicate on the "event_id" field.
func EventIDIn(vs ...int) predicate.EVENT_RECORDS {
	return predicate.EVENT_RECORDS(sql.FieldIn(FieldEventID, vs...))
}

// EventIDNotIn applies the NotIn predicate on the "event_id" field.
func EventIDNotIn(vs ...int) predicate.EVENT_RECORDS {
	return predicate.EVENT_RECORDS(sql.FieldNotIn(FieldEventID, vs...))
}

// EventIDGT applies the GT predicate on the "event_id" field.
func EventIDGT(v int) predicate.EVENT_RECORDS {
	return predicate.EVENT_RECORDS(sql.FieldGT(FieldEventID, v))
}

// EventIDGTE applies the GTE predicate on the "event_id" field.
func EventIDGTE(v int) predicate.EVENT_RECORDS {
	return predicate.EVENT_RECORDS(sql.FieldGTE(FieldEventID, v))
}

// EventIDLT applies the LT predicate on the "event_id" field.
func EventIDLT(v int) predicate.EVENT_RECORDS {
	return predicate.EVENT_RECORDS(sql.FieldLT(FieldEventID, v))
}

// EventIDLTE applies the LTE predicate on the "event_id" field.
func EventIDLTE(v int) predicate.EVENT_RECORDS {
	return predicate.EVENT_RECORDS(sql.FieldLTE(FieldEventID, v))
}

// RecordsEQ applies the EQ predicate on the "records" field.
func RecordsEQ(v string) predicate.EVENT_RECORDS {
	return predicate.EVENT_RECORDS(sql.FieldEQ(FieldRecords, v))
}

// RecordsNEQ applies the NEQ predicate on the "records" field.
func RecordsNEQ(v string) predicate.EVENT_RECORDS {
	return predicate.EVENT_RECORDS(sql.FieldNEQ(FieldRecords, v))
}

// RecordsIn applies the In predicate on the "records" field.
func RecordsIn(vs ...string) predicate.EVENT_RECORDS {
	return predicate.EVENT_RECORDS(sql.FieldIn(FieldRecords, vs...))
}

// RecordsNotIn applies the NotIn predicate on the "records" field.
func RecordsNotIn(vs ...string) predicate.EVENT_RECORDS {
	return predicate.EVENT_RECORDS(sql.FieldNotIn(FieldRecords, vs...))
}

// RecordsGT applies the GT predicate on the "records" field.
func RecordsGT(v string) predicate.EVENT_RECORDS {
	return predicate.EVENT_RECORDS(sql.FieldGT(FieldRecords, v))
}

// RecordsGTE applies the GTE predicate on the "records" field.
func RecordsGTE(v string) predicate.EVENT_RECORDS {
	return predicate.EVENT_RECORDS(sql.FieldGTE(FieldRecords, v))
}

// RecordsLT applies the LT predicate on the "records" field.
func RecordsLT(v string) predicate.EVENT_RECORDS {
	return predicate.EVENT_RECORDS(sql.FieldLT(FieldRecords, v))
}

// RecordsLTE applies the LTE predicate on the "records" field.
func RecordsLTE(v string) predicate.EVENT_RECORDS {
	return predicate.EVENT_RECORDS(sql.FieldLTE(FieldRecords, v))
}

// RecordsContains applies the Contains predicate on the "records" field.
func RecordsContains(v string) predicate.EVENT_RECORDS {
	return predicate.EVENT_RECORDS(sql.FieldContains(FieldRecords, v))
}

// RecordsHasPrefix applies the HasPrefix predicate on the "records" field.
func RecordsHasPrefix(v string) predicate.EVENT_RECORDS {
	return predicate.EVENT_RECORDS(sql.FieldHasPrefix(FieldRecords, v))
}

// RecordsHasSuffix applies the HasSuffix predicate on the "records" field.
func RecordsHasSuffix(v string) predicate.EVENT_RECORDS {
	return predicate.EVENT_RECORDS(sql.FieldHasSuffix(FieldRecords, v))
}

// RecordsEqualFold applies the EqualFold predicate on the "records" field.
func RecordsEqualFold(v string) predicate.EVENT_RECORDS {
	return predicate.EVENT_RECORDS(sql.FieldEqualFold(FieldRecords, v))
}

// RecordsContainsFold applies the ContainsFold predicate on the "records" field.
func RecordsContainsFold(v string) predicate.EVENT_RECORDS {
	return predicate.EVENT_RECORDS(sql.FieldContainsFold(FieldRecords, v))
}

// HasMade applies the HasEdge predicate on the "made" edge.
func HasMade() predicate.EVENT_RECORDS {
	return predicate.EVENT_RECORDS(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, MadeTable, MadeColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasMadeWith applies the HasEdge predicate on the "made" edge with a given conditions (other predicates).
func HasMadeWith(preds ...predicate.USERS) predicate.EVENT_RECORDS {
	return predicate.EVENT_RECORDS(func(s *sql.Selector) {
		step := newMadeStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasParticipates applies the HasEdge predicate on the "participates" edge.
func HasParticipates() predicate.EVENT_RECORDS {
	return predicate.EVENT_RECORDS(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ParticipatesTable, ParticipatesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasParticipatesWith applies the HasEdge predicate on the "participates" edge with a given conditions (other predicates).
func HasParticipatesWith(preds ...predicate.EVENTS) predicate.EVENT_RECORDS {
	return predicate.EVENT_RECORDS(func(s *sql.Selector) {
		step := newParticipatesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasHas applies the HasEdge predicate on the "has" edge.
func HasHas() predicate.EVENT_RECORDS {
	return predicate.EVENT_RECORDS(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, HasTable, HasColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasHasWith applies the HasEdge predicate on the "has" edge with a given conditions (other predicates).
func HasHasWith(preds ...predicate.SESSIONS) predicate.EVENT_RECORDS {
	return predicate.EVENT_RECORDS(func(s *sql.Selector) {
		step := newHasStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.EVENT_RECORDS) predicate.EVENT_RECORDS {
	return predicate.EVENT_RECORDS(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.EVENT_RECORDS) predicate.EVENT_RECORDS {
	return predicate.EVENT_RECORDS(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.EVENT_RECORDS) predicate.EVENT_RECORDS {
	return predicate.EVENT_RECORDS(sql.NotPredicates(p))
}
