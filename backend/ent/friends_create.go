// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Hosi121/SpeakUp/ent/chats"
	"github.com/Hosi121/SpeakUp/ent/friends"
	"github.com/Hosi121/SpeakUp/ent/users"
)

// FRIENDSCreate is the builder for creating a FRIENDS entity.
type FRIENDSCreate struct {
	config
	mutation *FRIENDSMutation
	hooks    []Hook
}

// SetUserID sets the "user_id" field.
func (fc *FRIENDSCreate) SetUserID(i int) *FRIENDSCreate {
	fc.mutation.SetUserID(i)
	return fc
}

// SetTargetUserID sets the "target_user_id" field.
func (fc *FRIENDSCreate) SetTargetUserID(i int) *FRIENDSCreate {
	fc.mutation.SetTargetUserID(i)
	return fc
}

// SetStatus sets the "status" field.
func (fc *FRIENDSCreate) SetStatus(f friends.Status) *FRIENDSCreate {
	fc.mutation.SetStatus(f)
	return fc
}

// SetCreatedAt sets the "created_at" field.
func (fc *FRIENDSCreate) SetCreatedAt(t time.Time) *FRIENDSCreate {
	fc.mutation.SetCreatedAt(t)
	return fc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (fc *FRIENDSCreate) SetNillableCreatedAt(t *time.Time) *FRIENDSCreate {
	if t != nil {
		fc.SetCreatedAt(*t)
	}
	return fc
}

// AddConnectIDs adds the "connects" edge to the USERS entity by IDs.
func (fc *FRIENDSCreate) AddConnectIDs(ids ...int) *FRIENDSCreate {
	fc.mutation.AddConnectIDs(ids...)
	return fc
}

// AddConnects adds the "connects" edges to the USERS entity.
func (fc *FRIENDSCreate) AddConnects(u ...*USERS) *FRIENDSCreate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return fc.AddConnectIDs(ids...)
}

// AddHaIDs adds the "has" edge to the CHATS entity by IDs.
func (fc *FRIENDSCreate) AddHaIDs(ids ...int) *FRIENDSCreate {
	fc.mutation.AddHaIDs(ids...)
	return fc
}

// AddHas adds the "has" edges to the CHATS entity.
func (fc *FRIENDSCreate) AddHas(c ...*CHATS) *FRIENDSCreate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return fc.AddHaIDs(ids...)
}

// Mutation returns the FRIENDSMutation object of the builder.
func (fc *FRIENDSCreate) Mutation() *FRIENDSMutation {
	return fc.mutation
}

// Save creates the FRIENDS in the database.
func (fc *FRIENDSCreate) Save(ctx context.Context) (*FRIENDS, error) {
	fc.defaults()
	return withHooks(ctx, fc.sqlSave, fc.mutation, fc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (fc *FRIENDSCreate) SaveX(ctx context.Context) *FRIENDS {
	v, err := fc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (fc *FRIENDSCreate) Exec(ctx context.Context) error {
	_, err := fc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fc *FRIENDSCreate) ExecX(ctx context.Context) {
	if err := fc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (fc *FRIENDSCreate) defaults() {
	if _, ok := fc.mutation.CreatedAt(); !ok {
		v := friends.DefaultCreatedAt()
		fc.mutation.SetCreatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (fc *FRIENDSCreate) check() error {
	if _, ok := fc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`ent: missing required field "FRIENDS.user_id"`)}
	}
	if _, ok := fc.mutation.TargetUserID(); !ok {
		return &ValidationError{Name: "target_user_id", err: errors.New(`ent: missing required field "FRIENDS.target_user_id"`)}
	}
	if _, ok := fc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "FRIENDS.status"`)}
	}
	if v, ok := fc.mutation.Status(); ok {
		if err := friends.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "FRIENDS.status": %w`, err)}
		}
	}
	if _, ok := fc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "FRIENDS.created_at"`)}
	}
	return nil
}

func (fc *FRIENDSCreate) sqlSave(ctx context.Context) (*FRIENDS, error) {
	if err := fc.check(); err != nil {
		return nil, err
	}
	_node, _spec := fc.createSpec()
	if err := sqlgraph.CreateNode(ctx, fc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	fc.mutation.id = &_node.ID
	fc.mutation.done = true
	return _node, nil
}

func (fc *FRIENDSCreate) createSpec() (*FRIENDS, *sqlgraph.CreateSpec) {
	var (
		_node = &FRIENDS{config: fc.config}
		_spec = sqlgraph.NewCreateSpec(friends.Table, sqlgraph.NewFieldSpec(friends.FieldID, field.TypeInt))
	)
	if value, ok := fc.mutation.UserID(); ok {
		_spec.SetField(friends.FieldUserID, field.TypeInt, value)
		_node.UserID = value
	}
	if value, ok := fc.mutation.TargetUserID(); ok {
		_spec.SetField(friends.FieldTargetUserID, field.TypeInt, value)
		_node.TargetUserID = value
	}
	if value, ok := fc.mutation.Status(); ok {
		_spec.SetField(friends.FieldStatus, field.TypeEnum, value)
		_node.Status = value
	}
	if value, ok := fc.mutation.CreatedAt(); ok {
		_spec.SetField(friends.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if nodes := fc.mutation.ConnectsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   friends.ConnectsTable,
			Columns: friends.ConnectsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(users.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := fc.mutation.HasIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   friends.HasTable,
			Columns: []string{friends.HasColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(chats.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// FRIENDSCreateBulk is the builder for creating many FRIENDS entities in bulk.
type FRIENDSCreateBulk struct {
	config
	err      error
	builders []*FRIENDSCreate
}

// Save creates the FRIENDS entities in the database.
func (fcb *FRIENDSCreateBulk) Save(ctx context.Context) ([]*FRIENDS, error) {
	if fcb.err != nil {
		return nil, fcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(fcb.builders))
	nodes := make([]*FRIENDS, len(fcb.builders))
	mutators := make([]Mutator, len(fcb.builders))
	for i := range fcb.builders {
		func(i int, root context.Context) {
			builder := fcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*FRIENDSMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, fcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, fcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, fcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (fcb *FRIENDSCreateBulk) SaveX(ctx context.Context) []*FRIENDS {
	v, err := fcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (fcb *FRIENDSCreateBulk) Exec(ctx context.Context) error {
	_, err := fcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fcb *FRIENDSCreateBulk) ExecX(ctx context.Context) {
	if err := fcb.Exec(ctx); err != nil {
		panic(err)
	}
}
