// Code generated by ent, DO NOT EDIT.

package trophies

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the trophies type in the database.
	Label = "trophies"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldTitle holds the string denoting the title field in the database.
	FieldTitle = "title"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldRequirement holds the string denoting the requirement field in the database.
	FieldRequirement = "requirement"
	// EdgeRefered holds the string denoting the refered edge name in mutations.
	EdgeRefered = "refered"
	// Table holds the table name of the trophies in the database.
	Table = "trophie_ss"
	// ReferedTable is the table that holds the refered relation/edge.
	ReferedTable = "achievement_ss"
	// ReferedInverseTable is the table name for the ACHIEVEMENTS entity.
	// It exists in this package in order to avoid circular dependency with the "achievements" package.
	ReferedInverseTable = "achievement_ss"
	// ReferedColumn is the table column denoting the refered relation/edge.
	ReferedColumn = "achievements_refers"
)

// Columns holds all SQL columns for trophies fields.
var Columns = []string{
	FieldID,
	FieldTitle,
	FieldDescription,
	FieldRequirement,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the TROPHIES queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByTitle orders the results by the title field.
func ByTitle(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTitle, opts...).ToFunc()
}

// ByDescription orders the results by the description field.
func ByDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDescription, opts...).ToFunc()
}

// ByRequirement orders the results by the requirement field.
func ByRequirement(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRequirement, opts...).ToFunc()
}

// ByReferedCount orders the results by refered count.
func ByReferedCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newReferedStep(), opts...)
	}
}

// ByRefered orders the results by refered terms.
func ByRefered(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newReferedStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newReferedStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ReferedInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, ReferedTable, ReferedColumn),
	)
}
