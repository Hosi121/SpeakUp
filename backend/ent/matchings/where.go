// Code generated by ent, DO NOT EDIT.

package matchings

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/Hosi121/SpeakUp/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.MATCHINGS {
	return predicate.MATCHINGS(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.MATCHINGS {
	return predicate.MATCHINGS(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.MATCHINGS {
	return predicate.MATCHINGS(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.MATCHINGS {
	return predicate.MATCHINGS(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.MATCHINGS {
	return predicate.MATCHINGS(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.MATCHINGS {
	return predicate.MATCHINGS(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.MATCHINGS {
	return predicate.MATCHINGS(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.MATCHINGS {
	return predicate.MATCHINGS(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.MATCHINGS {
	return predicate.MATCHINGS(sql.FieldLTE(FieldID, id))
}

// MatchID applies equality check predicate on the "match_id" field. It's identical to MatchIDEQ.
func MatchID(v int) predicate.MATCHINGS {
	return predicate.MATCHINGS(sql.FieldEQ(FieldMatchID, v))
}

// UserID applies equality check predicate on the "user_id" field. It's identical to UserIDEQ.
func UserID(v int) predicate.MATCHINGS {
	return predicate.MATCHINGS(sql.FieldEQ(FieldUserID, v))
}

// MatchedUserID applies equality check predicate on the "matched_user_id" field. It's identical to MatchedUserIDEQ.
func MatchedUserID(v int) predicate.MATCHINGS {
	return predicate.MATCHINGS(sql.FieldEQ(FieldMatchedUserID, v))
}

// SessionID applies equality check predicate on the "session_id" field. It's identical to SessionIDEQ.
func SessionID(v int) predicate.MATCHINGS {
	return predicate.MATCHINGS(sql.FieldEQ(FieldSessionID, v))
}

// MatchedAt applies equality check predicate on the "matched_at" field. It's identical to MatchedAtEQ.
func MatchedAt(v time.Time) predicate.MATCHINGS {
	return predicate.MATCHINGS(sql.FieldEQ(FieldMatchedAt, v))
}

// MatchIDEQ applies the EQ predicate on the "match_id" field.
func MatchIDEQ(v int) predicate.MATCHINGS {
	return predicate.MATCHINGS(sql.FieldEQ(FieldMatchID, v))
}

// MatchIDNEQ applies the NEQ predicate on the "match_id" field.
func MatchIDNEQ(v int) predicate.MATCHINGS {
	return predicate.MATCHINGS(sql.FieldNEQ(FieldMatchID, v))
}

// MatchIDIn applies the In predicate on the "match_id" field.
func MatchIDIn(vs ...int) predicate.MATCHINGS {
	return predicate.MATCHINGS(sql.FieldIn(FieldMatchID, vs...))
}

// MatchIDNotIn applies the NotIn predicate on the "match_id" field.
func MatchIDNotIn(vs ...int) predicate.MATCHINGS {
	return predicate.MATCHINGS(sql.FieldNotIn(FieldMatchID, vs...))
}

// MatchIDGT applies the GT predicate on the "match_id" field.
func MatchIDGT(v int) predicate.MATCHINGS {
	return predicate.MATCHINGS(sql.FieldGT(FieldMatchID, v))
}

// MatchIDGTE applies the GTE predicate on the "match_id" field.
func MatchIDGTE(v int) predicate.MATCHINGS {
	return predicate.MATCHINGS(sql.FieldGTE(FieldMatchID, v))
}

// MatchIDLT applies the LT predicate on the "match_id" field.
func MatchIDLT(v int) predicate.MATCHINGS {
	return predicate.MATCHINGS(sql.FieldLT(FieldMatchID, v))
}

// MatchIDLTE applies the LTE predicate on the "match_id" field.
func MatchIDLTE(v int) predicate.MATCHINGS {
	return predicate.MATCHINGS(sql.FieldLTE(FieldMatchID, v))
}

// UserIDEQ applies the EQ predicate on the "user_id" field.
func UserIDEQ(v int) predicate.MATCHINGS {
	return predicate.MATCHINGS(sql.FieldEQ(FieldUserID, v))
}

// UserIDNEQ applies the NEQ predicate on the "user_id" field.
func UserIDNEQ(v int) predicate.MATCHINGS {
	return predicate.MATCHINGS(sql.FieldNEQ(FieldUserID, v))
}

// UserIDIn applies the In predicate on the "user_id" field.
func UserIDIn(vs ...int) predicate.MATCHINGS {
	return predicate.MATCHINGS(sql.FieldIn(FieldUserID, vs...))
}

// UserIDNotIn applies the NotIn predicate on the "user_id" field.
func UserIDNotIn(vs ...int) predicate.MATCHINGS {
	return predicate.MATCHINGS(sql.FieldNotIn(FieldUserID, vs...))
}

// UserIDGT applies the GT predicate on the "user_id" field.
func UserIDGT(v int) predicate.MATCHINGS {
	return predicate.MATCHINGS(sql.FieldGT(FieldUserID, v))
}

// UserIDGTE applies the GTE predicate on the "user_id" field.
func UserIDGTE(v int) predicate.MATCHINGS {
	return predicate.MATCHINGS(sql.FieldGTE(FieldUserID, v))
}

// UserIDLT applies the LT predicate on the "user_id" field.
func UserIDLT(v int) predicate.MATCHINGS {
	return predicate.MATCHINGS(sql.FieldLT(FieldUserID, v))
}

// UserIDLTE applies the LTE predicate on the "user_id" field.
func UserIDLTE(v int) predicate.MATCHINGS {
	return predicate.MATCHINGS(sql.FieldLTE(FieldUserID, v))
}

// MatchedUserIDEQ applies the EQ predicate on the "matched_user_id" field.
func MatchedUserIDEQ(v int) predicate.MATCHINGS {
	return predicate.MATCHINGS(sql.FieldEQ(FieldMatchedUserID, v))
}

// MatchedUserIDNEQ applies the NEQ predicate on the "matched_user_id" field.
func MatchedUserIDNEQ(v int) predicate.MATCHINGS {
	return predicate.MATCHINGS(sql.FieldNEQ(FieldMatchedUserID, v))
}

// MatchedUserIDIn applies the In predicate on the "matched_user_id" field.
func MatchedUserIDIn(vs ...int) predicate.MATCHINGS {
	return predicate.MATCHINGS(sql.FieldIn(FieldMatchedUserID, vs...))
}

// MatchedUserIDNotIn applies the NotIn predicate on the "matched_user_id" field.
func MatchedUserIDNotIn(vs ...int) predicate.MATCHINGS {
	return predicate.MATCHINGS(sql.FieldNotIn(FieldMatchedUserID, vs...))
}

// MatchedUserIDGT applies the GT predicate on the "matched_user_id" field.
func MatchedUserIDGT(v int) predicate.MATCHINGS {
	return predicate.MATCHINGS(sql.FieldGT(FieldMatchedUserID, v))
}

// MatchedUserIDGTE applies the GTE predicate on the "matched_user_id" field.
func MatchedUserIDGTE(v int) predicate.MATCHINGS {
	return predicate.MATCHINGS(sql.FieldGTE(FieldMatchedUserID, v))
}

// MatchedUserIDLT applies the LT predicate on the "matched_user_id" field.
func MatchedUserIDLT(v int) predicate.MATCHINGS {
	return predicate.MATCHINGS(sql.FieldLT(FieldMatchedUserID, v))
}

// MatchedUserIDLTE applies the LTE predicate on the "matched_user_id" field.
func MatchedUserIDLTE(v int) predicate.MATCHINGS {
	return predicate.MATCHINGS(sql.FieldLTE(FieldMatchedUserID, v))
}

// SessionIDEQ applies the EQ predicate on the "session_id" field.
func SessionIDEQ(v int) predicate.MATCHINGS {
	return predicate.MATCHINGS(sql.FieldEQ(FieldSessionID, v))
}

// SessionIDNEQ applies the NEQ predicate on the "session_id" field.
func SessionIDNEQ(v int) predicate.MATCHINGS {
	return predicate.MATCHINGS(sql.FieldNEQ(FieldSessionID, v))
}

// SessionIDIn applies the In predicate on the "session_id" field.
func SessionIDIn(vs ...int) predicate.MATCHINGS {
	return predicate.MATCHINGS(sql.FieldIn(FieldSessionID, vs...))
}

// SessionIDNotIn applies the NotIn predicate on the "session_id" field.
func SessionIDNotIn(vs ...int) predicate.MATCHINGS {
	return predicate.MATCHINGS(sql.FieldNotIn(FieldSessionID, vs...))
}

// SessionIDGT applies the GT predicate on the "session_id" field.
func SessionIDGT(v int) predicate.MATCHINGS {
	return predicate.MATCHINGS(sql.FieldGT(FieldSessionID, v))
}

// SessionIDGTE applies the GTE predicate on the "session_id" field.
func SessionIDGTE(v int) predicate.MATCHINGS {
	return predicate.MATCHINGS(sql.FieldGTE(FieldSessionID, v))
}

// SessionIDLT applies the LT predicate on the "session_id" field.
func SessionIDLT(v int) predicate.MATCHINGS {
	return predicate.MATCHINGS(sql.FieldLT(FieldSessionID, v))
}

// SessionIDLTE applies the LTE predicate on the "session_id" field.
func SessionIDLTE(v int) predicate.MATCHINGS {
	return predicate.MATCHINGS(sql.FieldLTE(FieldSessionID, v))
}

// MatchedAtEQ applies the EQ predicate on the "matched_at" field.
func MatchedAtEQ(v time.Time) predicate.MATCHINGS {
	return predicate.MATCHINGS(sql.FieldEQ(FieldMatchedAt, v))
}

// MatchedAtNEQ applies the NEQ predicate on the "matched_at" field.
func MatchedAtNEQ(v time.Time) predicate.MATCHINGS {
	return predicate.MATCHINGS(sql.FieldNEQ(FieldMatchedAt, v))
}

// MatchedAtIn applies the In predicate on the "matched_at" field.
func MatchedAtIn(vs ...time.Time) predicate.MATCHINGS {
	return predicate.MATCHINGS(sql.FieldIn(FieldMatchedAt, vs...))
}

// MatchedAtNotIn applies the NotIn predicate on the "matched_at" field.
func MatchedAtNotIn(vs ...time.Time) predicate.MATCHINGS {
	return predicate.MATCHINGS(sql.FieldNotIn(FieldMatchedAt, vs...))
}

// MatchedAtGT applies the GT predicate on the "matched_at" field.
func MatchedAtGT(v time.Time) predicate.MATCHINGS {
	return predicate.MATCHINGS(sql.FieldGT(FieldMatchedAt, v))
}

// MatchedAtGTE applies the GTE predicate on the "matched_at" field.
func MatchedAtGTE(v time.Time) predicate.MATCHINGS {
	return predicate.MATCHINGS(sql.FieldGTE(FieldMatchedAt, v))
}

// MatchedAtLT applies the LT predicate on the "matched_at" field.
func MatchedAtLT(v time.Time) predicate.MATCHINGS {
	return predicate.MATCHINGS(sql.FieldLT(FieldMatchedAt, v))
}

// MatchedAtLTE applies the LTE predicate on the "matched_at" field.
func MatchedAtLTE(v time.Time) predicate.MATCHINGS {
	return predicate.MATCHINGS(sql.FieldLTE(FieldMatchedAt, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v Status) predicate.MATCHINGS {
	return predicate.MATCHINGS(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v Status) predicate.MATCHINGS {
	return predicate.MATCHINGS(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...Status) predicate.MATCHINGS {
	return predicate.MATCHINGS(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...Status) predicate.MATCHINGS {
	return predicate.MATCHINGS(sql.FieldNotIn(FieldStatus, vs...))
}

// HasMember applies the HasEdge predicate on the "member" edge.
func HasMember() predicate.MATCHINGS {
	return predicate.MATCHINGS(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, MemberTable, MemberPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasMemberWith applies the HasEdge predicate on the "member" edge with a given conditions (other predicates).
func HasMemberWith(preds ...predicate.USERS) predicate.MATCHINGS {
	return predicate.MATCHINGS(func(s *sql.Selector) {
		step := newMemberStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasHad applies the HasEdge predicate on the "had" edge.
func HasHad() predicate.MATCHINGS {
	return predicate.MATCHINGS(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, HadTable, HadColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasHadWith applies the HasEdge predicate on the "had" edge with a given conditions (other predicates).
func HasHadWith(preds ...predicate.SESSIONS) predicate.MATCHINGS {
	return predicate.MATCHINGS(func(s *sql.Selector) {
		step := newHadStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasMakes applies the HasEdge predicate on the "makes" edge.
func HasMakes() predicate.MATCHINGS {
	return predicate.MATCHINGS(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, MakesTable, MakesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasMakesWith applies the HasEdge predicate on the "makes" edge with a given conditions (other predicates).
func HasMakesWith(preds ...predicate.CALLS) predicate.MATCHINGS {
	return predicate.MATCHINGS(func(s *sql.Selector) {
		step := newMakesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.MATCHINGS) predicate.MATCHINGS {
	return predicate.MATCHINGS(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.MATCHINGS) predicate.MATCHINGS {
	return predicate.MATCHINGS(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.MATCHINGS) predicate.MATCHINGS {
	return predicate.MATCHINGS(sql.NotPredicates(p))
}
