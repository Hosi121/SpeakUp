// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/Hosi121/SpeakUp/ent/memos"
	"github.com/Hosi121/SpeakUp/ent/users"
)

// MEMOS is the model entity for the MEMOS schema.
type MEMOS struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// MemoID holds the value of the "memo_id" field.
	MemoID int `json:"memo_id,omitempty"`
	// UserID holds the value of the "user_id" field.
	UserID int `json:"user_id,omitempty"`
	// Memo1 holds the value of the "memo1" field.
	Memo1 string `json:"memo1,omitempty"`
	// Memo2 holds the value of the "memo2" field.
	Memo2 string `json:"memo2,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the MEMOSQuery when eager-loading is set.
	Edges          MEMOSEdges `json:"edges"`
	users_prepares *int
	selectValues   sql.SelectValues
}

// MEMOSEdges holds the relations/edges for other nodes in the graph.
type MEMOSEdges struct {
	// Prepared holds the value of the prepared edge.
	Prepared *USERS `json:"prepared,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// PreparedOrErr returns the Prepared value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e MEMOSEdges) PreparedOrErr() (*USERS, error) {
	if e.Prepared != nil {
		return e.Prepared, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: users.Label}
	}
	return nil, &NotLoadedError{edge: "prepared"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*MEMOS) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case memos.FieldID, memos.FieldMemoID, memos.FieldUserID:
			values[i] = new(sql.NullInt64)
		case memos.FieldMemo1, memos.FieldMemo2:
			values[i] = new(sql.NullString)
		case memos.ForeignKeys[0]: // users_prepares
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the MEMOS fields.
func (m *MEMOS) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case memos.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			m.ID = int(value.Int64)
		case memos.FieldMemoID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field memo_id", values[i])
			} else if value.Valid {
				m.MemoID = int(value.Int64)
			}
		case memos.FieldUserID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				m.UserID = int(value.Int64)
			}
		case memos.FieldMemo1:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field memo1", values[i])
			} else if value.Valid {
				m.Memo1 = value.String
			}
		case memos.FieldMemo2:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field memo2", values[i])
			} else if value.Valid {
				m.Memo2 = value.String
			}
		case memos.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field users_prepares", value)
			} else if value.Valid {
				m.users_prepares = new(int)
				*m.users_prepares = int(value.Int64)
			}
		default:
			m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the MEMOS.
// This includes values selected through modifiers, order, etc.
func (m *MEMOS) Value(name string) (ent.Value, error) {
	return m.selectValues.Get(name)
}

// QueryPrepared queries the "prepared" edge of the MEMOS entity.
func (m *MEMOS) QueryPrepared() *USERSQuery {
	return NewMEMOSClient(m.config).QueryPrepared(m)
}

// Update returns a builder for updating this MEMOS.
// Note that you need to call MEMOS.Unwrap() before calling this method if this MEMOS
// was returned from a transaction, and the transaction was committed or rolled back.
func (m *MEMOS) Update() *MEMOSUpdateOne {
	return NewMEMOSClient(m.config).UpdateOne(m)
}

// Unwrap unwraps the MEMOS entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (m *MEMOS) Unwrap() *MEMOS {
	_tx, ok := m.config.driver.(*txDriver)
	if !ok {
		panic("ent: MEMOS is not a transactional entity")
	}
	m.config.driver = _tx.drv
	return m
}

// String implements the fmt.Stringer.
func (m *MEMOS) String() string {
	var builder strings.Builder
	builder.WriteString("MEMOS(")
	builder.WriteString(fmt.Sprintf("id=%v, ", m.ID))
	builder.WriteString("memo_id=")
	builder.WriteString(fmt.Sprintf("%v", m.MemoID))
	builder.WriteString(", ")
	builder.WriteString("user_id=")
	builder.WriteString(fmt.Sprintf("%v", m.UserID))
	builder.WriteString(", ")
	builder.WriteString("memo1=")
	builder.WriteString(m.Memo1)
	builder.WriteString(", ")
	builder.WriteString("memo2=")
	builder.WriteString(m.Memo2)
	builder.WriteByte(')')
	return builder.String()
}

// MEMOSs is a parsable slice of MEMOS.
type MEMOSs []*MEMOS
