// Code generated by ent, DO NOT EDIT.

package sessions

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the sessions type in the database.
	Label = "sessions"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldSessionID holds the string denoting the session_id field in the database.
	FieldSessionID = "session_id"
	// FieldSessionStart holds the string denoting the session_start field in the database.
	FieldSessionStart = "session_start"
	// FieldSessionEnd holds the string denoting the session_end field in the database.
	FieldSessionEnd = "session_end"
	// FieldThemeID holds the string denoting the theme_id field in the database.
	FieldThemeID = "theme_id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// EdgeHas holds the string denoting the has edge name in mutations.
	EdgeHas = "has"
	// EdgeUses holds the string denoting the uses edge name in mutations.
	EdgeUses = "uses"
	// Table holds the table name of the sessions in the database.
	Table = "session_ss"
	// HasTable is the table that holds the has relation/edge.
	HasTable = "matching_ss"
	// HasInverseTable is the table name for the MATCHINGS entity.
	// It exists in this package in order to avoid circular dependency with the "matchings" package.
	HasInverseTable = "matching_ss"
	// HasColumn is the table column denoting the has relation/edge.
	HasColumn = "sessions_has"
	// UsesTable is the table that holds the uses relation/edge.
	UsesTable = "session_ss"
	// UsesInverseTable is the table name for the AITHEMES entity.
	// It exists in this package in order to avoid circular dependency with the "aithemes" package.
	UsesInverseTable = "aitheme_ss"
	// UsesColumn is the table column denoting the uses relation/edge.
	UsesColumn = "sessions_uses"
)

// Columns holds all SQL columns for sessions fields.
var Columns = []string{
	FieldID,
	FieldSessionID,
	FieldSessionStart,
	FieldSessionEnd,
	FieldThemeID,
	FieldCreatedAt,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "session_ss"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"sessions_uses",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt time.Time
)

// OrderOption defines the ordering options for the SESSIONS queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// BySessionID orders the results by the session_id field.
func BySessionID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSessionID, opts...).ToFunc()
}

// BySessionStart orders the results by the session_start field.
func BySessionStart(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSessionStart, opts...).ToFunc()
}

// BySessionEnd orders the results by the session_end field.
func BySessionEnd(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSessionEnd, opts...).ToFunc()
}

// ByThemeID orders the results by the theme_id field.
func ByThemeID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldThemeID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByHasCount orders the results by has count.
func ByHasCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newHasStep(), opts...)
	}
}

// ByHas orders the results by has terms.
func ByHas(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newHasStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByUsesField orders the results by uses field.
func ByUsesField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUsesStep(), sql.OrderByField(field, opts...))
	}
}
func newHasStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(HasInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, HasTable, HasColumn),
	)
}
func newUsesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UsesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, UsesTable, UsesColumn),
	)
}
