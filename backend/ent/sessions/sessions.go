// Code generated by ent, DO NOT EDIT.

package sessions

import (
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the sessions type in the database.
	Label = "sessions"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldUserID holds the string denoting the user_id field in the database.
	FieldUserID = "user_id"
	// FieldMatchedUserID holds the string denoting the matched_user_id field in the database.
	FieldMatchedUserID = "matched_user_id"
	// FieldRecordID holds the string denoting the record_id field in the database.
	FieldRecordID = "record_id"
	// FieldMatchedAt holds the string denoting the matched_at field in the database.
	FieldMatchedAt = "matched_at"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// EdgeHad holds the string denoting the had edge name in mutations.
	EdgeHad = "had"
	// EdgeMakes holds the string denoting the makes edge name in mutations.
	EdgeMakes = "makes"
	// Table holds the table name of the sessions in the database.
	Table = "session_ss"
	// HadTable is the table that holds the had relation/edge.
	HadTable = "session_ss"
	// HadInverseTable is the table name for the EVENT_RECORDS entity.
	// It exists in this package in order to avoid circular dependency with the "event_records" package.
	HadInverseTable = "event_record_ss"
	// HadColumn is the table column denoting the had relation/edge.
	HadColumn = "event_records_has"
	// MakesTable is the table that holds the makes relation/edge.
	MakesTable = "call_ss"
	// MakesInverseTable is the table name for the CALLS entity.
	// It exists in this package in order to avoid circular dependency with the "calls" package.
	MakesInverseTable = "call_ss"
	// MakesColumn is the table column denoting the makes relation/edge.
	MakesColumn = "sessions_makes"
)

// Columns holds all SQL columns for sessions fields.
var Columns = []string{
	FieldID,
	FieldUserID,
	FieldMatchedUserID,
	FieldRecordID,
	FieldMatchedAt,
	FieldStatus,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "session_ss"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"event_records_has",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultMatchedAt holds the default value on creation for the "matched_at" field.
	DefaultMatchedAt time.Time
)

// Status defines the type for the "status" enum field.
type Status string

// Status values.
const (
	StatusMATCHED     Status = "MATCHED"
	StatusPROCCESSING Status = "PROCCESSING"
	StatusFINISHED    Status = "FINISHED"
)

func (s Status) String() string {
	return string(s)
}

// StatusValidator is a validator for the "status" field enum values. It is called by the builders before save.
func StatusValidator(s Status) error {
	switch s {
	case StatusMATCHED, StatusPROCCESSING, StatusFINISHED:
		return nil
	default:
		return fmt.Errorf("sessions: invalid enum value for status field: %q", s)
	}
}

// OrderOption defines the ordering options for the SESSIONS queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByUserID orders the results by the user_id field.
func ByUserID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUserID, opts...).ToFunc()
}

// ByMatchedUserID orders the results by the matched_user_id field.
func ByMatchedUserID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMatchedUserID, opts...).ToFunc()
}

// ByRecordID orders the results by the record_id field.
func ByRecordID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRecordID, opts...).ToFunc()
}

// ByMatchedAt orders the results by the matched_at field.
func ByMatchedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMatchedAt, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByHadField orders the results by had field.
func ByHadField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newHadStep(), sql.OrderByField(field, opts...))
	}
}

// ByMakesField orders the results by makes field.
func ByMakesField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newMakesStep(), sql.OrderByField(field, opts...))
	}
}
func newHadStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(HadInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, HadTable, HadColumn),
	)
}
func newMakesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(MakesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, false, MakesTable, MakesColumn),
	)
}
