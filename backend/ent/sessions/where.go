// Code generated by ent, DO NOT EDIT.

package sessions

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/Hosi121/SpeakUp/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.SESSIONS {
	return predicate.SESSIONS(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.SESSIONS {
	return predicate.SESSIONS(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.SESSIONS {
	return predicate.SESSIONS(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.SESSIONS {
	return predicate.SESSIONS(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.SESSIONS {
	return predicate.SESSIONS(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.SESSIONS {
	return predicate.SESSIONS(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.SESSIONS {
	return predicate.SESSIONS(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.SESSIONS {
	return predicate.SESSIONS(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.SESSIONS {
	return predicate.SESSIONS(sql.FieldLTE(FieldID, id))
}

// SessionID applies equality check predicate on the "session_id" field. It's identical to SessionIDEQ.
func SessionID(v int) predicate.SESSIONS {
	return predicate.SESSIONS(sql.FieldEQ(FieldSessionID, v))
}

// SessionStart applies equality check predicate on the "session_start" field. It's identical to SessionStartEQ.
func SessionStart(v time.Time) predicate.SESSIONS {
	return predicate.SESSIONS(sql.FieldEQ(FieldSessionStart, v))
}

// SessionEnd applies equality check predicate on the "session_end" field. It's identical to SessionEndEQ.
func SessionEnd(v time.Time) predicate.SESSIONS {
	return predicate.SESSIONS(sql.FieldEQ(FieldSessionEnd, v))
}

// ThemeID applies equality check predicate on the "theme_id" field. It's identical to ThemeIDEQ.
func ThemeID(v int) predicate.SESSIONS {
	return predicate.SESSIONS(sql.FieldEQ(FieldThemeID, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.SESSIONS {
	return predicate.SESSIONS(sql.FieldEQ(FieldCreatedAt, v))
}

// SessionIDEQ applies the EQ predicate on the "session_id" field.
func SessionIDEQ(v int) predicate.SESSIONS {
	return predicate.SESSIONS(sql.FieldEQ(FieldSessionID, v))
}

// SessionIDNEQ applies the NEQ predicate on the "session_id" field.
func SessionIDNEQ(v int) predicate.SESSIONS {
	return predicate.SESSIONS(sql.FieldNEQ(FieldSessionID, v))
}

// SessionIDIn applies the In predicate on the "session_id" field.
func SessionIDIn(vs ...int) predicate.SESSIONS {
	return predicate.SESSIONS(sql.FieldIn(FieldSessionID, vs...))
}

// SessionIDNotIn applies the NotIn predicate on the "session_id" field.
func SessionIDNotIn(vs ...int) predicate.SESSIONS {
	return predicate.SESSIONS(sql.FieldNotIn(FieldSessionID, vs...))
}

// SessionIDGT applies the GT predicate on the "session_id" field.
func SessionIDGT(v int) predicate.SESSIONS {
	return predicate.SESSIONS(sql.FieldGT(FieldSessionID, v))
}

// SessionIDGTE applies the GTE predicate on the "session_id" field.
func SessionIDGTE(v int) predicate.SESSIONS {
	return predicate.SESSIONS(sql.FieldGTE(FieldSessionID, v))
}

// SessionIDLT applies the LT predicate on the "session_id" field.
func SessionIDLT(v int) predicate.SESSIONS {
	return predicate.SESSIONS(sql.FieldLT(FieldSessionID, v))
}

// SessionIDLTE applies the LTE predicate on the "session_id" field.
func SessionIDLTE(v int) predicate.SESSIONS {
	return predicate.SESSIONS(sql.FieldLTE(FieldSessionID, v))
}

// SessionStartEQ applies the EQ predicate on the "session_start" field.
func SessionStartEQ(v time.Time) predicate.SESSIONS {
	return predicate.SESSIONS(sql.FieldEQ(FieldSessionStart, v))
}

// SessionStartNEQ applies the NEQ predicate on the "session_start" field.
func SessionStartNEQ(v time.Time) predicate.SESSIONS {
	return predicate.SESSIONS(sql.FieldNEQ(FieldSessionStart, v))
}

// SessionStartIn applies the In predicate on the "session_start" field.
func SessionStartIn(vs ...time.Time) predicate.SESSIONS {
	return predicate.SESSIONS(sql.FieldIn(FieldSessionStart, vs...))
}

// SessionStartNotIn applies the NotIn predicate on the "session_start" field.
func SessionStartNotIn(vs ...time.Time) predicate.SESSIONS {
	return predicate.SESSIONS(sql.FieldNotIn(FieldSessionStart, vs...))
}

// SessionStartGT applies the GT predicate on the "session_start" field.
func SessionStartGT(v time.Time) predicate.SESSIONS {
	return predicate.SESSIONS(sql.FieldGT(FieldSessionStart, v))
}

// SessionStartGTE applies the GTE predicate on the "session_start" field.
func SessionStartGTE(v time.Time) predicate.SESSIONS {
	return predicate.SESSIONS(sql.FieldGTE(FieldSessionStart, v))
}

// SessionStartLT applies the LT predicate on the "session_start" field.
func SessionStartLT(v time.Time) predicate.SESSIONS {
	return predicate.SESSIONS(sql.FieldLT(FieldSessionStart, v))
}

// SessionStartLTE applies the LTE predicate on the "session_start" field.
func SessionStartLTE(v time.Time) predicate.SESSIONS {
	return predicate.SESSIONS(sql.FieldLTE(FieldSessionStart, v))
}

// SessionEndEQ applies the EQ predicate on the "session_end" field.
func SessionEndEQ(v time.Time) predicate.SESSIONS {
	return predicate.SESSIONS(sql.FieldEQ(FieldSessionEnd, v))
}

// SessionEndNEQ applies the NEQ predicate on the "session_end" field.
func SessionEndNEQ(v time.Time) predicate.SESSIONS {
	return predicate.SESSIONS(sql.FieldNEQ(FieldSessionEnd, v))
}

// SessionEndIn applies the In predicate on the "session_end" field.
func SessionEndIn(vs ...time.Time) predicate.SESSIONS {
	return predicate.SESSIONS(sql.FieldIn(FieldSessionEnd, vs...))
}

// SessionEndNotIn applies the NotIn predicate on the "session_end" field.
func SessionEndNotIn(vs ...time.Time) predicate.SESSIONS {
	return predicate.SESSIONS(sql.FieldNotIn(FieldSessionEnd, vs...))
}

// SessionEndGT applies the GT predicate on the "session_end" field.
func SessionEndGT(v time.Time) predicate.SESSIONS {
	return predicate.SESSIONS(sql.FieldGT(FieldSessionEnd, v))
}

// SessionEndGTE applies the GTE predicate on the "session_end" field.
func SessionEndGTE(v time.Time) predicate.SESSIONS {
	return predicate.SESSIONS(sql.FieldGTE(FieldSessionEnd, v))
}

// SessionEndLT applies the LT predicate on the "session_end" field.
func SessionEndLT(v time.Time) predicate.SESSIONS {
	return predicate.SESSIONS(sql.FieldLT(FieldSessionEnd, v))
}

// SessionEndLTE applies the LTE predicate on the "session_end" field.
func SessionEndLTE(v time.Time) predicate.SESSIONS {
	return predicate.SESSIONS(sql.FieldLTE(FieldSessionEnd, v))
}

// ThemeIDEQ applies the EQ predicate on the "theme_id" field.
func ThemeIDEQ(v int) predicate.SESSIONS {
	return predicate.SESSIONS(sql.FieldEQ(FieldThemeID, v))
}

// ThemeIDNEQ applies the NEQ predicate on the "theme_id" field.
func ThemeIDNEQ(v int) predicate.SESSIONS {
	return predicate.SESSIONS(sql.FieldNEQ(FieldThemeID, v))
}

// ThemeIDIn applies the In predicate on the "theme_id" field.
func ThemeIDIn(vs ...int) predicate.SESSIONS {
	return predicate.SESSIONS(sql.FieldIn(FieldThemeID, vs...))
}

// ThemeIDNotIn applies the NotIn predicate on the "theme_id" field.
func ThemeIDNotIn(vs ...int) predicate.SESSIONS {
	return predicate.SESSIONS(sql.FieldNotIn(FieldThemeID, vs...))
}

// ThemeIDGT applies the GT predicate on the "theme_id" field.
func ThemeIDGT(v int) predicate.SESSIONS {
	return predicate.SESSIONS(sql.FieldGT(FieldThemeID, v))
}

// ThemeIDGTE applies the GTE predicate on the "theme_id" field.
func ThemeIDGTE(v int) predicate.SESSIONS {
	return predicate.SESSIONS(sql.FieldGTE(FieldThemeID, v))
}

// ThemeIDLT applies the LT predicate on the "theme_id" field.
func ThemeIDLT(v int) predicate.SESSIONS {
	return predicate.SESSIONS(sql.FieldLT(FieldThemeID, v))
}

// ThemeIDLTE applies the LTE predicate on the "theme_id" field.
func ThemeIDLTE(v int) predicate.SESSIONS {
	return predicate.SESSIONS(sql.FieldLTE(FieldThemeID, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.SESSIONS {
	return predicate.SESSIONS(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.SESSIONS {
	return predicate.SESSIONS(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.SESSIONS {
	return predicate.SESSIONS(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.SESSIONS {
	return predicate.SESSIONS(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.SESSIONS {
	return predicate.SESSIONS(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.SESSIONS {
	return predicate.SESSIONS(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.SESSIONS {
	return predicate.SESSIONS(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.SESSIONS {
	return predicate.SESSIONS(sql.FieldLTE(FieldCreatedAt, v))
}

// HasHas applies the HasEdge predicate on the "has" edge.
func HasHas() predicate.SESSIONS {
	return predicate.SESSIONS(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, HasTable, HasColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasHasWith applies the HasEdge predicate on the "has" edge with a given conditions (other predicates).
func HasHasWith(preds ...predicate.MATCHINGS) predicate.SESSIONS {
	return predicate.SESSIONS(func(s *sql.Selector) {
		step := newHasStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasUses applies the HasEdge predicate on the "uses" edge.
func HasUses() predicate.SESSIONS {
	return predicate.SESSIONS(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, UsesTable, UsesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUsesWith applies the HasEdge predicate on the "uses" edge with a given conditions (other predicates).
func HasUsesWith(preds ...predicate.AITHEMES) predicate.SESSIONS {
	return predicate.SESSIONS(func(s *sql.Selector) {
		step := newUsesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.SESSIONS) predicate.SESSIONS {
	return predicate.SESSIONS(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.SESSIONS) predicate.SESSIONS {
	return predicate.SESSIONS(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.SESSIONS) predicate.SESSIONS {
	return predicate.SESSIONS(sql.NotPredicates(p))
}
