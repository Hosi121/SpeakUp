// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Hosi121/SpeakUp/ent/achievements"
	"github.com/Hosi121/SpeakUp/ent/event_records"
	"github.com/Hosi121/SpeakUp/ent/friends"
	"github.com/Hosi121/SpeakUp/ent/memos"
	"github.com/Hosi121/SpeakUp/ent/progress"
	"github.com/Hosi121/SpeakUp/ent/users"
)

// USERSCreate is the builder for creating a USERS entity.
type USERSCreate struct {
	config
	mutation *USERSMutation
	hooks    []Hook
}

// SetUsername sets the "username" field.
func (uc *USERSCreate) SetUsername(s string) *USERSCreate {
	uc.mutation.SetUsername(s)
	return uc
}

// SetEmail sets the "email" field.
func (uc *USERSCreate) SetEmail(s string) *USERSCreate {
	uc.mutation.SetEmail(s)
	return uc
}

// SetAvatarURL sets the "avatar_url" field.
func (uc *USERSCreate) SetAvatarURL(s string) *USERSCreate {
	uc.mutation.SetAvatarURL(s)
	return uc
}

// SetNillableAvatarURL sets the "avatar_url" field if the given value is not nil.
func (uc *USERSCreate) SetNillableAvatarURL(s *string) *USERSCreate {
	if s != nil {
		uc.SetAvatarURL(*s)
	}
	return uc
}

// SetRank sets the "rank" field.
func (uc *USERSCreate) SetRank(i int) *USERSCreate {
	uc.mutation.SetRank(i)
	return uc
}

// SetNillableRank sets the "rank" field if the given value is not nil.
func (uc *USERSCreate) SetNillableRank(i *int) *USERSCreate {
	if i != nil {
		uc.SetRank(*i)
	}
	return uc
}

// SetRole sets the "role" field.
func (uc *USERSCreate) SetRole(u users.Role) *USERSCreate {
	uc.mutation.SetRole(u)
	return uc
}

// SetCreatedAt sets the "created_at" field.
func (uc *USERSCreate) SetCreatedAt(t time.Time) *USERSCreate {
	uc.mutation.SetCreatedAt(t)
	return uc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (uc *USERSCreate) SetNillableCreatedAt(t *time.Time) *USERSCreate {
	if t != nil {
		uc.SetCreatedAt(*t)
	}
	return uc
}

// SetIsDeleted sets the "is_deleted" field.
func (uc *USERSCreate) SetIsDeleted(b bool) *USERSCreate {
	uc.mutation.SetIsDeleted(b)
	return uc
}

// SetNillableIsDeleted sets the "is_deleted" field if the given value is not nil.
func (uc *USERSCreate) SetNillableIsDeleted(b *bool) *USERSCreate {
	if b != nil {
		uc.SetIsDeleted(*b)
	}
	return uc
}

// SetUpdatedAt sets the "updated_at" field.
func (uc *USERSCreate) SetUpdatedAt(t time.Time) *USERSCreate {
	uc.mutation.SetUpdatedAt(t)
	return uc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (uc *USERSCreate) SetNillableUpdatedAt(t *time.Time) *USERSCreate {
	if t != nil {
		uc.SetUpdatedAt(*t)
	}
	return uc
}

// AddConnectIDs adds the "connects" edge to the FRIENDS entity by IDs.
func (uc *USERSCreate) AddConnectIDs(ids ...int) *USERSCreate {
	uc.mutation.AddConnectIDs(ids...)
	return uc
}

// AddConnects adds the "connects" edges to the FRIENDS entity.
func (uc *USERSCreate) AddConnects(f ...*FRIENDS) *USERSCreate {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return uc.AddConnectIDs(ids...)
}

// AddMakeIDs adds the "makes" edge to the EVENT_RECORDS entity by IDs.
func (uc *USERSCreate) AddMakeIDs(ids ...int) *USERSCreate {
	uc.mutation.AddMakeIDs(ids...)
	return uc
}

// AddMakes adds the "makes" edges to the EVENT_RECORDS entity.
func (uc *USERSCreate) AddMakes(e ...*EVENT_RECORDS) *USERSCreate {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return uc.AddMakeIDs(ids...)
}

// SetPreparesID sets the "prepares" edge to the MEMOS entity by ID.
func (uc *USERSCreate) SetPreparesID(id int) *USERSCreate {
	uc.mutation.SetPreparesID(id)
	return uc
}

// SetNillablePreparesID sets the "prepares" edge to the MEMOS entity by ID if the given value is not nil.
func (uc *USERSCreate) SetNillablePreparesID(id *int) *USERSCreate {
	if id != nil {
		uc = uc.SetPreparesID(*id)
	}
	return uc
}

// SetPrepares sets the "prepares" edge to the MEMOS entity.
func (uc *USERSCreate) SetPrepares(m *MEMOS) *USERSCreate {
	return uc.SetPreparesID(m.ID)
}

// AddAcquireIDs adds the "acquires" edge to the ACHIEVEMENTS entity by IDs.
func (uc *USERSCreate) AddAcquireIDs(ids ...int) *USERSCreate {
	uc.mutation.AddAcquireIDs(ids...)
	return uc
}

// AddAcquires adds the "acquires" edges to the ACHIEVEMENTS entity.
func (uc *USERSCreate) AddAcquires(a ...*ACHIEVEMENTS) *USERSCreate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return uc.AddAcquireIDs(ids...)
}

// SetRecordsID sets the "records" edge to the PROGRESS entity by ID.
func (uc *USERSCreate) SetRecordsID(id int) *USERSCreate {
	uc.mutation.SetRecordsID(id)
	return uc
}

// SetNillableRecordsID sets the "records" edge to the PROGRESS entity by ID if the given value is not nil.
func (uc *USERSCreate) SetNillableRecordsID(id *int) *USERSCreate {
	if id != nil {
		uc = uc.SetRecordsID(*id)
	}
	return uc
}

// SetRecords sets the "records" edge to the PROGRESS entity.
func (uc *USERSCreate) SetRecords(p *PROGRESS) *USERSCreate {
	return uc.SetRecordsID(p.ID)
}

// Mutation returns the USERSMutation object of the builder.
func (uc *USERSCreate) Mutation() *USERSMutation {
	return uc.mutation
}

// Save creates the USERS in the database.
func (uc *USERSCreate) Save(ctx context.Context) (*USERS, error) {
	uc.defaults()
	return withHooks(ctx, uc.sqlSave, uc.mutation, uc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (uc *USERSCreate) SaveX(ctx context.Context) *USERS {
	v, err := uc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (uc *USERSCreate) Exec(ctx context.Context) error {
	_, err := uc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uc *USERSCreate) ExecX(ctx context.Context) {
	if err := uc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (uc *USERSCreate) defaults() {
	if _, ok := uc.mutation.Rank(); !ok {
		v := users.DefaultRank
		uc.mutation.SetRank(v)
	}
	if _, ok := uc.mutation.CreatedAt(); !ok {
		v := users.DefaultCreatedAt()
		uc.mutation.SetCreatedAt(v)
	}
	if _, ok := uc.mutation.IsDeleted(); !ok {
		v := users.DefaultIsDeleted
		uc.mutation.SetIsDeleted(v)
	}
	if _, ok := uc.mutation.UpdatedAt(); !ok {
		v := users.DefaultUpdatedAt()
		uc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (uc *USERSCreate) check() error {
	if _, ok := uc.mutation.Username(); !ok {
		return &ValidationError{Name: "username", err: errors.New(`ent: missing required field "USERS.username"`)}
	}
	if v, ok := uc.mutation.Username(); ok {
		if err := users.UsernameValidator(v); err != nil {
			return &ValidationError{Name: "username", err: fmt.Errorf(`ent: validator failed for field "USERS.username": %w`, err)}
		}
	}
	if _, ok := uc.mutation.Email(); !ok {
		return &ValidationError{Name: "email", err: errors.New(`ent: missing required field "USERS.email"`)}
	}
	if v, ok := uc.mutation.Email(); ok {
		if err := users.EmailValidator(v); err != nil {
			return &ValidationError{Name: "email", err: fmt.Errorf(`ent: validator failed for field "USERS.email": %w`, err)}
		}
	}
	if _, ok := uc.mutation.Rank(); !ok {
		return &ValidationError{Name: "rank", err: errors.New(`ent: missing required field "USERS.rank"`)}
	}
	if v, ok := uc.mutation.Rank(); ok {
		if err := users.RankValidator(v); err != nil {
			return &ValidationError{Name: "rank", err: fmt.Errorf(`ent: validator failed for field "USERS.rank": %w`, err)}
		}
	}
	if _, ok := uc.mutation.Role(); !ok {
		return &ValidationError{Name: "role", err: errors.New(`ent: missing required field "USERS.role"`)}
	}
	if v, ok := uc.mutation.Role(); ok {
		if err := users.RoleValidator(v); err != nil {
			return &ValidationError{Name: "role", err: fmt.Errorf(`ent: validator failed for field "USERS.role": %w`, err)}
		}
	}
	if _, ok := uc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "USERS.created_at"`)}
	}
	if _, ok := uc.mutation.IsDeleted(); !ok {
		return &ValidationError{Name: "is_deleted", err: errors.New(`ent: missing required field "USERS.is_deleted"`)}
	}
	if _, ok := uc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "USERS.updated_at"`)}
	}
	return nil
}

func (uc *USERSCreate) sqlSave(ctx context.Context) (*USERS, error) {
	if err := uc.check(); err != nil {
		return nil, err
	}
	_node, _spec := uc.createSpec()
	if err := sqlgraph.CreateNode(ctx, uc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	uc.mutation.id = &_node.ID
	uc.mutation.done = true
	return _node, nil
}

func (uc *USERSCreate) createSpec() (*USERS, *sqlgraph.CreateSpec) {
	var (
		_node = &USERS{config: uc.config}
		_spec = sqlgraph.NewCreateSpec(users.Table, sqlgraph.NewFieldSpec(users.FieldID, field.TypeInt))
	)
	if value, ok := uc.mutation.Username(); ok {
		_spec.SetField(users.FieldUsername, field.TypeString, value)
		_node.Username = value
	}
	if value, ok := uc.mutation.Email(); ok {
		_spec.SetField(users.FieldEmail, field.TypeString, value)
		_node.Email = value
	}
	if value, ok := uc.mutation.AvatarURL(); ok {
		_spec.SetField(users.FieldAvatarURL, field.TypeString, value)
		_node.AvatarURL = value
	}
	if value, ok := uc.mutation.Rank(); ok {
		_spec.SetField(users.FieldRank, field.TypeInt, value)
		_node.Rank = value
	}
	if value, ok := uc.mutation.Role(); ok {
		_spec.SetField(users.FieldRole, field.TypeEnum, value)
		_node.Role = value
	}
	if value, ok := uc.mutation.CreatedAt(); ok {
		_spec.SetField(users.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := uc.mutation.IsDeleted(); ok {
		_spec.SetField(users.FieldIsDeleted, field.TypeBool, value)
		_node.IsDeleted = value
	}
	if value, ok := uc.mutation.UpdatedAt(); ok {
		_spec.SetField(users.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := uc.mutation.ConnectsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   users.ConnectsTable,
			Columns: users.ConnectsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(friends.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := uc.mutation.MakesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   users.MakesTable,
			Columns: []string{users.MakesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event_records.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := uc.mutation.PreparesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   users.PreparesTable,
			Columns: []string{users.PreparesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(memos.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := uc.mutation.AcquiresIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   users.AcquiresTable,
			Columns: []string{users.AcquiresColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(achievements.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := uc.mutation.RecordsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   users.RecordsTable,
			Columns: []string{users.RecordsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(progress.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// USERSCreateBulk is the builder for creating many USERS entities in bulk.
type USERSCreateBulk struct {
	config
	err      error
	builders []*USERSCreate
}

// Save creates the USERS entities in the database.
func (ucb *USERSCreateBulk) Save(ctx context.Context) ([]*USERS, error) {
	if ucb.err != nil {
		return nil, ucb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ucb.builders))
	nodes := make([]*USERS, len(ucb.builders))
	mutators := make([]Mutator, len(ucb.builders))
	for i := range ucb.builders {
		func(i int, root context.Context) {
			builder := ucb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*USERSMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ucb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ucb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ucb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ucb *USERSCreateBulk) SaveX(ctx context.Context) []*USERS {
	v, err := ucb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ucb *USERSCreateBulk) Exec(ctx context.Context) error {
	_, err := ucb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ucb *USERSCreateBulk) ExecX(ctx context.Context) {
	if err := ucb.Exec(ctx); err != nil {
		panic(err)
	}
}
