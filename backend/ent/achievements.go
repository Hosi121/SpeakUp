// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/Hosi121/SpeakUp/ent/achievements"
	"github.com/Hosi121/SpeakUp/ent/trophies"
	"github.com/Hosi121/SpeakUp/ent/users"
)

// ACHIEVEMENTS is the model entity for the ACHIEVEMENTS schema.
type ACHIEVEMENTS struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// UserID holds the value of the "user_id" field.
	UserID int `json:"user_id,omitempty"`
	// TrophyID holds the value of the "trophy_id" field.
	TrophyID int `json:"trophy_id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ACHIEVEMENTSQuery when eager-loading is set.
	Edges               ACHIEVEMENTSEdges `json:"edges"`
	achievements_refers *int
	users_acquires      *int
	selectValues        sql.SelectValues
}

// ACHIEVEMENTSEdges holds the relations/edges for other nodes in the graph.
type ACHIEVEMENTSEdges struct {
	// Granted holds the value of the granted edge.
	Granted *USERS `json:"granted,omitempty"`
	// Refers holds the value of the refers edge.
	Refers *TROPHIES `json:"refers,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// GrantedOrErr returns the Granted value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ACHIEVEMENTSEdges) GrantedOrErr() (*USERS, error) {
	if e.Granted != nil {
		return e.Granted, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: users.Label}
	}
	return nil, &NotLoadedError{edge: "granted"}
}

// RefersOrErr returns the Refers value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ACHIEVEMENTSEdges) RefersOrErr() (*TROPHIES, error) {
	if e.Refers != nil {
		return e.Refers, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: trophies.Label}
	}
	return nil, &NotLoadedError{edge: "refers"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ACHIEVEMENTS) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case achievements.FieldID, achievements.FieldUserID, achievements.FieldTrophyID:
			values[i] = new(sql.NullInt64)
		case achievements.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		case achievements.ForeignKeys[0]: // achievements_refers
			values[i] = new(sql.NullInt64)
		case achievements.ForeignKeys[1]: // users_acquires
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ACHIEVEMENTS fields.
func (a *ACHIEVEMENTS) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case achievements.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			a.ID = int(value.Int64)
		case achievements.FieldUserID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				a.UserID = int(value.Int64)
			}
		case achievements.FieldTrophyID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field trophy_id", values[i])
			} else if value.Valid {
				a.TrophyID = int(value.Int64)
			}
		case achievements.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				a.CreatedAt = value.Time
			}
		case achievements.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field achievements_refers", value)
			} else if value.Valid {
				a.achievements_refers = new(int)
				*a.achievements_refers = int(value.Int64)
			}
		case achievements.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field users_acquires", value)
			} else if value.Valid {
				a.users_acquires = new(int)
				*a.users_acquires = int(value.Int64)
			}
		default:
			a.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ACHIEVEMENTS.
// This includes values selected through modifiers, order, etc.
func (a *ACHIEVEMENTS) Value(name string) (ent.Value, error) {
	return a.selectValues.Get(name)
}

// QueryGranted queries the "granted" edge of the ACHIEVEMENTS entity.
func (a *ACHIEVEMENTS) QueryGranted() *USERSQuery {
	return NewACHIEVEMENTSClient(a.config).QueryGranted(a)
}

// QueryRefers queries the "refers" edge of the ACHIEVEMENTS entity.
func (a *ACHIEVEMENTS) QueryRefers() *TROPHIESQuery {
	return NewACHIEVEMENTSClient(a.config).QueryRefers(a)
}

// Update returns a builder for updating this ACHIEVEMENTS.
// Note that you need to call ACHIEVEMENTS.Unwrap() before calling this method if this ACHIEVEMENTS
// was returned from a transaction, and the transaction was committed or rolled back.
func (a *ACHIEVEMENTS) Update() *ACHIEVEMENTSUpdateOne {
	return NewACHIEVEMENTSClient(a.config).UpdateOne(a)
}

// Unwrap unwraps the ACHIEVEMENTS entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (a *ACHIEVEMENTS) Unwrap() *ACHIEVEMENTS {
	_tx, ok := a.config.driver.(*txDriver)
	if !ok {
		panic("ent: ACHIEVEMENTS is not a transactional entity")
	}
	a.config.driver = _tx.drv
	return a
}

// String implements the fmt.Stringer.
func (a *ACHIEVEMENTS) String() string {
	var builder strings.Builder
	builder.WriteString("ACHIEVEMENTS(")
	builder.WriteString(fmt.Sprintf("id=%v, ", a.ID))
	builder.WriteString("user_id=")
	builder.WriteString(fmt.Sprintf("%v", a.UserID))
	builder.WriteString(", ")
	builder.WriteString("trophy_id=")
	builder.WriteString(fmt.Sprintf("%v", a.TrophyID))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(a.CreatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// ACHIEVEMENTSs is a parsable slice of ACHIEVEMENTS.
type ACHIEVEMENTSs []*ACHIEVEMENTS
