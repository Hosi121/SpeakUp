// Code generated by ent, DO NOT EDIT.

package aithemes

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the aithemes type in the database.
	Label = "aithemes"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldThemeText holds the string denoting the theme_text field in the database.
	FieldThemeText = "theme_text"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// EdgeUsed holds the string denoting the used edge name in mutations.
	EdgeUsed = "used"
	// Table holds the table name of the aithemes in the database.
	Table = "aitheme_ss"
	// UsedTable is the table that holds the used relation/edge.
	UsedTable = "session_ss"
	// UsedInverseTable is the table name for the SESSIONS entity.
	// It exists in this package in order to avoid circular dependency with the "sessions" package.
	UsedInverseTable = "session_ss"
	// UsedColumn is the table column denoting the used relation/edge.
	UsedColumn = "sessions_uses"
)

// Columns holds all SQL columns for aithemes fields.
var Columns = []string{
	FieldID,
	FieldThemeText,
	FieldCreatedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt time.Time
)

// OrderOption defines the ordering options for the AITHEMES queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByThemeText orders the results by the theme_text field.
func ByThemeText(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldThemeText, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUsedCount orders the results by used count.
func ByUsedCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newUsedStep(), opts...)
	}
}

// ByUsed orders the results by used terms.
func ByUsed(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUsedStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newUsedStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UsedInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, UsedTable, UsedColumn),
	)
}
