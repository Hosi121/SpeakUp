// Code generated by ent, DO NOT EDIT.

package chats

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/Hosi121/SpeakUp/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.CHATS {
	return predicate.CHATS(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.CHATS {
	return predicate.CHATS(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.CHATS {
	return predicate.CHATS(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.CHATS {
	return predicate.CHATS(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.CHATS {
	return predicate.CHATS(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.CHATS {
	return predicate.CHATS(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.CHATS {
	return predicate.CHATS(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.CHATS {
	return predicate.CHATS(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.CHATS {
	return predicate.CHATS(sql.FieldLTE(FieldID, id))
}

// FriendID applies equality check predicate on the "friend_id" field. It's identical to FriendIDEQ.
func FriendID(v int) predicate.CHATS {
	return predicate.CHATS(sql.FieldEQ(FieldFriendID, v))
}

// Message applies equality check predicate on the "message" field. It's identical to MessageEQ.
func Message(v string) predicate.CHATS {
	return predicate.CHATS(sql.FieldEQ(FieldMessage, v))
}

// IsRecieved applies equality check predicate on the "is_recieved" field. It's identical to IsRecievedEQ.
func IsRecieved(v bool) predicate.CHATS {
	return predicate.CHATS(sql.FieldEQ(FieldIsRecieved, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.CHATS {
	return predicate.CHATS(sql.FieldEQ(FieldCreatedAt, v))
}

// FriendIDEQ applies the EQ predicate on the "friend_id" field.
func FriendIDEQ(v int) predicate.CHATS {
	return predicate.CHATS(sql.FieldEQ(FieldFriendID, v))
}

// FriendIDNEQ applies the NEQ predicate on the "friend_id" field.
func FriendIDNEQ(v int) predicate.CHATS {
	return predicate.CHATS(sql.FieldNEQ(FieldFriendID, v))
}

// FriendIDIn applies the In predicate on the "friend_id" field.
func FriendIDIn(vs ...int) predicate.CHATS {
	return predicate.CHATS(sql.FieldIn(FieldFriendID, vs...))
}

// FriendIDNotIn applies the NotIn predicate on the "friend_id" field.
func FriendIDNotIn(vs ...int) predicate.CHATS {
	return predicate.CHATS(sql.FieldNotIn(FieldFriendID, vs...))
}

// FriendIDGT applies the GT predicate on the "friend_id" field.
func FriendIDGT(v int) predicate.CHATS {
	return predicate.CHATS(sql.FieldGT(FieldFriendID, v))
}

// FriendIDGTE applies the GTE predicate on the "friend_id" field.
func FriendIDGTE(v int) predicate.CHATS {
	return predicate.CHATS(sql.FieldGTE(FieldFriendID, v))
}

// FriendIDLT applies the LT predicate on the "friend_id" field.
func FriendIDLT(v int) predicate.CHATS {
	return predicate.CHATS(sql.FieldLT(FieldFriendID, v))
}

// FriendIDLTE applies the LTE predicate on the "friend_id" field.
func FriendIDLTE(v int) predicate.CHATS {
	return predicate.CHATS(sql.FieldLTE(FieldFriendID, v))
}

// MessageEQ applies the EQ predicate on the "message" field.
func MessageEQ(v string) predicate.CHATS {
	return predicate.CHATS(sql.FieldEQ(FieldMessage, v))
}

// MessageNEQ applies the NEQ predicate on the "message" field.
func MessageNEQ(v string) predicate.CHATS {
	return predicate.CHATS(sql.FieldNEQ(FieldMessage, v))
}

// MessageIn applies the In predicate on the "message" field.
func MessageIn(vs ...string) predicate.CHATS {
	return predicate.CHATS(sql.FieldIn(FieldMessage, vs...))
}

// MessageNotIn applies the NotIn predicate on the "message" field.
func MessageNotIn(vs ...string) predicate.CHATS {
	return predicate.CHATS(sql.FieldNotIn(FieldMessage, vs...))
}

// MessageGT applies the GT predicate on the "message" field.
func MessageGT(v string) predicate.CHATS {
	return predicate.CHATS(sql.FieldGT(FieldMessage, v))
}

// MessageGTE applies the GTE predicate on the "message" field.
func MessageGTE(v string) predicate.CHATS {
	return predicate.CHATS(sql.FieldGTE(FieldMessage, v))
}

// MessageLT applies the LT predicate on the "message" field.
func MessageLT(v string) predicate.CHATS {
	return predicate.CHATS(sql.FieldLT(FieldMessage, v))
}

// MessageLTE applies the LTE predicate on the "message" field.
func MessageLTE(v string) predicate.CHATS {
	return predicate.CHATS(sql.FieldLTE(FieldMessage, v))
}

// MessageContains applies the Contains predicate on the "message" field.
func MessageContains(v string) predicate.CHATS {
	return predicate.CHATS(sql.FieldContains(FieldMessage, v))
}

// MessageHasPrefix applies the HasPrefix predicate on the "message" field.
func MessageHasPrefix(v string) predicate.CHATS {
	return predicate.CHATS(sql.FieldHasPrefix(FieldMessage, v))
}

// MessageHasSuffix applies the HasSuffix predicate on the "message" field.
func MessageHasSuffix(v string) predicate.CHATS {
	return predicate.CHATS(sql.FieldHasSuffix(FieldMessage, v))
}

// MessageEqualFold applies the EqualFold predicate on the "message" field.
func MessageEqualFold(v string) predicate.CHATS {
	return predicate.CHATS(sql.FieldEqualFold(FieldMessage, v))
}

// MessageContainsFold applies the ContainsFold predicate on the "message" field.
func MessageContainsFold(v string) predicate.CHATS {
	return predicate.CHATS(sql.FieldContainsFold(FieldMessage, v))
}

// IsRecievedEQ applies the EQ predicate on the "is_recieved" field.
func IsRecievedEQ(v bool) predicate.CHATS {
	return predicate.CHATS(sql.FieldEQ(FieldIsRecieved, v))
}

// IsRecievedNEQ applies the NEQ predicate on the "is_recieved" field.
func IsRecievedNEQ(v bool) predicate.CHATS {
	return predicate.CHATS(sql.FieldNEQ(FieldIsRecieved, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.CHATS {
	return predicate.CHATS(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.CHATS {
	return predicate.CHATS(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.CHATS {
	return predicate.CHATS(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.CHATS {
	return predicate.CHATS(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.CHATS {
	return predicate.CHATS(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.CHATS {
	return predicate.CHATS(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.CHATS {
	return predicate.CHATS(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.CHATS {
	return predicate.CHATS(sql.FieldLTE(FieldCreatedAt, v))
}

// HasHad applies the HasEdge predicate on the "had" edge.
func HasHad() predicate.CHATS {
	return predicate.CHATS(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, HadTable, HadColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasHadWith applies the HasEdge predicate on the "had" edge with a given conditions (other predicates).
func HasHadWith(preds ...predicate.FRIENDS) predicate.CHATS {
	return predicate.CHATS(func(s *sql.Selector) {
		step := newHadStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.CHATS) predicate.CHATS {
	return predicate.CHATS(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.CHATS) predicate.CHATS {
	return predicate.CHATS(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.CHATS) predicate.CHATS {
	return predicate.CHATS(sql.NotPredicates(p))
}
