// Code generated by ent, DO NOT EDIT.

package chats

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the chats type in the database.
	Label = "chats"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldFriendID holds the string denoting the friend_id field in the database.
	FieldFriendID = "friend_id"
	// FieldMessage holds the string denoting the message field in the database.
	FieldMessage = "message"
	// FieldIsRecieved holds the string denoting the is_recieved field in the database.
	FieldIsRecieved = "is_recieved"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// EdgeHad holds the string denoting the had edge name in mutations.
	EdgeHad = "had"
	// Table holds the table name of the chats in the database.
	Table = "chat_ss"
	// HadTable is the table that holds the had relation/edge.
	HadTable = "chat_ss"
	// HadInverseTable is the table name for the FRIENDS entity.
	// It exists in this package in order to avoid circular dependency with the "friends" package.
	HadInverseTable = "friend_ss"
	// HadColumn is the table column denoting the had relation/edge.
	HadColumn = "friends_has"
)

// Columns holds all SQL columns for chats fields.
var Columns = []string{
	FieldID,
	FieldFriendID,
	FieldMessage,
	FieldIsRecieved,
	FieldCreatedAt,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "chat_ss"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"friends_has",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// MessageValidator is a validator for the "message" field. It is called by the builders before save.
	MessageValidator func(string) error
	// DefaultIsRecieved holds the default value on creation for the "is_recieved" field.
	DefaultIsRecieved bool
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
)

// OrderOption defines the ordering options for the CHATS queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByFriendID orders the results by the friend_id field.
func ByFriendID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFriendID, opts...).ToFunc()
}

// ByMessage orders the results by the message field.
func ByMessage(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMessage, opts...).ToFunc()
}

// ByIsRecieved orders the results by the is_recieved field.
func ByIsRecieved(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsRecieved, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByHadField orders the results by had field.
func ByHadField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newHadStep(), sql.OrderByField(field, opts...))
	}
}
func newHadStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(HadInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, HadTable, HadColumn),
	)
}
