// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Hosi121/SpeakUp/ent/aithemes"
	"github.com/Hosi121/SpeakUp/ent/matchings"
	"github.com/Hosi121/SpeakUp/ent/predicate"
	"github.com/Hosi121/SpeakUp/ent/sessions"
)

// SESSIONSUpdate is the builder for updating SESSIONS entities.
type SESSIONSUpdate struct {
	config
	hooks    []Hook
	mutation *SESSIONSMutation
}

// Where appends a list predicates to the SESSIONSUpdate builder.
func (su *SESSIONSUpdate) Where(ps ...predicate.SESSIONS) *SESSIONSUpdate {
	su.mutation.Where(ps...)
	return su
}

// SetSessionID sets the "session_id" field.
func (su *SESSIONSUpdate) SetSessionID(i int) *SESSIONSUpdate {
	su.mutation.ResetSessionID()
	su.mutation.SetSessionID(i)
	return su
}

// SetNillableSessionID sets the "session_id" field if the given value is not nil.
func (su *SESSIONSUpdate) SetNillableSessionID(i *int) *SESSIONSUpdate {
	if i != nil {
		su.SetSessionID(*i)
	}
	return su
}

// AddSessionID adds i to the "session_id" field.
func (su *SESSIONSUpdate) AddSessionID(i int) *SESSIONSUpdate {
	su.mutation.AddSessionID(i)
	return su
}

// SetSessionStart sets the "session_start" field.
func (su *SESSIONSUpdate) SetSessionStart(t time.Time) *SESSIONSUpdate {
	su.mutation.SetSessionStart(t)
	return su
}

// SetNillableSessionStart sets the "session_start" field if the given value is not nil.
func (su *SESSIONSUpdate) SetNillableSessionStart(t *time.Time) *SESSIONSUpdate {
	if t != nil {
		su.SetSessionStart(*t)
	}
	return su
}

// SetSessionEnd sets the "session_end" field.
func (su *SESSIONSUpdate) SetSessionEnd(t time.Time) *SESSIONSUpdate {
	su.mutation.SetSessionEnd(t)
	return su
}

// SetNillableSessionEnd sets the "session_end" field if the given value is not nil.
func (su *SESSIONSUpdate) SetNillableSessionEnd(t *time.Time) *SESSIONSUpdate {
	if t != nil {
		su.SetSessionEnd(*t)
	}
	return su
}

// SetThemeID sets the "theme_id" field.
func (su *SESSIONSUpdate) SetThemeID(i int) *SESSIONSUpdate {
	su.mutation.ResetThemeID()
	su.mutation.SetThemeID(i)
	return su
}

// SetNillableThemeID sets the "theme_id" field if the given value is not nil.
func (su *SESSIONSUpdate) SetNillableThemeID(i *int) *SESSIONSUpdate {
	if i != nil {
		su.SetThemeID(*i)
	}
	return su
}

// AddThemeID adds i to the "theme_id" field.
func (su *SESSIONSUpdate) AddThemeID(i int) *SESSIONSUpdate {
	su.mutation.AddThemeID(i)
	return su
}

// SetCreatedAt sets the "created_at" field.
func (su *SESSIONSUpdate) SetCreatedAt(t time.Time) *SESSIONSUpdate {
	su.mutation.SetCreatedAt(t)
	return su
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (su *SESSIONSUpdate) SetNillableCreatedAt(t *time.Time) *SESSIONSUpdate {
	if t != nil {
		su.SetCreatedAt(*t)
	}
	return su
}

// AddHaIDs adds the "has" edge to the MATCHINGS entity by IDs.
func (su *SESSIONSUpdate) AddHaIDs(ids ...int) *SESSIONSUpdate {
	su.mutation.AddHaIDs(ids...)
	return su
}

// AddHas adds the "has" edges to the MATCHINGS entity.
func (su *SESSIONSUpdate) AddHas(m ...*MATCHINGS) *SESSIONSUpdate {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return su.AddHaIDs(ids...)
}

// SetUsesID sets the "uses" edge to the AITHEMES entity by ID.
func (su *SESSIONSUpdate) SetUsesID(id int) *SESSIONSUpdate {
	su.mutation.SetUsesID(id)
	return su
}

// SetNillableUsesID sets the "uses" edge to the AITHEMES entity by ID if the given value is not nil.
func (su *SESSIONSUpdate) SetNillableUsesID(id *int) *SESSIONSUpdate {
	if id != nil {
		su = su.SetUsesID(*id)
	}
	return su
}

// SetUses sets the "uses" edge to the AITHEMES entity.
func (su *SESSIONSUpdate) SetUses(a *AITHEMES) *SESSIONSUpdate {
	return su.SetUsesID(a.ID)
}

// Mutation returns the SESSIONSMutation object of the builder.
func (su *SESSIONSUpdate) Mutation() *SESSIONSMutation {
	return su.mutation
}

// ClearHas clears all "has" edges to the MATCHINGS entity.
func (su *SESSIONSUpdate) ClearHas() *SESSIONSUpdate {
	su.mutation.ClearHas()
	return su
}

// RemoveHaIDs removes the "has" edge to MATCHINGS entities by IDs.
func (su *SESSIONSUpdate) RemoveHaIDs(ids ...int) *SESSIONSUpdate {
	su.mutation.RemoveHaIDs(ids...)
	return su
}

// RemoveHas removes "has" edges to MATCHINGS entities.
func (su *SESSIONSUpdate) RemoveHas(m ...*MATCHINGS) *SESSIONSUpdate {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return su.RemoveHaIDs(ids...)
}

// ClearUses clears the "uses" edge to the AITHEMES entity.
func (su *SESSIONSUpdate) ClearUses() *SESSIONSUpdate {
	su.mutation.ClearUses()
	return su
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (su *SESSIONSUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, su.sqlSave, su.mutation, su.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (su *SESSIONSUpdate) SaveX(ctx context.Context) int {
	affected, err := su.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (su *SESSIONSUpdate) Exec(ctx context.Context) error {
	_, err := su.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (su *SESSIONSUpdate) ExecX(ctx context.Context) {
	if err := su.Exec(ctx); err != nil {
		panic(err)
	}
}

func (su *SESSIONSUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(sessions.Table, sessions.Columns, sqlgraph.NewFieldSpec(sessions.FieldID, field.TypeInt))
	if ps := su.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := su.mutation.SessionID(); ok {
		_spec.SetField(sessions.FieldSessionID, field.TypeInt, value)
	}
	if value, ok := su.mutation.AddedSessionID(); ok {
		_spec.AddField(sessions.FieldSessionID, field.TypeInt, value)
	}
	if value, ok := su.mutation.SessionStart(); ok {
		_spec.SetField(sessions.FieldSessionStart, field.TypeTime, value)
	}
	if value, ok := su.mutation.SessionEnd(); ok {
		_spec.SetField(sessions.FieldSessionEnd, field.TypeTime, value)
	}
	if value, ok := su.mutation.ThemeID(); ok {
		_spec.SetField(sessions.FieldThemeID, field.TypeInt, value)
	}
	if value, ok := su.mutation.AddedThemeID(); ok {
		_spec.AddField(sessions.FieldThemeID, field.TypeInt, value)
	}
	if value, ok := su.mutation.CreatedAt(); ok {
		_spec.SetField(sessions.FieldCreatedAt, field.TypeTime, value)
	}
	if su.mutation.HasCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   sessions.HasTable,
			Columns: []string{sessions.HasColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(matchings.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.RemovedHasIDs(); len(nodes) > 0 && !su.mutation.HasCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   sessions.HasTable,
			Columns: []string{sessions.HasColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(matchings.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.HasIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   sessions.HasTable,
			Columns: []string{sessions.HasColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(matchings.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if su.mutation.UsesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   sessions.UsesTable,
			Columns: []string{sessions.UsesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(aithemes.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.UsesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   sessions.UsesTable,
			Columns: []string{sessions.UsesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(aithemes.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, su.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{sessions.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	su.mutation.done = true
	return n, nil
}

// SESSIONSUpdateOne is the builder for updating a single SESSIONS entity.
type SESSIONSUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *SESSIONSMutation
}

// SetSessionID sets the "session_id" field.
func (suo *SESSIONSUpdateOne) SetSessionID(i int) *SESSIONSUpdateOne {
	suo.mutation.ResetSessionID()
	suo.mutation.SetSessionID(i)
	return suo
}

// SetNillableSessionID sets the "session_id" field if the given value is not nil.
func (suo *SESSIONSUpdateOne) SetNillableSessionID(i *int) *SESSIONSUpdateOne {
	if i != nil {
		suo.SetSessionID(*i)
	}
	return suo
}

// AddSessionID adds i to the "session_id" field.
func (suo *SESSIONSUpdateOne) AddSessionID(i int) *SESSIONSUpdateOne {
	suo.mutation.AddSessionID(i)
	return suo
}

// SetSessionStart sets the "session_start" field.
func (suo *SESSIONSUpdateOne) SetSessionStart(t time.Time) *SESSIONSUpdateOne {
	suo.mutation.SetSessionStart(t)
	return suo
}

// SetNillableSessionStart sets the "session_start" field if the given value is not nil.
func (suo *SESSIONSUpdateOne) SetNillableSessionStart(t *time.Time) *SESSIONSUpdateOne {
	if t != nil {
		suo.SetSessionStart(*t)
	}
	return suo
}

// SetSessionEnd sets the "session_end" field.
func (suo *SESSIONSUpdateOne) SetSessionEnd(t time.Time) *SESSIONSUpdateOne {
	suo.mutation.SetSessionEnd(t)
	return suo
}

// SetNillableSessionEnd sets the "session_end" field if the given value is not nil.
func (suo *SESSIONSUpdateOne) SetNillableSessionEnd(t *time.Time) *SESSIONSUpdateOne {
	if t != nil {
		suo.SetSessionEnd(*t)
	}
	return suo
}

// SetThemeID sets the "theme_id" field.
func (suo *SESSIONSUpdateOne) SetThemeID(i int) *SESSIONSUpdateOne {
	suo.mutation.ResetThemeID()
	suo.mutation.SetThemeID(i)
	return suo
}

// SetNillableThemeID sets the "theme_id" field if the given value is not nil.
func (suo *SESSIONSUpdateOne) SetNillableThemeID(i *int) *SESSIONSUpdateOne {
	if i != nil {
		suo.SetThemeID(*i)
	}
	return suo
}

// AddThemeID adds i to the "theme_id" field.
func (suo *SESSIONSUpdateOne) AddThemeID(i int) *SESSIONSUpdateOne {
	suo.mutation.AddThemeID(i)
	return suo
}

// SetCreatedAt sets the "created_at" field.
func (suo *SESSIONSUpdateOne) SetCreatedAt(t time.Time) *SESSIONSUpdateOne {
	suo.mutation.SetCreatedAt(t)
	return suo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (suo *SESSIONSUpdateOne) SetNillableCreatedAt(t *time.Time) *SESSIONSUpdateOne {
	if t != nil {
		suo.SetCreatedAt(*t)
	}
	return suo
}

// AddHaIDs adds the "has" edge to the MATCHINGS entity by IDs.
func (suo *SESSIONSUpdateOne) AddHaIDs(ids ...int) *SESSIONSUpdateOne {
	suo.mutation.AddHaIDs(ids...)
	return suo
}

// AddHas adds the "has" edges to the MATCHINGS entity.
func (suo *SESSIONSUpdateOne) AddHas(m ...*MATCHINGS) *SESSIONSUpdateOne {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return suo.AddHaIDs(ids...)
}

// SetUsesID sets the "uses" edge to the AITHEMES entity by ID.
func (suo *SESSIONSUpdateOne) SetUsesID(id int) *SESSIONSUpdateOne {
	suo.mutation.SetUsesID(id)
	return suo
}

// SetNillableUsesID sets the "uses" edge to the AITHEMES entity by ID if the given value is not nil.
func (suo *SESSIONSUpdateOne) SetNillableUsesID(id *int) *SESSIONSUpdateOne {
	if id != nil {
		suo = suo.SetUsesID(*id)
	}
	return suo
}

// SetUses sets the "uses" edge to the AITHEMES entity.
func (suo *SESSIONSUpdateOne) SetUses(a *AITHEMES) *SESSIONSUpdateOne {
	return suo.SetUsesID(a.ID)
}

// Mutation returns the SESSIONSMutation object of the builder.
func (suo *SESSIONSUpdateOne) Mutation() *SESSIONSMutation {
	return suo.mutation
}

// ClearHas clears all "has" edges to the MATCHINGS entity.
func (suo *SESSIONSUpdateOne) ClearHas() *SESSIONSUpdateOne {
	suo.mutation.ClearHas()
	return suo
}

// RemoveHaIDs removes the "has" edge to MATCHINGS entities by IDs.
func (suo *SESSIONSUpdateOne) RemoveHaIDs(ids ...int) *SESSIONSUpdateOne {
	suo.mutation.RemoveHaIDs(ids...)
	return suo
}

// RemoveHas removes "has" edges to MATCHINGS entities.
func (suo *SESSIONSUpdateOne) RemoveHas(m ...*MATCHINGS) *SESSIONSUpdateOne {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return suo.RemoveHaIDs(ids...)
}

// ClearUses clears the "uses" edge to the AITHEMES entity.
func (suo *SESSIONSUpdateOne) ClearUses() *SESSIONSUpdateOne {
	suo.mutation.ClearUses()
	return suo
}

// Where appends a list predicates to the SESSIONSUpdate builder.
func (suo *SESSIONSUpdateOne) Where(ps ...predicate.SESSIONS) *SESSIONSUpdateOne {
	suo.mutation.Where(ps...)
	return suo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (suo *SESSIONSUpdateOne) Select(field string, fields ...string) *SESSIONSUpdateOne {
	suo.fields = append([]string{field}, fields...)
	return suo
}

// Save executes the query and returns the updated SESSIONS entity.
func (suo *SESSIONSUpdateOne) Save(ctx context.Context) (*SESSIONS, error) {
	return withHooks(ctx, suo.sqlSave, suo.mutation, suo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (suo *SESSIONSUpdateOne) SaveX(ctx context.Context) *SESSIONS {
	node, err := suo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (suo *SESSIONSUpdateOne) Exec(ctx context.Context) error {
	_, err := suo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (suo *SESSIONSUpdateOne) ExecX(ctx context.Context) {
	if err := suo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (suo *SESSIONSUpdateOne) sqlSave(ctx context.Context) (_node *SESSIONS, err error) {
	_spec := sqlgraph.NewUpdateSpec(sessions.Table, sessions.Columns, sqlgraph.NewFieldSpec(sessions.FieldID, field.TypeInt))
	id, ok := suo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "SESSIONS.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := suo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, sessions.FieldID)
		for _, f := range fields {
			if !sessions.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != sessions.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := suo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := suo.mutation.SessionID(); ok {
		_spec.SetField(sessions.FieldSessionID, field.TypeInt, value)
	}
	if value, ok := suo.mutation.AddedSessionID(); ok {
		_spec.AddField(sessions.FieldSessionID, field.TypeInt, value)
	}
	if value, ok := suo.mutation.SessionStart(); ok {
		_spec.SetField(sessions.FieldSessionStart, field.TypeTime, value)
	}
	if value, ok := suo.mutation.SessionEnd(); ok {
		_spec.SetField(sessions.FieldSessionEnd, field.TypeTime, value)
	}
	if value, ok := suo.mutation.ThemeID(); ok {
		_spec.SetField(sessions.FieldThemeID, field.TypeInt, value)
	}
	if value, ok := suo.mutation.AddedThemeID(); ok {
		_spec.AddField(sessions.FieldThemeID, field.TypeInt, value)
	}
	if value, ok := suo.mutation.CreatedAt(); ok {
		_spec.SetField(sessions.FieldCreatedAt, field.TypeTime, value)
	}
	if suo.mutation.HasCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   sessions.HasTable,
			Columns: []string{sessions.HasColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(matchings.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.RemovedHasIDs(); len(nodes) > 0 && !suo.mutation.HasCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   sessions.HasTable,
			Columns: []string{sessions.HasColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(matchings.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.HasIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   sessions.HasTable,
			Columns: []string{sessions.HasColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(matchings.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suo.mutation.UsesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   sessions.UsesTable,
			Columns: []string{sessions.UsesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(aithemes.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.UsesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   sessions.UsesTable,
			Columns: []string{sessions.UsesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(aithemes.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &SESSIONS{config: suo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, suo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{sessions.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	suo.mutation.done = true
	return _node, nil
}
