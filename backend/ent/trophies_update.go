// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Hosi121/SpeakUp/ent/achievements"
	"github.com/Hosi121/SpeakUp/ent/predicate"
	"github.com/Hosi121/SpeakUp/ent/trophies"
)

// TROPHIESUpdate is the builder for updating TROPHIES entities.
type TROPHIESUpdate struct {
	config
	hooks    []Hook
	mutation *TROPHIESMutation
}

// Where appends a list predicates to the TROPHIESUpdate builder.
func (tu *TROPHIESUpdate) Where(ps ...predicate.TROPHIES) *TROPHIESUpdate {
	tu.mutation.Where(ps...)
	return tu
}

// SetTitle sets the "title" field.
func (tu *TROPHIESUpdate) SetTitle(s string) *TROPHIESUpdate {
	tu.mutation.SetTitle(s)
	return tu
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (tu *TROPHIESUpdate) SetNillableTitle(s *string) *TROPHIESUpdate {
	if s != nil {
		tu.SetTitle(*s)
	}
	return tu
}

// SetContents sets the "contents" field.
func (tu *TROPHIESUpdate) SetContents(s string) *TROPHIESUpdate {
	tu.mutation.SetContents(s)
	return tu
}

// SetNillableContents sets the "contents" field if the given value is not nil.
func (tu *TROPHIESUpdate) SetNillableContents(s *string) *TROPHIESUpdate {
	if s != nil {
		tu.SetContents(*s)
	}
	return tu
}

// SetRequirement sets the "requirement" field.
func (tu *TROPHIESUpdate) SetRequirement(s string) *TROPHIESUpdate {
	tu.mutation.SetRequirement(s)
	return tu
}

// SetNillableRequirement sets the "requirement" field if the given value is not nil.
func (tu *TROPHIESUpdate) SetNillableRequirement(s *string) *TROPHIESUpdate {
	if s != nil {
		tu.SetRequirement(*s)
	}
	return tu
}

// AddReferedIDs adds the "refered" edge to the ACHIEVEMENTS entity by IDs.
func (tu *TROPHIESUpdate) AddReferedIDs(ids ...int) *TROPHIESUpdate {
	tu.mutation.AddReferedIDs(ids...)
	return tu
}

// AddRefered adds the "refered" edges to the ACHIEVEMENTS entity.
func (tu *TROPHIESUpdate) AddRefered(a ...*ACHIEVEMENTS) *TROPHIESUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return tu.AddReferedIDs(ids...)
}

// Mutation returns the TROPHIESMutation object of the builder.
func (tu *TROPHIESUpdate) Mutation() *TROPHIESMutation {
	return tu.mutation
}

// ClearRefered clears all "refered" edges to the ACHIEVEMENTS entity.
func (tu *TROPHIESUpdate) ClearRefered() *TROPHIESUpdate {
	tu.mutation.ClearRefered()
	return tu
}

// RemoveReferedIDs removes the "refered" edge to ACHIEVEMENTS entities by IDs.
func (tu *TROPHIESUpdate) RemoveReferedIDs(ids ...int) *TROPHIESUpdate {
	tu.mutation.RemoveReferedIDs(ids...)
	return tu
}

// RemoveRefered removes "refered" edges to ACHIEVEMENTS entities.
func (tu *TROPHIESUpdate) RemoveRefered(a ...*ACHIEVEMENTS) *TROPHIESUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return tu.RemoveReferedIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tu *TROPHIESUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, tu.sqlSave, tu.mutation, tu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tu *TROPHIESUpdate) SaveX(ctx context.Context) int {
	affected, err := tu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tu *TROPHIESUpdate) Exec(ctx context.Context) error {
	_, err := tu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tu *TROPHIESUpdate) ExecX(ctx context.Context) {
	if err := tu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (tu *TROPHIESUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(trophies.Table, trophies.Columns, sqlgraph.NewFieldSpec(trophies.FieldID, field.TypeInt))
	if ps := tu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tu.mutation.Title(); ok {
		_spec.SetField(trophies.FieldTitle, field.TypeString, value)
	}
	if value, ok := tu.mutation.Contents(); ok {
		_spec.SetField(trophies.FieldContents, field.TypeString, value)
	}
	if value, ok := tu.mutation.Requirement(); ok {
		_spec.SetField(trophies.FieldRequirement, field.TypeString, value)
	}
	if tu.mutation.ReferedCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   trophies.ReferedTable,
			Columns: []string{trophies.ReferedColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(achievements.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.RemovedReferedIDs(); len(nodes) > 0 && !tu.mutation.ReferedCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   trophies.ReferedTable,
			Columns: []string{trophies.ReferedColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(achievements.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.ReferedIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   trophies.ReferedTable,
			Columns: []string{trophies.ReferedColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(achievements.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, tu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{trophies.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	tu.mutation.done = true
	return n, nil
}

// TROPHIESUpdateOne is the builder for updating a single TROPHIES entity.
type TROPHIESUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TROPHIESMutation
}

// SetTitle sets the "title" field.
func (tuo *TROPHIESUpdateOne) SetTitle(s string) *TROPHIESUpdateOne {
	tuo.mutation.SetTitle(s)
	return tuo
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (tuo *TROPHIESUpdateOne) SetNillableTitle(s *string) *TROPHIESUpdateOne {
	if s != nil {
		tuo.SetTitle(*s)
	}
	return tuo
}

// SetContents sets the "contents" field.
func (tuo *TROPHIESUpdateOne) SetContents(s string) *TROPHIESUpdateOne {
	tuo.mutation.SetContents(s)
	return tuo
}

// SetNillableContents sets the "contents" field if the given value is not nil.
func (tuo *TROPHIESUpdateOne) SetNillableContents(s *string) *TROPHIESUpdateOne {
	if s != nil {
		tuo.SetContents(*s)
	}
	return tuo
}

// SetRequirement sets the "requirement" field.
func (tuo *TROPHIESUpdateOne) SetRequirement(s string) *TROPHIESUpdateOne {
	tuo.mutation.SetRequirement(s)
	return tuo
}

// SetNillableRequirement sets the "requirement" field if the given value is not nil.
func (tuo *TROPHIESUpdateOne) SetNillableRequirement(s *string) *TROPHIESUpdateOne {
	if s != nil {
		tuo.SetRequirement(*s)
	}
	return tuo
}

// AddReferedIDs adds the "refered" edge to the ACHIEVEMENTS entity by IDs.
func (tuo *TROPHIESUpdateOne) AddReferedIDs(ids ...int) *TROPHIESUpdateOne {
	tuo.mutation.AddReferedIDs(ids...)
	return tuo
}

// AddRefered adds the "refered" edges to the ACHIEVEMENTS entity.
func (tuo *TROPHIESUpdateOne) AddRefered(a ...*ACHIEVEMENTS) *TROPHIESUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return tuo.AddReferedIDs(ids...)
}

// Mutation returns the TROPHIESMutation object of the builder.
func (tuo *TROPHIESUpdateOne) Mutation() *TROPHIESMutation {
	return tuo.mutation
}

// ClearRefered clears all "refered" edges to the ACHIEVEMENTS entity.
func (tuo *TROPHIESUpdateOne) ClearRefered() *TROPHIESUpdateOne {
	tuo.mutation.ClearRefered()
	return tuo
}

// RemoveReferedIDs removes the "refered" edge to ACHIEVEMENTS entities by IDs.
func (tuo *TROPHIESUpdateOne) RemoveReferedIDs(ids ...int) *TROPHIESUpdateOne {
	tuo.mutation.RemoveReferedIDs(ids...)
	return tuo
}

// RemoveRefered removes "refered" edges to ACHIEVEMENTS entities.
func (tuo *TROPHIESUpdateOne) RemoveRefered(a ...*ACHIEVEMENTS) *TROPHIESUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return tuo.RemoveReferedIDs(ids...)
}

// Where appends a list predicates to the TROPHIESUpdate builder.
func (tuo *TROPHIESUpdateOne) Where(ps ...predicate.TROPHIES) *TROPHIESUpdateOne {
	tuo.mutation.Where(ps...)
	return tuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tuo *TROPHIESUpdateOne) Select(field string, fields ...string) *TROPHIESUpdateOne {
	tuo.fields = append([]string{field}, fields...)
	return tuo
}

// Save executes the query and returns the updated TROPHIES entity.
func (tuo *TROPHIESUpdateOne) Save(ctx context.Context) (*TROPHIES, error) {
	return withHooks(ctx, tuo.sqlSave, tuo.mutation, tuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tuo *TROPHIESUpdateOne) SaveX(ctx context.Context) *TROPHIES {
	node, err := tuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tuo *TROPHIESUpdateOne) Exec(ctx context.Context) error {
	_, err := tuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tuo *TROPHIESUpdateOne) ExecX(ctx context.Context) {
	if err := tuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (tuo *TROPHIESUpdateOne) sqlSave(ctx context.Context) (_node *TROPHIES, err error) {
	_spec := sqlgraph.NewUpdateSpec(trophies.Table, trophies.Columns, sqlgraph.NewFieldSpec(trophies.FieldID, field.TypeInt))
	id, ok := tuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "TROPHIES.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := tuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, trophies.FieldID)
		for _, f := range fields {
			if !trophies.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != trophies.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tuo.mutation.Title(); ok {
		_spec.SetField(trophies.FieldTitle, field.TypeString, value)
	}
	if value, ok := tuo.mutation.Contents(); ok {
		_spec.SetField(trophies.FieldContents, field.TypeString, value)
	}
	if value, ok := tuo.mutation.Requirement(); ok {
		_spec.SetField(trophies.FieldRequirement, field.TypeString, value)
	}
	if tuo.mutation.ReferedCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   trophies.ReferedTable,
			Columns: []string{trophies.ReferedColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(achievements.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.RemovedReferedIDs(); len(nodes) > 0 && !tuo.mutation.ReferedCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   trophies.ReferedTable,
			Columns: []string{trophies.ReferedColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(achievements.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.ReferedIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   trophies.ReferedTable,
			Columns: []string{trophies.ReferedColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(achievements.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &TROPHIES{config: tuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{trophies.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	tuo.mutation.done = true
	return _node, nil
}
