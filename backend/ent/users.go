// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/Hosi121/SpeakUp/ent/memos"
	"github.com/Hosi121/SpeakUp/ent/users"
)

// USERS is the model entity for the USERS schema.
type USERS struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Username holds the value of the "username" field.
	Username string `json:"username,omitempty"`
	// Email holds the value of the "email" field.
	Email string `json:"email,omitempty"`
	// AvatarURL holds the value of the "avatar_url" field.
	AvatarURL string `json:"avatar_url,omitempty"`
	// Role holds the value of the "role" field.
	Role users.Role `json:"role,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// IsDeleted holds the value of the "is_deleted" field.
	IsDeleted bool `json:"is_deleted,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// AccessToken holds the value of the "access_token" field.
	AccessToken string `json:"access_token,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the USERSQuery when eager-loading is set.
	Edges        USERSEdges `json:"edges"`
	selectValues sql.SelectValues
}

// USERSEdges holds the relations/edges for other nodes in the graph.
type USERSEdges struct {
	// Connects holds the value of the connects edge.
	Connects []*FRIENDS `json:"connects,omitempty"`
	// Participates holds the value of the participates edge.
	Participates []*MATCHINGS `json:"participates,omitempty"`
	// Prepares holds the value of the prepares edge.
	Prepares *MEMOS `json:"prepares,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// ConnectsOrErr returns the Connects value or an error if the edge
// was not loaded in eager-loading.
func (e USERSEdges) ConnectsOrErr() ([]*FRIENDS, error) {
	if e.loadedTypes[0] {
		return e.Connects, nil
	}
	return nil, &NotLoadedError{edge: "connects"}
}

// ParticipatesOrErr returns the Participates value or an error if the edge
// was not loaded in eager-loading.
func (e USERSEdges) ParticipatesOrErr() ([]*MATCHINGS, error) {
	if e.loadedTypes[1] {
		return e.Participates, nil
	}
	return nil, &NotLoadedError{edge: "participates"}
}

// PreparesOrErr returns the Prepares value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e USERSEdges) PreparesOrErr() (*MEMOS, error) {
	if e.Prepares != nil {
		return e.Prepares, nil
	} else if e.loadedTypes[2] {
		return nil, &NotFoundError{label: memos.Label}
	}
	return nil, &NotLoadedError{edge: "prepares"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*USERS) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case users.FieldIsDeleted:
			values[i] = new(sql.NullBool)
		case users.FieldID:
			values[i] = new(sql.NullInt64)
		case users.FieldUsername, users.FieldEmail, users.FieldAvatarURL, users.FieldRole, users.FieldAccessToken:
			values[i] = new(sql.NullString)
		case users.FieldCreatedAt, users.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the USERS fields.
func (u *USERS) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case users.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			u.ID = int(value.Int64)
		case users.FieldUsername:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field username", values[i])
			} else if value.Valid {
				u.Username = value.String
			}
		case users.FieldEmail:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field email", values[i])
			} else if value.Valid {
				u.Email = value.String
			}
		case users.FieldAvatarURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field avatar_url", values[i])
			} else if value.Valid {
				u.AvatarURL = value.String
			}
		case users.FieldRole:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field role", values[i])
			} else if value.Valid {
				u.Role = users.Role(value.String)
			}
		case users.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				u.CreatedAt = value.Time
			}
		case users.FieldIsDeleted:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_deleted", values[i])
			} else if value.Valid {
				u.IsDeleted = value.Bool
			}
		case users.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				u.UpdatedAt = value.Time
			}
		case users.FieldAccessToken:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field access_token", values[i])
			} else if value.Valid {
				u.AccessToken = value.String
			}
		default:
			u.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the USERS.
// This includes values selected through modifiers, order, etc.
func (u *USERS) Value(name string) (ent.Value, error) {
	return u.selectValues.Get(name)
}

// QueryConnects queries the "connects" edge of the USERS entity.
func (u *USERS) QueryConnects() *FRIENDSQuery {
	return NewUSERSClient(u.config).QueryConnects(u)
}

// QueryParticipates queries the "participates" edge of the USERS entity.
func (u *USERS) QueryParticipates() *MATCHINGSQuery {
	return NewUSERSClient(u.config).QueryParticipates(u)
}

// QueryPrepares queries the "prepares" edge of the USERS entity.
func (u *USERS) QueryPrepares() *MEMOSQuery {
	return NewUSERSClient(u.config).QueryPrepares(u)
}

// Update returns a builder for updating this USERS.
// Note that you need to call USERS.Unwrap() before calling this method if this USERS
// was returned from a transaction, and the transaction was committed or rolled back.
func (u *USERS) Update() *USERSUpdateOne {
	return NewUSERSClient(u.config).UpdateOne(u)
}

// Unwrap unwraps the USERS entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (u *USERS) Unwrap() *USERS {
	_tx, ok := u.config.driver.(*txDriver)
	if !ok {
		panic("ent: USERS is not a transactional entity")
	}
	u.config.driver = _tx.drv
	return u
}

// String implements the fmt.Stringer.
func (u *USERS) String() string {
	var builder strings.Builder
	builder.WriteString("USERS(")
	builder.WriteString(fmt.Sprintf("id=%v, ", u.ID))
	builder.WriteString("username=")
	builder.WriteString(u.Username)
	builder.WriteString(", ")
	builder.WriteString("email=")
	builder.WriteString(u.Email)
	builder.WriteString(", ")
	builder.WriteString("avatar_url=")
	builder.WriteString(u.AvatarURL)
	builder.WriteString(", ")
	builder.WriteString("role=")
	builder.WriteString(fmt.Sprintf("%v", u.Role))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(u.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("is_deleted=")
	builder.WriteString(fmt.Sprintf("%v", u.IsDeleted))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(u.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("access_token=")
	builder.WriteString(u.AccessToken)
	builder.WriteByte(')')
	return builder.String()
}

// USERSs is a parsable slice of USERS.
type USERSs []*USERS
