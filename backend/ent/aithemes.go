// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/Hosi121/SpeakUp/ent/aithemes"
)

// AITHEMES is the model entity for the AITHEMES schema.
type AITHEMES struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// ThemeText holds the value of the "theme_text" field.
	ThemeText string `json:"theme_text,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the AITHEMESQuery when eager-loading is set.
	Edges        AITHEMESEdges `json:"edges"`
	selectValues sql.SelectValues
}

// AITHEMESEdges holds the relations/edges for other nodes in the graph.
type AITHEMESEdges struct {
	// Used holds the value of the used edge.
	Used []*SESSIONS `json:"used,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// UsedOrErr returns the Used value or an error if the edge
// was not loaded in eager-loading.
func (e AITHEMESEdges) UsedOrErr() ([]*SESSIONS, error) {
	if e.loadedTypes[0] {
		return e.Used, nil
	}
	return nil, &NotLoadedError{edge: "used"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*AITHEMES) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case aithemes.FieldID:
			values[i] = new(sql.NullInt64)
		case aithemes.FieldThemeText:
			values[i] = new(sql.NullString)
		case aithemes.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the AITHEMES fields.
func (a *AITHEMES) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case aithemes.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			a.ID = int(value.Int64)
		case aithemes.FieldThemeText:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field theme_text", values[i])
			} else if value.Valid {
				a.ThemeText = value.String
			}
		case aithemes.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				a.CreatedAt = value.Time
			}
		default:
			a.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the AITHEMES.
// This includes values selected through modifiers, order, etc.
func (a *AITHEMES) Value(name string) (ent.Value, error) {
	return a.selectValues.Get(name)
}

// QueryUsed queries the "used" edge of the AITHEMES entity.
func (a *AITHEMES) QueryUsed() *SESSIONSQuery {
	return NewAITHEMESClient(a.config).QueryUsed(a)
}

// Update returns a builder for updating this AITHEMES.
// Note that you need to call AITHEMES.Unwrap() before calling this method if this AITHEMES
// was returned from a transaction, and the transaction was committed or rolled back.
func (a *AITHEMES) Update() *AITHEMESUpdateOne {
	return NewAITHEMESClient(a.config).UpdateOne(a)
}

// Unwrap unwraps the AITHEMES entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (a *AITHEMES) Unwrap() *AITHEMES {
	_tx, ok := a.config.driver.(*txDriver)
	if !ok {
		panic("ent: AITHEMES is not a transactional entity")
	}
	a.config.driver = _tx.drv
	return a
}

// String implements the fmt.Stringer.
func (a *AITHEMES) String() string {
	var builder strings.Builder
	builder.WriteString("AITHEMES(")
	builder.WriteString(fmt.Sprintf("id=%v, ", a.ID))
	builder.WriteString("theme_text=")
	builder.WriteString(a.ThemeText)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(a.CreatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// AITHEMESs is a parsable slice of AITHEMES.
type AITHEMESs []*AITHEMES
