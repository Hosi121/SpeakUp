// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/Hosi121/SpeakUp/ent/ai_themes"
	"github.com/Hosi121/SpeakUp/ent/events"
)

// EVENTS is the model entity for the EVENTS schema.
type EVENTS struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// EventStart holds the value of the "event_start" field.
	EventStart time.Time `json:"event_start,omitempty"`
	// EventEnd holds the value of the "event_end" field.
	EventEnd time.Time `json:"event_end,omitempty"`
	// ThemeID holds the value of the "theme_id" field.
	ThemeID int `json:"theme_id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the EVENTSQuery when eager-loading is set.
	Edges        EVENTSEdges `json:"edges"`
	events_uses  *int
	selectValues sql.SelectValues
}

// EVENTSEdges holds the relations/edges for other nodes in the graph.
type EVENTSEdges struct {
	// Participated holds the value of the participated edge.
	Participated []*EVENT_RECORDS `json:"participated,omitempty"`
	// Uses holds the value of the uses edge.
	Uses *AI_THEMES `json:"uses,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// ParticipatedOrErr returns the Participated value or an error if the edge
// was not loaded in eager-loading.
func (e EVENTSEdges) ParticipatedOrErr() ([]*EVENT_RECORDS, error) {
	if e.loadedTypes[0] {
		return e.Participated, nil
	}
	return nil, &NotLoadedError{edge: "participated"}
}

// UsesOrErr returns the Uses value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e EVENTSEdges) UsesOrErr() (*AI_THEMES, error) {
	if e.Uses != nil {
		return e.Uses, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: ai_themes.Label}
	}
	return nil, &NotLoadedError{edge: "uses"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*EVENTS) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case events.FieldID, events.FieldThemeID:
			values[i] = new(sql.NullInt64)
		case events.FieldEventStart, events.FieldEventEnd, events.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		case events.ForeignKeys[0]: // events_uses
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the EVENTS fields.
func (e *EVENTS) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case events.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			e.ID = int(value.Int64)
		case events.FieldEventStart:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field event_start", values[i])
			} else if value.Valid {
				e.EventStart = value.Time
			}
		case events.FieldEventEnd:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field event_end", values[i])
			} else if value.Valid {
				e.EventEnd = value.Time
			}
		case events.FieldThemeID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field theme_id", values[i])
			} else if value.Valid {
				e.ThemeID = int(value.Int64)
			}
		case events.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				e.CreatedAt = value.Time
			}
		case events.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field events_uses", value)
			} else if value.Valid {
				e.events_uses = new(int)
				*e.events_uses = int(value.Int64)
			}
		default:
			e.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the EVENTS.
// This includes values selected through modifiers, order, etc.
func (e *EVENTS) Value(name string) (ent.Value, error) {
	return e.selectValues.Get(name)
}

// QueryParticipated queries the "participated" edge of the EVENTS entity.
func (e *EVENTS) QueryParticipated() *EVENTRECORDSQuery {
	return NewEVENTSClient(e.config).QueryParticipated(e)
}

// QueryUses queries the "uses" edge of the EVENTS entity.
func (e *EVENTS) QueryUses() *AITHEMESQuery {
	return NewEVENTSClient(e.config).QueryUses(e)
}

// Update returns a builder for updating this EVENTS.
// Note that you need to call EVENTS.Unwrap() before calling this method if this EVENTS
// was returned from a transaction, and the transaction was committed or rolled back.
func (e *EVENTS) Update() *EVENTSUpdateOne {
	return NewEVENTSClient(e.config).UpdateOne(e)
}

// Unwrap unwraps the EVENTS entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (e *EVENTS) Unwrap() *EVENTS {
	_tx, ok := e.config.driver.(*txDriver)
	if !ok {
		panic("ent: EVENTS is not a transactional entity")
	}
	e.config.driver = _tx.drv
	return e
}

// String implements the fmt.Stringer.
func (e *EVENTS) String() string {
	var builder strings.Builder
	builder.WriteString("EVENTS(")
	builder.WriteString(fmt.Sprintf("id=%v, ", e.ID))
	builder.WriteString("event_start=")
	builder.WriteString(e.EventStart.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("event_end=")
	builder.WriteString(e.EventEnd.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("theme_id=")
	builder.WriteString(fmt.Sprintf("%v", e.ThemeID))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(e.CreatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// EVENTSs is a parsable slice of EVENTS.
type EVENTSs []*EVENTS
