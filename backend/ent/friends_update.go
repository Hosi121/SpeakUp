// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Hosi121/SpeakUp/ent/friends"
	"github.com/Hosi121/SpeakUp/ent/predicate"
	"github.com/Hosi121/SpeakUp/ent/users"
)

// FRIENDSUpdate is the builder for updating FRIENDS entities.
type FRIENDSUpdate struct {
	config
	hooks    []Hook
	mutation *FRIENDSMutation
}

// Where appends a list predicates to the FRIENDSUpdate builder.
func (fu *FRIENDSUpdate) Where(ps ...predicate.FRIENDS) *FRIENDSUpdate {
	fu.mutation.Where(ps...)
	return fu
}

// SetFriendID sets the "friend_id" field.
func (fu *FRIENDSUpdate) SetFriendID(i int) *FRIENDSUpdate {
	fu.mutation.ResetFriendID()
	fu.mutation.SetFriendID(i)
	return fu
}

// SetNillableFriendID sets the "friend_id" field if the given value is not nil.
func (fu *FRIENDSUpdate) SetNillableFriendID(i *int) *FRIENDSUpdate {
	if i != nil {
		fu.SetFriendID(*i)
	}
	return fu
}

// AddFriendID adds i to the "friend_id" field.
func (fu *FRIENDSUpdate) AddFriendID(i int) *FRIENDSUpdate {
	fu.mutation.AddFriendID(i)
	return fu
}

// SetUserID sets the "user_id" field.
func (fu *FRIENDSUpdate) SetUserID(i int) *FRIENDSUpdate {
	fu.mutation.ResetUserID()
	fu.mutation.SetUserID(i)
	return fu
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (fu *FRIENDSUpdate) SetNillableUserID(i *int) *FRIENDSUpdate {
	if i != nil {
		fu.SetUserID(*i)
	}
	return fu
}

// AddUserID adds i to the "user_id" field.
func (fu *FRIENDSUpdate) AddUserID(i int) *FRIENDSUpdate {
	fu.mutation.AddUserID(i)
	return fu
}

// SetTargetUserID sets the "target_user_id" field.
func (fu *FRIENDSUpdate) SetTargetUserID(i int) *FRIENDSUpdate {
	fu.mutation.ResetTargetUserID()
	fu.mutation.SetTargetUserID(i)
	return fu
}

// SetNillableTargetUserID sets the "target_user_id" field if the given value is not nil.
func (fu *FRIENDSUpdate) SetNillableTargetUserID(i *int) *FRIENDSUpdate {
	if i != nil {
		fu.SetTargetUserID(*i)
	}
	return fu
}

// AddTargetUserID adds i to the "target_user_id" field.
func (fu *FRIENDSUpdate) AddTargetUserID(i int) *FRIENDSUpdate {
	fu.mutation.AddTargetUserID(i)
	return fu
}

// SetStatus sets the "status" field.
func (fu *FRIENDSUpdate) SetStatus(f friends.Status) *FRIENDSUpdate {
	fu.mutation.SetStatus(f)
	return fu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (fu *FRIENDSUpdate) SetNillableStatus(f *friends.Status) *FRIENDSUpdate {
	if f != nil {
		fu.SetStatus(*f)
	}
	return fu
}

// SetCreatedAt sets the "created_at" field.
func (fu *FRIENDSUpdate) SetCreatedAt(t time.Time) *FRIENDSUpdate {
	fu.mutation.SetCreatedAt(t)
	return fu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (fu *FRIENDSUpdate) SetNillableCreatedAt(t *time.Time) *FRIENDSUpdate {
	if t != nil {
		fu.SetCreatedAt(*t)
	}
	return fu
}

// AddConnectIDs adds the "connects" edge to the USERS entity by IDs.
func (fu *FRIENDSUpdate) AddConnectIDs(ids ...int) *FRIENDSUpdate {
	fu.mutation.AddConnectIDs(ids...)
	return fu
}

// AddConnects adds the "connects" edges to the USERS entity.
func (fu *FRIENDSUpdate) AddConnects(u ...*USERS) *FRIENDSUpdate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return fu.AddConnectIDs(ids...)
}

// Mutation returns the FRIENDSMutation object of the builder.
func (fu *FRIENDSUpdate) Mutation() *FRIENDSMutation {
	return fu.mutation
}

// ClearConnects clears all "connects" edges to the USERS entity.
func (fu *FRIENDSUpdate) ClearConnects() *FRIENDSUpdate {
	fu.mutation.ClearConnects()
	return fu
}

// RemoveConnectIDs removes the "connects" edge to USERS entities by IDs.
func (fu *FRIENDSUpdate) RemoveConnectIDs(ids ...int) *FRIENDSUpdate {
	fu.mutation.RemoveConnectIDs(ids...)
	return fu
}

// RemoveConnects removes "connects" edges to USERS entities.
func (fu *FRIENDSUpdate) RemoveConnects(u ...*USERS) *FRIENDSUpdate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return fu.RemoveConnectIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (fu *FRIENDSUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, fu.sqlSave, fu.mutation, fu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (fu *FRIENDSUpdate) SaveX(ctx context.Context) int {
	affected, err := fu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (fu *FRIENDSUpdate) Exec(ctx context.Context) error {
	_, err := fu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fu *FRIENDSUpdate) ExecX(ctx context.Context) {
	if err := fu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (fu *FRIENDSUpdate) check() error {
	if v, ok := fu.mutation.Status(); ok {
		if err := friends.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "FRIENDS.status": %w`, err)}
		}
	}
	return nil
}

func (fu *FRIENDSUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := fu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(friends.Table, friends.Columns, sqlgraph.NewFieldSpec(friends.FieldID, field.TypeInt))
	if ps := fu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := fu.mutation.FriendID(); ok {
		_spec.SetField(friends.FieldFriendID, field.TypeInt, value)
	}
	if value, ok := fu.mutation.AddedFriendID(); ok {
		_spec.AddField(friends.FieldFriendID, field.TypeInt, value)
	}
	if value, ok := fu.mutation.UserID(); ok {
		_spec.SetField(friends.FieldUserID, field.TypeInt, value)
	}
	if value, ok := fu.mutation.AddedUserID(); ok {
		_spec.AddField(friends.FieldUserID, field.TypeInt, value)
	}
	if value, ok := fu.mutation.TargetUserID(); ok {
		_spec.SetField(friends.FieldTargetUserID, field.TypeInt, value)
	}
	if value, ok := fu.mutation.AddedTargetUserID(); ok {
		_spec.AddField(friends.FieldTargetUserID, field.TypeInt, value)
	}
	if value, ok := fu.mutation.Status(); ok {
		_spec.SetField(friends.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := fu.mutation.CreatedAt(); ok {
		_spec.SetField(friends.FieldCreatedAt, field.TypeTime, value)
	}
	if fu.mutation.ConnectsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   friends.ConnectsTable,
			Columns: friends.ConnectsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(users.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fu.mutation.RemovedConnectsIDs(); len(nodes) > 0 && !fu.mutation.ConnectsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   friends.ConnectsTable,
			Columns: friends.ConnectsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(users.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fu.mutation.ConnectsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   friends.ConnectsTable,
			Columns: friends.ConnectsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(users.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, fu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{friends.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	fu.mutation.done = true
	return n, nil
}

// FRIENDSUpdateOne is the builder for updating a single FRIENDS entity.
type FRIENDSUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *FRIENDSMutation
}

// SetFriendID sets the "friend_id" field.
func (fuo *FRIENDSUpdateOne) SetFriendID(i int) *FRIENDSUpdateOne {
	fuo.mutation.ResetFriendID()
	fuo.mutation.SetFriendID(i)
	return fuo
}

// SetNillableFriendID sets the "friend_id" field if the given value is not nil.
func (fuo *FRIENDSUpdateOne) SetNillableFriendID(i *int) *FRIENDSUpdateOne {
	if i != nil {
		fuo.SetFriendID(*i)
	}
	return fuo
}

// AddFriendID adds i to the "friend_id" field.
func (fuo *FRIENDSUpdateOne) AddFriendID(i int) *FRIENDSUpdateOne {
	fuo.mutation.AddFriendID(i)
	return fuo
}

// SetUserID sets the "user_id" field.
func (fuo *FRIENDSUpdateOne) SetUserID(i int) *FRIENDSUpdateOne {
	fuo.mutation.ResetUserID()
	fuo.mutation.SetUserID(i)
	return fuo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (fuo *FRIENDSUpdateOne) SetNillableUserID(i *int) *FRIENDSUpdateOne {
	if i != nil {
		fuo.SetUserID(*i)
	}
	return fuo
}

// AddUserID adds i to the "user_id" field.
func (fuo *FRIENDSUpdateOne) AddUserID(i int) *FRIENDSUpdateOne {
	fuo.mutation.AddUserID(i)
	return fuo
}

// SetTargetUserID sets the "target_user_id" field.
func (fuo *FRIENDSUpdateOne) SetTargetUserID(i int) *FRIENDSUpdateOne {
	fuo.mutation.ResetTargetUserID()
	fuo.mutation.SetTargetUserID(i)
	return fuo
}

// SetNillableTargetUserID sets the "target_user_id" field if the given value is not nil.
func (fuo *FRIENDSUpdateOne) SetNillableTargetUserID(i *int) *FRIENDSUpdateOne {
	if i != nil {
		fuo.SetTargetUserID(*i)
	}
	return fuo
}

// AddTargetUserID adds i to the "target_user_id" field.
func (fuo *FRIENDSUpdateOne) AddTargetUserID(i int) *FRIENDSUpdateOne {
	fuo.mutation.AddTargetUserID(i)
	return fuo
}

// SetStatus sets the "status" field.
func (fuo *FRIENDSUpdateOne) SetStatus(f friends.Status) *FRIENDSUpdateOne {
	fuo.mutation.SetStatus(f)
	return fuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (fuo *FRIENDSUpdateOne) SetNillableStatus(f *friends.Status) *FRIENDSUpdateOne {
	if f != nil {
		fuo.SetStatus(*f)
	}
	return fuo
}

// SetCreatedAt sets the "created_at" field.
func (fuo *FRIENDSUpdateOne) SetCreatedAt(t time.Time) *FRIENDSUpdateOne {
	fuo.mutation.SetCreatedAt(t)
	return fuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (fuo *FRIENDSUpdateOne) SetNillableCreatedAt(t *time.Time) *FRIENDSUpdateOne {
	if t != nil {
		fuo.SetCreatedAt(*t)
	}
	return fuo
}

// AddConnectIDs adds the "connects" edge to the USERS entity by IDs.
func (fuo *FRIENDSUpdateOne) AddConnectIDs(ids ...int) *FRIENDSUpdateOne {
	fuo.mutation.AddConnectIDs(ids...)
	return fuo
}

// AddConnects adds the "connects" edges to the USERS entity.
func (fuo *FRIENDSUpdateOne) AddConnects(u ...*USERS) *FRIENDSUpdateOne {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return fuo.AddConnectIDs(ids...)
}

// Mutation returns the FRIENDSMutation object of the builder.
func (fuo *FRIENDSUpdateOne) Mutation() *FRIENDSMutation {
	return fuo.mutation
}

// ClearConnects clears all "connects" edges to the USERS entity.
func (fuo *FRIENDSUpdateOne) ClearConnects() *FRIENDSUpdateOne {
	fuo.mutation.ClearConnects()
	return fuo
}

// RemoveConnectIDs removes the "connects" edge to USERS entities by IDs.
func (fuo *FRIENDSUpdateOne) RemoveConnectIDs(ids ...int) *FRIENDSUpdateOne {
	fuo.mutation.RemoveConnectIDs(ids...)
	return fuo
}

// RemoveConnects removes "connects" edges to USERS entities.
func (fuo *FRIENDSUpdateOne) RemoveConnects(u ...*USERS) *FRIENDSUpdateOne {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return fuo.RemoveConnectIDs(ids...)
}

// Where appends a list predicates to the FRIENDSUpdate builder.
func (fuo *FRIENDSUpdateOne) Where(ps ...predicate.FRIENDS) *FRIENDSUpdateOne {
	fuo.mutation.Where(ps...)
	return fuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (fuo *FRIENDSUpdateOne) Select(field string, fields ...string) *FRIENDSUpdateOne {
	fuo.fields = append([]string{field}, fields...)
	return fuo
}

// Save executes the query and returns the updated FRIENDS entity.
func (fuo *FRIENDSUpdateOne) Save(ctx context.Context) (*FRIENDS, error) {
	return withHooks(ctx, fuo.sqlSave, fuo.mutation, fuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (fuo *FRIENDSUpdateOne) SaveX(ctx context.Context) *FRIENDS {
	node, err := fuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (fuo *FRIENDSUpdateOne) Exec(ctx context.Context) error {
	_, err := fuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fuo *FRIENDSUpdateOne) ExecX(ctx context.Context) {
	if err := fuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (fuo *FRIENDSUpdateOne) check() error {
	if v, ok := fuo.mutation.Status(); ok {
		if err := friends.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "FRIENDS.status": %w`, err)}
		}
	}
	return nil
}

func (fuo *FRIENDSUpdateOne) sqlSave(ctx context.Context) (_node *FRIENDS, err error) {
	if err := fuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(friends.Table, friends.Columns, sqlgraph.NewFieldSpec(friends.FieldID, field.TypeInt))
	id, ok := fuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "FRIENDS.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := fuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, friends.FieldID)
		for _, f := range fields {
			if !friends.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != friends.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := fuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := fuo.mutation.FriendID(); ok {
		_spec.SetField(friends.FieldFriendID, field.TypeInt, value)
	}
	if value, ok := fuo.mutation.AddedFriendID(); ok {
		_spec.AddField(friends.FieldFriendID, field.TypeInt, value)
	}
	if value, ok := fuo.mutation.UserID(); ok {
		_spec.SetField(friends.FieldUserID, field.TypeInt, value)
	}
	if value, ok := fuo.mutation.AddedUserID(); ok {
		_spec.AddField(friends.FieldUserID, field.TypeInt, value)
	}
	if value, ok := fuo.mutation.TargetUserID(); ok {
		_spec.SetField(friends.FieldTargetUserID, field.TypeInt, value)
	}
	if value, ok := fuo.mutation.AddedTargetUserID(); ok {
		_spec.AddField(friends.FieldTargetUserID, field.TypeInt, value)
	}
	if value, ok := fuo.mutation.Status(); ok {
		_spec.SetField(friends.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := fuo.mutation.CreatedAt(); ok {
		_spec.SetField(friends.FieldCreatedAt, field.TypeTime, value)
	}
	if fuo.mutation.ConnectsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   friends.ConnectsTable,
			Columns: friends.ConnectsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(users.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fuo.mutation.RemovedConnectsIDs(); len(nodes) > 0 && !fuo.mutation.ConnectsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   friends.ConnectsTable,
			Columns: friends.ConnectsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(users.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fuo.mutation.ConnectsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   friends.ConnectsTable,
			Columns: friends.ConnectsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(users.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &FRIENDS{config: fuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, fuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{friends.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	fuo.mutation.done = true
	return _node, nil
}
