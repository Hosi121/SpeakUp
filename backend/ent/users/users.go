// Code generated by ent, DO NOT EDIT.

package users

import (
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the users type in the database.
	Label = "users"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldUsername holds the string denoting the username field in the database.
	FieldUsername = "username"
	// FieldEmail holds the string denoting the email field in the database.
	FieldEmail = "email"
	// FieldHashedPassword holds the string denoting the hashed_password field in the database.
	FieldHashedPassword = "hashed_password"
	// FieldAvatarURL holds the string denoting the avatar_url field in the database.
	FieldAvatarURL = "avatar_url"
	// FieldRole holds the string denoting the role field in the database.
	FieldRole = "role"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldDeletedAt holds the string denoting the deleted_at field in the database.
	FieldDeletedAt = "deleted_at"
	// EdgeConnects holds the string denoting the connects edge name in mutations.
	EdgeConnects = "connects"
	// EdgeParticipates holds the string denoting the participates edge name in mutations.
	EdgeParticipates = "participates"
	// Table holds the table name of the users in the database.
	Table = "user_ss"
	// ConnectsTable is the table that holds the connects relation/edge. The primary key declared below.
	ConnectsTable = "users_connects"
	// ConnectsInverseTable is the table name for the FRIENDS entity.
	// It exists in this package in order to avoid circular dependency with the "friends" package.
	ConnectsInverseTable = "friend_ss"
	// ParticipatesTable is the table that holds the participates relation/edge. The primary key declared below.
	ParticipatesTable = "users_participates"
	// ParticipatesInverseTable is the table name for the MATCHINGS entity.
	// It exists in this package in order to avoid circular dependency with the "matchings" package.
	ParticipatesInverseTable = "matching_ss"
)

// Columns holds all SQL columns for users fields.
var Columns = []string{
	FieldID,
	FieldUsername,
	FieldEmail,
	FieldHashedPassword,
	FieldAvatarURL,
	FieldRole,
	FieldCreatedAt,
	FieldDeletedAt,
}

var (
	// ConnectsPrimaryKey and ConnectsColumn2 are the table columns denoting the
	// primary key for the connects relation (M2M).
	ConnectsPrimaryKey = []string{"users_id", "friends_id"}
	// ParticipatesPrimaryKey and ParticipatesColumn2 are the table columns denoting the
	// primary key for the participates relation (M2M).
	ParticipatesPrimaryKey = []string{"users_id", "matchings_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// UsernameValidator is a validator for the "username" field. It is called by the builders before save.
	UsernameValidator func(string) error
	// EmailValidator is a validator for the "email" field. It is called by the builders before save.
	EmailValidator func(string) error
	// HashedPasswordValidator is a validator for the "hashed_password" field. It is called by the builders before save.
	HashedPasswordValidator func(string) error
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultDeletedAt holds the default value on creation for the "deleted_at" field.
	DefaultDeletedAt func() time.Time
)

// Role defines the type for the "role" enum field.
type Role string

// Role values.
const (
	RoleSUPERUSER Role = "SUPERUSER"
	RoleADMIN     Role = "ADMIN"
	RoleUSER      Role = "USER"
)

func (r Role) String() string {
	return string(r)
}

// RoleValidator is a validator for the "role" field enum values. It is called by the builders before save.
func RoleValidator(r Role) error {
	switch r {
	case RoleSUPERUSER, RoleADMIN, RoleUSER:
		return nil
	default:
		return fmt.Errorf("users: invalid enum value for role field: %q", r)
	}
}

// OrderOption defines the ordering options for the USERS queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByUsername orders the results by the username field.
func ByUsername(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUsername, opts...).ToFunc()
}

// ByEmail orders the results by the email field.
func ByEmail(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEmail, opts...).ToFunc()
}

// ByHashedPassword orders the results by the hashed_password field.
func ByHashedPassword(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldHashedPassword, opts...).ToFunc()
}

// ByAvatarURL orders the results by the avatar_url field.
func ByAvatarURL(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAvatarURL, opts...).ToFunc()
}

// ByRole orders the results by the role field.
func ByRole(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRole, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByDeletedAt orders the results by the deleted_at field.
func ByDeletedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedAt, opts...).ToFunc()
}

// ByConnectsCount orders the results by connects count.
func ByConnectsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newConnectsStep(), opts...)
	}
}

// ByConnects orders the results by connects terms.
func ByConnects(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newConnectsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByParticipatesCount orders the results by participates count.
func ByParticipatesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newParticipatesStep(), opts...)
	}
}

// ByParticipates orders the results by participates terms.
func ByParticipates(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newParticipatesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newConnectsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ConnectsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, false, ConnectsTable, ConnectsPrimaryKey...),
	)
}
func newParticipatesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ParticipatesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, false, ParticipatesTable, ParticipatesPrimaryKey...),
	)
}
