// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/Hosi121/SpeakUp/ent/calls"
	"github.com/Hosi121/SpeakUp/ent/matchings"
	"github.com/Hosi121/SpeakUp/ent/sessions"
)

// MATCHINGS is the model entity for the MATCHINGS schema.
type MATCHINGS struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// UserID holds the value of the "user_id" field.
	UserID int `json:"user_id,omitempty"`
	// MatchedUserID holds the value of the "matched_user_id" field.
	MatchedUserID int `json:"matched_user_id,omitempty"`
	// SessionID holds the value of the "session_id" field.
	SessionID int `json:"session_id,omitempty"`
	// MatchedAt holds the value of the "matched_at" field.
	MatchedAt time.Time `json:"matched_at,omitempty"`
	// Status holds the value of the "status" field.
	Status matchings.Status `json:"status,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the MATCHINGSQuery when eager-loading is set.
	Edges        MATCHINGSEdges `json:"edges"`
	sessions_has *int
	selectValues sql.SelectValues
}

// MATCHINGSEdges holds the relations/edges for other nodes in the graph.
type MATCHINGSEdges struct {
	// Member holds the value of the member edge.
	Member []*USERS `json:"member,omitempty"`
	// Had holds the value of the had edge.
	Had *SESSIONS `json:"had,omitempty"`
	// Makes holds the value of the makes edge.
	Makes *CALLS `json:"makes,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// MemberOrErr returns the Member value or an error if the edge
// was not loaded in eager-loading.
func (e MATCHINGSEdges) MemberOrErr() ([]*USERS, error) {
	if e.loadedTypes[0] {
		return e.Member, nil
	}
	return nil, &NotLoadedError{edge: "member"}
}

// HadOrErr returns the Had value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e MATCHINGSEdges) HadOrErr() (*SESSIONS, error) {
	if e.Had != nil {
		return e.Had, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: sessions.Label}
	}
	return nil, &NotLoadedError{edge: "had"}
}

// MakesOrErr returns the Makes value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e MATCHINGSEdges) MakesOrErr() (*CALLS, error) {
	if e.Makes != nil {
		return e.Makes, nil
	} else if e.loadedTypes[2] {
		return nil, &NotFoundError{label: calls.Label}
	}
	return nil, &NotLoadedError{edge: "makes"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*MATCHINGS) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case matchings.FieldID, matchings.FieldUserID, matchings.FieldMatchedUserID, matchings.FieldSessionID:
			values[i] = new(sql.NullInt64)
		case matchings.FieldStatus:
			values[i] = new(sql.NullString)
		case matchings.FieldMatchedAt:
			values[i] = new(sql.NullTime)
		case matchings.ForeignKeys[0]: // sessions_has
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the MATCHINGS fields.
func (m *MATCHINGS) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case matchings.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			m.ID = int(value.Int64)
		case matchings.FieldUserID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				m.UserID = int(value.Int64)
			}
		case matchings.FieldMatchedUserID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field matched_user_id", values[i])
			} else if value.Valid {
				m.MatchedUserID = int(value.Int64)
			}
		case matchings.FieldSessionID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field session_id", values[i])
			} else if value.Valid {
				m.SessionID = int(value.Int64)
			}
		case matchings.FieldMatchedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field matched_at", values[i])
			} else if value.Valid {
				m.MatchedAt = value.Time
			}
		case matchings.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				m.Status = matchings.Status(value.String)
			}
		case matchings.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field sessions_has", value)
			} else if value.Valid {
				m.sessions_has = new(int)
				*m.sessions_has = int(value.Int64)
			}
		default:
			m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the MATCHINGS.
// This includes values selected through modifiers, order, etc.
func (m *MATCHINGS) Value(name string) (ent.Value, error) {
	return m.selectValues.Get(name)
}

// QueryMember queries the "member" edge of the MATCHINGS entity.
func (m *MATCHINGS) QueryMember() *USERSQuery {
	return NewMATCHINGSClient(m.config).QueryMember(m)
}

// QueryHad queries the "had" edge of the MATCHINGS entity.
func (m *MATCHINGS) QueryHad() *SESSIONSQuery {
	return NewMATCHINGSClient(m.config).QueryHad(m)
}

// QueryMakes queries the "makes" edge of the MATCHINGS entity.
func (m *MATCHINGS) QueryMakes() *CALLSQuery {
	return NewMATCHINGSClient(m.config).QueryMakes(m)
}

// Update returns a builder for updating this MATCHINGS.
// Note that you need to call MATCHINGS.Unwrap() before calling this method if this MATCHINGS
// was returned from a transaction, and the transaction was committed or rolled back.
func (m *MATCHINGS) Update() *MATCHINGSUpdateOne {
	return NewMATCHINGSClient(m.config).UpdateOne(m)
}

// Unwrap unwraps the MATCHINGS entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (m *MATCHINGS) Unwrap() *MATCHINGS {
	_tx, ok := m.config.driver.(*txDriver)
	if !ok {
		panic("ent: MATCHINGS is not a transactional entity")
	}
	m.config.driver = _tx.drv
	return m
}

// String implements the fmt.Stringer.
func (m *MATCHINGS) String() string {
	var builder strings.Builder
	builder.WriteString("MATCHINGS(")
	builder.WriteString(fmt.Sprintf("id=%v, ", m.ID))
	builder.WriteString("user_id=")
	builder.WriteString(fmt.Sprintf("%v", m.UserID))
	builder.WriteString(", ")
	builder.WriteString("matched_user_id=")
	builder.WriteString(fmt.Sprintf("%v", m.MatchedUserID))
	builder.WriteString(", ")
	builder.WriteString("session_id=")
	builder.WriteString(fmt.Sprintf("%v", m.SessionID))
	builder.WriteString(", ")
	builder.WriteString("matched_at=")
	builder.WriteString(m.MatchedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", m.Status))
	builder.WriteByte(')')
	return builder.String()
}

// MATCHINGSs is a parsable slice of MATCHINGS.
type MATCHINGSs []*MATCHINGS
