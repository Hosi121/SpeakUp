// Code generated by ent, DO NOT EDIT.

package ai_themes

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/Hosi121/SpeakUp/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.AI_THEMES {
	return predicate.AI_THEMES(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.AI_THEMES {
	return predicate.AI_THEMES(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.AI_THEMES {
	return predicate.AI_THEMES(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.AI_THEMES {
	return predicate.AI_THEMES(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.AI_THEMES {
	return predicate.AI_THEMES(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.AI_THEMES {
	return predicate.AI_THEMES(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.AI_THEMES {
	return predicate.AI_THEMES(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.AI_THEMES {
	return predicate.AI_THEMES(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.AI_THEMES {
	return predicate.AI_THEMES(sql.FieldLTE(FieldID, id))
}

// ThemeText applies equality check predicate on the "theme_text" field. It's identical to ThemeTextEQ.
func ThemeText(v string) predicate.AI_THEMES {
	return predicate.AI_THEMES(sql.FieldEQ(FieldThemeText, v))
}

// Topic1 applies equality check predicate on the "topic1" field. It's identical to Topic1EQ.
func Topic1(v string) predicate.AI_THEMES {
	return predicate.AI_THEMES(sql.FieldEQ(FieldTopic1, v))
}

// Topic2 applies equality check predicate on the "topic2" field. It's identical to Topic2EQ.
func Topic2(v string) predicate.AI_THEMES {
	return predicate.AI_THEMES(sql.FieldEQ(FieldTopic2, v))
}

// Topic3 applies equality check predicate on the "topic3" field. It's identical to Topic3EQ.
func Topic3(v string) predicate.AI_THEMES {
	return predicate.AI_THEMES(sql.FieldEQ(FieldTopic3, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.AI_THEMES {
	return predicate.AI_THEMES(sql.FieldEQ(FieldCreatedAt, v))
}

// ThemeTextEQ applies the EQ predicate on the "theme_text" field.
func ThemeTextEQ(v string) predicate.AI_THEMES {
	return predicate.AI_THEMES(sql.FieldEQ(FieldThemeText, v))
}

// ThemeTextNEQ applies the NEQ predicate on the "theme_text" field.
func ThemeTextNEQ(v string) predicate.AI_THEMES {
	return predicate.AI_THEMES(sql.FieldNEQ(FieldThemeText, v))
}

// ThemeTextIn applies the In predicate on the "theme_text" field.
func ThemeTextIn(vs ...string) predicate.AI_THEMES {
	return predicate.AI_THEMES(sql.FieldIn(FieldThemeText, vs...))
}

// ThemeTextNotIn applies the NotIn predicate on the "theme_text" field.
func ThemeTextNotIn(vs ...string) predicate.AI_THEMES {
	return predicate.AI_THEMES(sql.FieldNotIn(FieldThemeText, vs...))
}

// ThemeTextGT applies the GT predicate on the "theme_text" field.
func ThemeTextGT(v string) predicate.AI_THEMES {
	return predicate.AI_THEMES(sql.FieldGT(FieldThemeText, v))
}

// ThemeTextGTE applies the GTE predicate on the "theme_text" field.
func ThemeTextGTE(v string) predicate.AI_THEMES {
	return predicate.AI_THEMES(sql.FieldGTE(FieldThemeText, v))
}

// ThemeTextLT applies the LT predicate on the "theme_text" field.
func ThemeTextLT(v string) predicate.AI_THEMES {
	return predicate.AI_THEMES(sql.FieldLT(FieldThemeText, v))
}

// ThemeTextLTE applies the LTE predicate on the "theme_text" field.
func ThemeTextLTE(v string) predicate.AI_THEMES {
	return predicate.AI_THEMES(sql.FieldLTE(FieldThemeText, v))
}

// ThemeTextContains applies the Contains predicate on the "theme_text" field.
func ThemeTextContains(v string) predicate.AI_THEMES {
	return predicate.AI_THEMES(sql.FieldContains(FieldThemeText, v))
}

// ThemeTextHasPrefix applies the HasPrefix predicate on the "theme_text" field.
func ThemeTextHasPrefix(v string) predicate.AI_THEMES {
	return predicate.AI_THEMES(sql.FieldHasPrefix(FieldThemeText, v))
}

// ThemeTextHasSuffix applies the HasSuffix predicate on the "theme_text" field.
func ThemeTextHasSuffix(v string) predicate.AI_THEMES {
	return predicate.AI_THEMES(sql.FieldHasSuffix(FieldThemeText, v))
}

// ThemeTextEqualFold applies the EqualFold predicate on the "theme_text" field.
func ThemeTextEqualFold(v string) predicate.AI_THEMES {
	return predicate.AI_THEMES(sql.FieldEqualFold(FieldThemeText, v))
}

// ThemeTextContainsFold applies the ContainsFold predicate on the "theme_text" field.
func ThemeTextContainsFold(v string) predicate.AI_THEMES {
	return predicate.AI_THEMES(sql.FieldContainsFold(FieldThemeText, v))
}

// Topic1EQ applies the EQ predicate on the "topic1" field.
func Topic1EQ(v string) predicate.AI_THEMES {
	return predicate.AI_THEMES(sql.FieldEQ(FieldTopic1, v))
}

// Topic1NEQ applies the NEQ predicate on the "topic1" field.
func Topic1NEQ(v string) predicate.AI_THEMES {
	return predicate.AI_THEMES(sql.FieldNEQ(FieldTopic1, v))
}

// Topic1In applies the In predicate on the "topic1" field.
func Topic1In(vs ...string) predicate.AI_THEMES {
	return predicate.AI_THEMES(sql.FieldIn(FieldTopic1, vs...))
}

// Topic1NotIn applies the NotIn predicate on the "topic1" field.
func Topic1NotIn(vs ...string) predicate.AI_THEMES {
	return predicate.AI_THEMES(sql.FieldNotIn(FieldTopic1, vs...))
}

// Topic1GT applies the GT predicate on the "topic1" field.
func Topic1GT(v string) predicate.AI_THEMES {
	return predicate.AI_THEMES(sql.FieldGT(FieldTopic1, v))
}

// Topic1GTE applies the GTE predicate on the "topic1" field.
func Topic1GTE(v string) predicate.AI_THEMES {
	return predicate.AI_THEMES(sql.FieldGTE(FieldTopic1, v))
}

// Topic1LT applies the LT predicate on the "topic1" field.
func Topic1LT(v string) predicate.AI_THEMES {
	return predicate.AI_THEMES(sql.FieldLT(FieldTopic1, v))
}

// Topic1LTE applies the LTE predicate on the "topic1" field.
func Topic1LTE(v string) predicate.AI_THEMES {
	return predicate.AI_THEMES(sql.FieldLTE(FieldTopic1, v))
}

// Topic1Contains applies the Contains predicate on the "topic1" field.
func Topic1Contains(v string) predicate.AI_THEMES {
	return predicate.AI_THEMES(sql.FieldContains(FieldTopic1, v))
}

// Topic1HasPrefix applies the HasPrefix predicate on the "topic1" field.
func Topic1HasPrefix(v string) predicate.AI_THEMES {
	return predicate.AI_THEMES(sql.FieldHasPrefix(FieldTopic1, v))
}

// Topic1HasSuffix applies the HasSuffix predicate on the "topic1" field.
func Topic1HasSuffix(v string) predicate.AI_THEMES {
	return predicate.AI_THEMES(sql.FieldHasSuffix(FieldTopic1, v))
}

// Topic1EqualFold applies the EqualFold predicate on the "topic1" field.
func Topic1EqualFold(v string) predicate.AI_THEMES {
	return predicate.AI_THEMES(sql.FieldEqualFold(FieldTopic1, v))
}

// Topic1ContainsFold applies the ContainsFold predicate on the "topic1" field.
func Topic1ContainsFold(v string) predicate.AI_THEMES {
	return predicate.AI_THEMES(sql.FieldContainsFold(FieldTopic1, v))
}

// Topic2EQ applies the EQ predicate on the "topic2" field.
func Topic2EQ(v string) predicate.AI_THEMES {
	return predicate.AI_THEMES(sql.FieldEQ(FieldTopic2, v))
}

// Topic2NEQ applies the NEQ predicate on the "topic2" field.
func Topic2NEQ(v string) predicate.AI_THEMES {
	return predicate.AI_THEMES(sql.FieldNEQ(FieldTopic2, v))
}

// Topic2In applies the In predicate on the "topic2" field.
func Topic2In(vs ...string) predicate.AI_THEMES {
	return predicate.AI_THEMES(sql.FieldIn(FieldTopic2, vs...))
}

// Topic2NotIn applies the NotIn predicate on the "topic2" field.
func Topic2NotIn(vs ...string) predicate.AI_THEMES {
	return predicate.AI_THEMES(sql.FieldNotIn(FieldTopic2, vs...))
}

// Topic2GT applies the GT predicate on the "topic2" field.
func Topic2GT(v string) predicate.AI_THEMES {
	return predicate.AI_THEMES(sql.FieldGT(FieldTopic2, v))
}

// Topic2GTE applies the GTE predicate on the "topic2" field.
func Topic2GTE(v string) predicate.AI_THEMES {
	return predicate.AI_THEMES(sql.FieldGTE(FieldTopic2, v))
}

// Topic2LT applies the LT predicate on the "topic2" field.
func Topic2LT(v string) predicate.AI_THEMES {
	return predicate.AI_THEMES(sql.FieldLT(FieldTopic2, v))
}

// Topic2LTE applies the LTE predicate on the "topic2" field.
func Topic2LTE(v string) predicate.AI_THEMES {
	return predicate.AI_THEMES(sql.FieldLTE(FieldTopic2, v))
}

// Topic2Contains applies the Contains predicate on the "topic2" field.
func Topic2Contains(v string) predicate.AI_THEMES {
	return predicate.AI_THEMES(sql.FieldContains(FieldTopic2, v))
}

// Topic2HasPrefix applies the HasPrefix predicate on the "topic2" field.
func Topic2HasPrefix(v string) predicate.AI_THEMES {
	return predicate.AI_THEMES(sql.FieldHasPrefix(FieldTopic2, v))
}

// Topic2HasSuffix applies the HasSuffix predicate on the "topic2" field.
func Topic2HasSuffix(v string) predicate.AI_THEMES {
	return predicate.AI_THEMES(sql.FieldHasSuffix(FieldTopic2, v))
}

// Topic2EqualFold applies the EqualFold predicate on the "topic2" field.
func Topic2EqualFold(v string) predicate.AI_THEMES {
	return predicate.AI_THEMES(sql.FieldEqualFold(FieldTopic2, v))
}

// Topic2ContainsFold applies the ContainsFold predicate on the "topic2" field.
func Topic2ContainsFold(v string) predicate.AI_THEMES {
	return predicate.AI_THEMES(sql.FieldContainsFold(FieldTopic2, v))
}

// Topic3EQ applies the EQ predicate on the "topic3" field.
func Topic3EQ(v string) predicate.AI_THEMES {
	return predicate.AI_THEMES(sql.FieldEQ(FieldTopic3, v))
}

// Topic3NEQ applies the NEQ predicate on the "topic3" field.
func Topic3NEQ(v string) predicate.AI_THEMES {
	return predicate.AI_THEMES(sql.FieldNEQ(FieldTopic3, v))
}

// Topic3In applies the In predicate on the "topic3" field.
func Topic3In(vs ...string) predicate.AI_THEMES {
	return predicate.AI_THEMES(sql.FieldIn(FieldTopic3, vs...))
}

// Topic3NotIn applies the NotIn predicate on the "topic3" field.
func Topic3NotIn(vs ...string) predicate.AI_THEMES {
	return predicate.AI_THEMES(sql.FieldNotIn(FieldTopic3, vs...))
}

// Topic3GT applies the GT predicate on the "topic3" field.
func Topic3GT(v string) predicate.AI_THEMES {
	return predicate.AI_THEMES(sql.FieldGT(FieldTopic3, v))
}

// Topic3GTE applies the GTE predicate on the "topic3" field.
func Topic3GTE(v string) predicate.AI_THEMES {
	return predicate.AI_THEMES(sql.FieldGTE(FieldTopic3, v))
}

// Topic3LT applies the LT predicate on the "topic3" field.
func Topic3LT(v string) predicate.AI_THEMES {
	return predicate.AI_THEMES(sql.FieldLT(FieldTopic3, v))
}

// Topic3LTE applies the LTE predicate on the "topic3" field.
func Topic3LTE(v string) predicate.AI_THEMES {
	return predicate.AI_THEMES(sql.FieldLTE(FieldTopic3, v))
}

// Topic3Contains applies the Contains predicate on the "topic3" field.
func Topic3Contains(v string) predicate.AI_THEMES {
	return predicate.AI_THEMES(sql.FieldContains(FieldTopic3, v))
}

// Topic3HasPrefix applies the HasPrefix predicate on the "topic3" field.
func Topic3HasPrefix(v string) predicate.AI_THEMES {
	return predicate.AI_THEMES(sql.FieldHasPrefix(FieldTopic3, v))
}

// Topic3HasSuffix applies the HasSuffix predicate on the "topic3" field.
func Topic3HasSuffix(v string) predicate.AI_THEMES {
	return predicate.AI_THEMES(sql.FieldHasSuffix(FieldTopic3, v))
}

// Topic3EqualFold applies the EqualFold predicate on the "topic3" field.
func Topic3EqualFold(v string) predicate.AI_THEMES {
	return predicate.AI_THEMES(sql.FieldEqualFold(FieldTopic3, v))
}

// Topic3ContainsFold applies the ContainsFold predicate on the "topic3" field.
func Topic3ContainsFold(v string) predicate.AI_THEMES {
	return predicate.AI_THEMES(sql.FieldContainsFold(FieldTopic3, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.AI_THEMES {
	return predicate.AI_THEMES(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.AI_THEMES {
	return predicate.AI_THEMES(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.AI_THEMES {
	return predicate.AI_THEMES(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.AI_THEMES {
	return predicate.AI_THEMES(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.AI_THEMES {
	return predicate.AI_THEMES(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.AI_THEMES {
	return predicate.AI_THEMES(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.AI_THEMES {
	return predicate.AI_THEMES(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.AI_THEMES {
	return predicate.AI_THEMES(sql.FieldLTE(FieldCreatedAt, v))
}

// HasUsed applies the HasEdge predicate on the "used" edge.
func HasUsed() predicate.AI_THEMES {
	return predicate.AI_THEMES(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, UsedTable, UsedColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUsedWith applies the HasEdge predicate on the "used" edge with a given conditions (other predicates).
func HasUsedWith(preds ...predicate.EVENTS) predicate.AI_THEMES {
	return predicate.AI_THEMES(func(s *sql.Selector) {
		step := newUsedStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.AI_THEMES) predicate.AI_THEMES {
	return predicate.AI_THEMES(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.AI_THEMES) predicate.AI_THEMES {
	return predicate.AI_THEMES(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.AI_THEMES) predicate.AI_THEMES {
	return predicate.AI_THEMES(sql.NotPredicates(p))
}
