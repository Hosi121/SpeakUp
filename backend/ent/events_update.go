// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Hosi121/SpeakUp/ent/ai_themes"
	"github.com/Hosi121/SpeakUp/ent/event_records"
	"github.com/Hosi121/SpeakUp/ent/events"
	"github.com/Hosi121/SpeakUp/ent/predicate"
)

// EVENTSUpdate is the builder for updating EVENTS entities.
type EVENTSUpdate struct {
	config
	hooks    []Hook
	mutation *EVENTSMutation
}

// Where appends a list predicates to the EVENTSUpdate builder.
func (eu *EVENTSUpdate) Where(ps ...predicate.EVENTS) *EVENTSUpdate {
	eu.mutation.Where(ps...)
	return eu
}

// SetEventStart sets the "event_start" field.
func (eu *EVENTSUpdate) SetEventStart(t time.Time) *EVENTSUpdate {
	eu.mutation.SetEventStart(t)
	return eu
}

// SetNillableEventStart sets the "event_start" field if the given value is not nil.
func (eu *EVENTSUpdate) SetNillableEventStart(t *time.Time) *EVENTSUpdate {
	if t != nil {
		eu.SetEventStart(*t)
	}
	return eu
}

// SetEventEnd sets the "event_end" field.
func (eu *EVENTSUpdate) SetEventEnd(t time.Time) *EVENTSUpdate {
	eu.mutation.SetEventEnd(t)
	return eu
}

// SetNillableEventEnd sets the "event_end" field if the given value is not nil.
func (eu *EVENTSUpdate) SetNillableEventEnd(t *time.Time) *EVENTSUpdate {
	if t != nil {
		eu.SetEventEnd(*t)
	}
	return eu
}

// SetThemeID sets the "theme_id" field.
func (eu *EVENTSUpdate) SetThemeID(i int) *EVENTSUpdate {
	eu.mutation.ResetThemeID()
	eu.mutation.SetThemeID(i)
	return eu
}

// SetNillableThemeID sets the "theme_id" field if the given value is not nil.
func (eu *EVENTSUpdate) SetNillableThemeID(i *int) *EVENTSUpdate {
	if i != nil {
		eu.SetThemeID(*i)
	}
	return eu
}

// AddThemeID adds i to the "theme_id" field.
func (eu *EVENTSUpdate) AddThemeID(i int) *EVENTSUpdate {
	eu.mutation.AddThemeID(i)
	return eu
}

// SetCreatedAt sets the "created_at" field.
func (eu *EVENTSUpdate) SetCreatedAt(t time.Time) *EVENTSUpdate {
	eu.mutation.SetCreatedAt(t)
	return eu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (eu *EVENTSUpdate) SetNillableCreatedAt(t *time.Time) *EVENTSUpdate {
	if t != nil {
		eu.SetCreatedAt(*t)
	}
	return eu
}

// AddParticipatedIDs adds the "participated" edge to the EVENT_RECORDS entity by IDs.
func (eu *EVENTSUpdate) AddParticipatedIDs(ids ...int) *EVENTSUpdate {
	eu.mutation.AddParticipatedIDs(ids...)
	return eu
}

// AddParticipated adds the "participated" edges to the EVENT_RECORDS entity.
func (eu *EVENTSUpdate) AddParticipated(e ...*EVENT_RECORDS) *EVENTSUpdate {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return eu.AddParticipatedIDs(ids...)
}

// SetUsesID sets the "uses" edge to the AI_THEMES entity by ID.
func (eu *EVENTSUpdate) SetUsesID(id int) *EVENTSUpdate {
	eu.mutation.SetUsesID(id)
	return eu
}

// SetNillableUsesID sets the "uses" edge to the AI_THEMES entity by ID if the given value is not nil.
func (eu *EVENTSUpdate) SetNillableUsesID(id *int) *EVENTSUpdate {
	if id != nil {
		eu = eu.SetUsesID(*id)
	}
	return eu
}

// SetUses sets the "uses" edge to the AI_THEMES entity.
func (eu *EVENTSUpdate) SetUses(a *AI_THEMES) *EVENTSUpdate {
	return eu.SetUsesID(a.ID)
}

// Mutation returns the EVENTSMutation object of the builder.
func (eu *EVENTSUpdate) Mutation() *EVENTSMutation {
	return eu.mutation
}

// ClearParticipated clears all "participated" edges to the EVENT_RECORDS entity.
func (eu *EVENTSUpdate) ClearParticipated() *EVENTSUpdate {
	eu.mutation.ClearParticipated()
	return eu
}

// RemoveParticipatedIDs removes the "participated" edge to EVENT_RECORDS entities by IDs.
func (eu *EVENTSUpdate) RemoveParticipatedIDs(ids ...int) *EVENTSUpdate {
	eu.mutation.RemoveParticipatedIDs(ids...)
	return eu
}

// RemoveParticipated removes "participated" edges to EVENT_RECORDS entities.
func (eu *EVENTSUpdate) RemoveParticipated(e ...*EVENT_RECORDS) *EVENTSUpdate {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return eu.RemoveParticipatedIDs(ids...)
}

// ClearUses clears the "uses" edge to the AI_THEMES entity.
func (eu *EVENTSUpdate) ClearUses() *EVENTSUpdate {
	eu.mutation.ClearUses()
	return eu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (eu *EVENTSUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, eu.sqlSave, eu.mutation, eu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (eu *EVENTSUpdate) SaveX(ctx context.Context) int {
	affected, err := eu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (eu *EVENTSUpdate) Exec(ctx context.Context) error {
	_, err := eu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (eu *EVENTSUpdate) ExecX(ctx context.Context) {
	if err := eu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (eu *EVENTSUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(events.Table, events.Columns, sqlgraph.NewFieldSpec(events.FieldID, field.TypeInt))
	if ps := eu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := eu.mutation.EventStart(); ok {
		_spec.SetField(events.FieldEventStart, field.TypeTime, value)
	}
	if value, ok := eu.mutation.EventEnd(); ok {
		_spec.SetField(events.FieldEventEnd, field.TypeTime, value)
	}
	if value, ok := eu.mutation.ThemeID(); ok {
		_spec.SetField(events.FieldThemeID, field.TypeInt, value)
	}
	if value, ok := eu.mutation.AddedThemeID(); ok {
		_spec.AddField(events.FieldThemeID, field.TypeInt, value)
	}
	if value, ok := eu.mutation.CreatedAt(); ok {
		_spec.SetField(events.FieldCreatedAt, field.TypeTime, value)
	}
	if eu.mutation.ParticipatedCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   events.ParticipatedTable,
			Columns: []string{events.ParticipatedColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event_records.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.RemovedParticipatedIDs(); len(nodes) > 0 && !eu.mutation.ParticipatedCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   events.ParticipatedTable,
			Columns: []string{events.ParticipatedColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event_records.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.ParticipatedIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   events.ParticipatedTable,
			Columns: []string{events.ParticipatedColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event_records.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eu.mutation.UsesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   events.UsesTable,
			Columns: []string{events.UsesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ai_themes.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.UsesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   events.UsesTable,
			Columns: []string{events.UsesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ai_themes.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, eu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{events.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	eu.mutation.done = true
	return n, nil
}

// EVENTSUpdateOne is the builder for updating a single EVENTS entity.
type EVENTSUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *EVENTSMutation
}

// SetEventStart sets the "event_start" field.
func (euo *EVENTSUpdateOne) SetEventStart(t time.Time) *EVENTSUpdateOne {
	euo.mutation.SetEventStart(t)
	return euo
}

// SetNillableEventStart sets the "event_start" field if the given value is not nil.
func (euo *EVENTSUpdateOne) SetNillableEventStart(t *time.Time) *EVENTSUpdateOne {
	if t != nil {
		euo.SetEventStart(*t)
	}
	return euo
}

// SetEventEnd sets the "event_end" field.
func (euo *EVENTSUpdateOne) SetEventEnd(t time.Time) *EVENTSUpdateOne {
	euo.mutation.SetEventEnd(t)
	return euo
}

// SetNillableEventEnd sets the "event_end" field if the given value is not nil.
func (euo *EVENTSUpdateOne) SetNillableEventEnd(t *time.Time) *EVENTSUpdateOne {
	if t != nil {
		euo.SetEventEnd(*t)
	}
	return euo
}

// SetThemeID sets the "theme_id" field.
func (euo *EVENTSUpdateOne) SetThemeID(i int) *EVENTSUpdateOne {
	euo.mutation.ResetThemeID()
	euo.mutation.SetThemeID(i)
	return euo
}

// SetNillableThemeID sets the "theme_id" field if the given value is not nil.
func (euo *EVENTSUpdateOne) SetNillableThemeID(i *int) *EVENTSUpdateOne {
	if i != nil {
		euo.SetThemeID(*i)
	}
	return euo
}

// AddThemeID adds i to the "theme_id" field.
func (euo *EVENTSUpdateOne) AddThemeID(i int) *EVENTSUpdateOne {
	euo.mutation.AddThemeID(i)
	return euo
}

// SetCreatedAt sets the "created_at" field.
func (euo *EVENTSUpdateOne) SetCreatedAt(t time.Time) *EVENTSUpdateOne {
	euo.mutation.SetCreatedAt(t)
	return euo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (euo *EVENTSUpdateOne) SetNillableCreatedAt(t *time.Time) *EVENTSUpdateOne {
	if t != nil {
		euo.SetCreatedAt(*t)
	}
	return euo
}

// AddParticipatedIDs adds the "participated" edge to the EVENT_RECORDS entity by IDs.
func (euo *EVENTSUpdateOne) AddParticipatedIDs(ids ...int) *EVENTSUpdateOne {
	euo.mutation.AddParticipatedIDs(ids...)
	return euo
}

// AddParticipated adds the "participated" edges to the EVENT_RECORDS entity.
func (euo *EVENTSUpdateOne) AddParticipated(e ...*EVENT_RECORDS) *EVENTSUpdateOne {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return euo.AddParticipatedIDs(ids...)
}

// SetUsesID sets the "uses" edge to the AI_THEMES entity by ID.
func (euo *EVENTSUpdateOne) SetUsesID(id int) *EVENTSUpdateOne {
	euo.mutation.SetUsesID(id)
	return euo
}

// SetNillableUsesID sets the "uses" edge to the AI_THEMES entity by ID if the given value is not nil.
func (euo *EVENTSUpdateOne) SetNillableUsesID(id *int) *EVENTSUpdateOne {
	if id != nil {
		euo = euo.SetUsesID(*id)
	}
	return euo
}

// SetUses sets the "uses" edge to the AI_THEMES entity.
func (euo *EVENTSUpdateOne) SetUses(a *AI_THEMES) *EVENTSUpdateOne {
	return euo.SetUsesID(a.ID)
}

// Mutation returns the EVENTSMutation object of the builder.
func (euo *EVENTSUpdateOne) Mutation() *EVENTSMutation {
	return euo.mutation
}

// ClearParticipated clears all "participated" edges to the EVENT_RECORDS entity.
func (euo *EVENTSUpdateOne) ClearParticipated() *EVENTSUpdateOne {
	euo.mutation.ClearParticipated()
	return euo
}

// RemoveParticipatedIDs removes the "participated" edge to EVENT_RECORDS entities by IDs.
func (euo *EVENTSUpdateOne) RemoveParticipatedIDs(ids ...int) *EVENTSUpdateOne {
	euo.mutation.RemoveParticipatedIDs(ids...)
	return euo
}

// RemoveParticipated removes "participated" edges to EVENT_RECORDS entities.
func (euo *EVENTSUpdateOne) RemoveParticipated(e ...*EVENT_RECORDS) *EVENTSUpdateOne {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return euo.RemoveParticipatedIDs(ids...)
}

// ClearUses clears the "uses" edge to the AI_THEMES entity.
func (euo *EVENTSUpdateOne) ClearUses() *EVENTSUpdateOne {
	euo.mutation.ClearUses()
	return euo
}

// Where appends a list predicates to the EVENTSUpdate builder.
func (euo *EVENTSUpdateOne) Where(ps ...predicate.EVENTS) *EVENTSUpdateOne {
	euo.mutation.Where(ps...)
	return euo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (euo *EVENTSUpdateOne) Select(field string, fields ...string) *EVENTSUpdateOne {
	euo.fields = append([]string{field}, fields...)
	return euo
}

// Save executes the query and returns the updated EVENTS entity.
func (euo *EVENTSUpdateOne) Save(ctx context.Context) (*EVENTS, error) {
	return withHooks(ctx, euo.sqlSave, euo.mutation, euo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (euo *EVENTSUpdateOne) SaveX(ctx context.Context) *EVENTS {
	node, err := euo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (euo *EVENTSUpdateOne) Exec(ctx context.Context) error {
	_, err := euo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (euo *EVENTSUpdateOne) ExecX(ctx context.Context) {
	if err := euo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (euo *EVENTSUpdateOne) sqlSave(ctx context.Context) (_node *EVENTS, err error) {
	_spec := sqlgraph.NewUpdateSpec(events.Table, events.Columns, sqlgraph.NewFieldSpec(events.FieldID, field.TypeInt))
	id, ok := euo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "EVENTS.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := euo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, events.FieldID)
		for _, f := range fields {
			if !events.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != events.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := euo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := euo.mutation.EventStart(); ok {
		_spec.SetField(events.FieldEventStart, field.TypeTime, value)
	}
	if value, ok := euo.mutation.EventEnd(); ok {
		_spec.SetField(events.FieldEventEnd, field.TypeTime, value)
	}
	if value, ok := euo.mutation.ThemeID(); ok {
		_spec.SetField(events.FieldThemeID, field.TypeInt, value)
	}
	if value, ok := euo.mutation.AddedThemeID(); ok {
		_spec.AddField(events.FieldThemeID, field.TypeInt, value)
	}
	if value, ok := euo.mutation.CreatedAt(); ok {
		_spec.SetField(events.FieldCreatedAt, field.TypeTime, value)
	}
	if euo.mutation.ParticipatedCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   events.ParticipatedTable,
			Columns: []string{events.ParticipatedColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event_records.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.RemovedParticipatedIDs(); len(nodes) > 0 && !euo.mutation.ParticipatedCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   events.ParticipatedTable,
			Columns: []string{events.ParticipatedColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event_records.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.ParticipatedIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   events.ParticipatedTable,
			Columns: []string{events.ParticipatedColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event_records.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euo.mutation.UsesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   events.UsesTable,
			Columns: []string{events.UsesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ai_themes.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.UsesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   events.UsesTable,
			Columns: []string{events.UsesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ai_themes.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &EVENTS{config: euo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, euo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{events.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	euo.mutation.done = true
	return _node, nil
}
