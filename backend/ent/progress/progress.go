// Code generated by ent, DO NOT EDIT.

package progress

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the progress type in the database.
	Label = "progress"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldUserID holds the string denoting the user_id field in the database.
	FieldUserID = "user_id"
	// FieldLoginDays holds the string denoting the login_days field in the database.
	FieldLoginDays = "login_days"
	// FieldConsecutiveParticipants holds the string denoting the consecutive_participants field in the database.
	FieldConsecutiveParticipants = "consecutive_participants"
	// FieldConsecutiveLoginDays holds the string denoting the consecutive_login_days field in the database.
	FieldConsecutiveLoginDays = "consecutive_login_days"
	// EdgeRecorded holds the string denoting the recorded edge name in mutations.
	EdgeRecorded = "recorded"
	// Table holds the table name of the progress in the database.
	Table = "progres_ss"
	// RecordedTable is the table that holds the recorded relation/edge.
	RecordedTable = "progres_ss"
	// RecordedInverseTable is the table name for the USERS entity.
	// It exists in this package in order to avoid circular dependency with the "users" package.
	RecordedInverseTable = "user_ss"
	// RecordedColumn is the table column denoting the recorded relation/edge.
	RecordedColumn = "users_records"
)

// Columns holds all SQL columns for progress fields.
var Columns = []string{
	FieldID,
	FieldUserID,
	FieldLoginDays,
	FieldConsecutiveParticipants,
	FieldConsecutiveLoginDays,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "progres_ss"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"users_records",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultLoginDays holds the default value on creation for the "login_days" field.
	DefaultLoginDays int
	// DefaultConsecutiveParticipants holds the default value on creation for the "consecutive_participants" field.
	DefaultConsecutiveParticipants int
	// DefaultConsecutiveLoginDays holds the default value on creation for the "consecutive_login_days" field.
	DefaultConsecutiveLoginDays int
)

// OrderOption defines the ordering options for the PROGRESS queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByUserID orders the results by the user_id field.
func ByUserID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUserID, opts...).ToFunc()
}

// ByLoginDays orders the results by the login_days field.
func ByLoginDays(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLoginDays, opts...).ToFunc()
}

// ByConsecutiveParticipants orders the results by the consecutive_participants field.
func ByConsecutiveParticipants(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldConsecutiveParticipants, opts...).ToFunc()
}

// ByConsecutiveLoginDays orders the results by the consecutive_login_days field.
func ByConsecutiveLoginDays(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldConsecutiveLoginDays, opts...).ToFunc()
}

// ByRecordedField orders the results by recorded field.
func ByRecordedField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newRecordedStep(), sql.OrderByField(field, opts...))
	}
}
func newRecordedStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(RecordedInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, true, RecordedTable, RecordedColumn),
	)
}
