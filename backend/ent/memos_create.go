// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Hosi121/SpeakUp/ent/memos"
	"github.com/Hosi121/SpeakUp/ent/users"
)

// MEMOSCreate is the builder for creating a MEMOS entity.
type MEMOSCreate struct {
	config
	mutation *MEMOSMutation
	hooks    []Hook
}

// SetMemoID sets the "memo_id" field.
func (mc *MEMOSCreate) SetMemoID(i int) *MEMOSCreate {
	mc.mutation.SetMemoID(i)
	return mc
}

// SetUserID sets the "user_id" field.
func (mc *MEMOSCreate) SetUserID(i int) *MEMOSCreate {
	mc.mutation.SetUserID(i)
	return mc
}

// SetMemo1 sets the "memo1" field.
func (mc *MEMOSCreate) SetMemo1(s string) *MEMOSCreate {
	mc.mutation.SetMemo1(s)
	return mc
}

// SetNillableMemo1 sets the "memo1" field if the given value is not nil.
func (mc *MEMOSCreate) SetNillableMemo1(s *string) *MEMOSCreate {
	if s != nil {
		mc.SetMemo1(*s)
	}
	return mc
}

// SetMemo2 sets the "memo2" field.
func (mc *MEMOSCreate) SetMemo2(s string) *MEMOSCreate {
	mc.mutation.SetMemo2(s)
	return mc
}

// SetNillableMemo2 sets the "memo2" field if the given value is not nil.
func (mc *MEMOSCreate) SetNillableMemo2(s *string) *MEMOSCreate {
	if s != nil {
		mc.SetMemo2(*s)
	}
	return mc
}

// SetPreparedID sets the "prepared" edge to the USERS entity by ID.
func (mc *MEMOSCreate) SetPreparedID(id int) *MEMOSCreate {
	mc.mutation.SetPreparedID(id)
	return mc
}

// SetNillablePreparedID sets the "prepared" edge to the USERS entity by ID if the given value is not nil.
func (mc *MEMOSCreate) SetNillablePreparedID(id *int) *MEMOSCreate {
	if id != nil {
		mc = mc.SetPreparedID(*id)
	}
	return mc
}

// SetPrepared sets the "prepared" edge to the USERS entity.
func (mc *MEMOSCreate) SetPrepared(u *USERS) *MEMOSCreate {
	return mc.SetPreparedID(u.ID)
}

// Mutation returns the MEMOSMutation object of the builder.
func (mc *MEMOSCreate) Mutation() *MEMOSMutation {
	return mc.mutation
}

// Save creates the MEMOS in the database.
func (mc *MEMOSCreate) Save(ctx context.Context) (*MEMOS, error) {
	mc.defaults()
	return withHooks(ctx, mc.sqlSave, mc.mutation, mc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (mc *MEMOSCreate) SaveX(ctx context.Context) *MEMOS {
	v, err := mc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mc *MEMOSCreate) Exec(ctx context.Context) error {
	_, err := mc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mc *MEMOSCreate) ExecX(ctx context.Context) {
	if err := mc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (mc *MEMOSCreate) defaults() {
	if _, ok := mc.mutation.Memo1(); !ok {
		v := memos.DefaultMemo1
		mc.mutation.SetMemo1(v)
	}
	if _, ok := mc.mutation.Memo2(); !ok {
		v := memos.DefaultMemo2
		mc.mutation.SetMemo2(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mc *MEMOSCreate) check() error {
	if _, ok := mc.mutation.MemoID(); !ok {
		return &ValidationError{Name: "memo_id", err: errors.New(`ent: missing required field "MEMOS.memo_id"`)}
	}
	if _, ok := mc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`ent: missing required field "MEMOS.user_id"`)}
	}
	if _, ok := mc.mutation.Memo1(); !ok {
		return &ValidationError{Name: "memo1", err: errors.New(`ent: missing required field "MEMOS.memo1"`)}
	}
	if v, ok := mc.mutation.Memo1(); ok {
		if err := memos.Memo1Validator(v); err != nil {
			return &ValidationError{Name: "memo1", err: fmt.Errorf(`ent: validator failed for field "MEMOS.memo1": %w`, err)}
		}
	}
	if _, ok := mc.mutation.Memo2(); !ok {
		return &ValidationError{Name: "memo2", err: errors.New(`ent: missing required field "MEMOS.memo2"`)}
	}
	if v, ok := mc.mutation.Memo2(); ok {
		if err := memos.Memo2Validator(v); err != nil {
			return &ValidationError{Name: "memo2", err: fmt.Errorf(`ent: validator failed for field "MEMOS.memo2": %w`, err)}
		}
	}
	return nil
}

func (mc *MEMOSCreate) sqlSave(ctx context.Context) (*MEMOS, error) {
	if err := mc.check(); err != nil {
		return nil, err
	}
	_node, _spec := mc.createSpec()
	if err := sqlgraph.CreateNode(ctx, mc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	mc.mutation.id = &_node.ID
	mc.mutation.done = true
	return _node, nil
}

func (mc *MEMOSCreate) createSpec() (*MEMOS, *sqlgraph.CreateSpec) {
	var (
		_node = &MEMOS{config: mc.config}
		_spec = sqlgraph.NewCreateSpec(memos.Table, sqlgraph.NewFieldSpec(memos.FieldID, field.TypeInt))
	)
	if value, ok := mc.mutation.MemoID(); ok {
		_spec.SetField(memos.FieldMemoID, field.TypeInt, value)
		_node.MemoID = value
	}
	if value, ok := mc.mutation.UserID(); ok {
		_spec.SetField(memos.FieldUserID, field.TypeInt, value)
		_node.UserID = value
	}
	if value, ok := mc.mutation.Memo1(); ok {
		_spec.SetField(memos.FieldMemo1, field.TypeString, value)
		_node.Memo1 = value
	}
	if value, ok := mc.mutation.Memo2(); ok {
		_spec.SetField(memos.FieldMemo2, field.TypeString, value)
		_node.Memo2 = value
	}
	if nodes := mc.mutation.PreparedIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   memos.PreparedTable,
			Columns: []string{memos.PreparedColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(users.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.users_prepares = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// MEMOSCreateBulk is the builder for creating many MEMOS entities in bulk.
type MEMOSCreateBulk struct {
	config
	err      error
	builders []*MEMOSCreate
}

// Save creates the MEMOS entities in the database.
func (mcb *MEMOSCreateBulk) Save(ctx context.Context) ([]*MEMOS, error) {
	if mcb.err != nil {
		return nil, mcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(mcb.builders))
	nodes := make([]*MEMOS, len(mcb.builders))
	mutators := make([]Mutator, len(mcb.builders))
	for i := range mcb.builders {
		func(i int, root context.Context) {
			builder := mcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*MEMOSMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, mcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, mcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, mcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (mcb *MEMOSCreateBulk) SaveX(ctx context.Context) []*MEMOS {
	v, err := mcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mcb *MEMOSCreateBulk) Exec(ctx context.Context) error {
	_, err := mcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mcb *MEMOSCreateBulk) ExecX(ctx context.Context) {
	if err := mcb.Exec(ctx); err != nil {
		panic(err)
	}
}
